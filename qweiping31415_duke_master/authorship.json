[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    archiveVersion \u003d \"0.2.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "version \u00270.2.0\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "application {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    mainClassName \u003d \u0027Launcher\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    run {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        standardInput \u003d System.in"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "test {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    useJUnitPlatform();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 63
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1 / ToDo / 0 / read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2 / Deadline / 1 / homework / 12th of DECEMBER 1212, 12:12pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "3 / Event / 0 / jogging with friends / Wednesday"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 3
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[1. Introduction](README.md#Introduction)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[2. Quick Start](README.md#Quick-Start)  "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[3. Features](README.md#Features)    "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[4. FAQ](README.md#FAQ)   "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "[5. Command Summary](README.md#Command-Summary) "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "## 1. Introduction "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Duke is for those who prefer to use a desktop app for managing tasks. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "More importantly, DukeBot is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). Enjoy!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "## 2. Quick Start "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer.  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "2. Download the latest duke-0.2.0.jar [here](https://github.com/qweiping31415/duke/releases)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "![Ui.png](Ui.png)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "## 3. Features "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.1. Viewing help"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Shows a simple user guide to command formats.  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.2. Adding a task: `todo`, `deadline`, `event`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Adds a task to the list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "##### 3.2.1. Adding a ToDo Task: `todo` "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Adds a ToDo task to the list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `todo TASK_DESCRIPTION` "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `todo homework`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `todo read book`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "##### 3.2.2. Adding a Deadline Task: `deadline` "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Adds a Deadline task to the list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `deadline TASK_DESCRIPTION /by DUE_DATETIME`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `deadline do homework /by 3pm`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `deadline do homework /by Monday`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e ###### **Formatted date and time**:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e If `DUE_DATETIME` is entered in the `DD/MM/YYYY HHMM` format, it will automatically be converted to a more readable format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003eExample:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e`deadline do homework /by 12/12/1212 1212`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "##### 3.2.3. Adding a Event Task: `event` "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Adds an Event task to Duke"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `event TASK_DESCRIPTION /by DUE_DATETIME`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `event consultation /at 3pm`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `event consultation /at Monday`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e ###### **Formatted date and time**:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e If `DUE_DATETIME` is entered in the `DD/MM/YYYY HHMM` format, it will automatically be converted to a more readable format."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003eExample:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003e`event consultation /at 12/12/1212 1212`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.3. Finding tasks by keyword: `find`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Finds tasks whose descriptions contain an exact match of the given keyword."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `find KEYWORD` "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* `find homework`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.4. Marking a task as done: `done`  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Marks the specified task in the list as done.  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Marks the tasks at the specified INDEX."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.5. Deleting a task: `delete`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Deletes the specified task from the list.  "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Deletes the tasks at the specified INDEX."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.6. Listing all tasks : `list`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Shows a list of all tasks in the list.  "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "### 3.7. Exiting the program: `bye`  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Exits the program.  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* None"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "## 5. Command Summary "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Add : `CODE_NAME TASK_DESCRIPTION [ADDITIONAL_KEYWORD] [DUE_DATETIME]`  "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `todo homework`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `deadline do homework /by 3pm`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `event consultation /at 12/12/1212 1212`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Find : `find KEYWORD`   "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `find homework`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Delete : `delete INDEX`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Done : `done INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "e.g. `done 3`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* List : `list`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Help : `help`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "* Exit : `bye`"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 117,
      "-": 11
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "//Some design for DialogBox.fxml"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "//adapted from https://github.com/calvincxz/duke/blob/master/src/main/resources/view/DialogBox.fxml"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final Color DIALOGBOX_BACKGROUND_RED \u003d Color.rgb(200,0,0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final Color DIALOGBOX_BACKGROUND_BLUE \u003d Color.rgb(0,0,200);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final Color DIALOGBOX_BACKGROUND_GREEN \u003d Color.rgb(0,150,0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final CornerRadii DIALOGBOX_BACKGROUND_RADII \u003d new CornerRadii(10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static final Insets DIALOGBOX_BACKGROUND_INSET \u003d new Insets(0,0,0,0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    // sets the background to a blue rounded corner box"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DialogBox user \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        user.setBackground("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                new Background("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        new BackgroundFill("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                DIALOGBOX_BACKGROUND_BLUE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                DIALOGBOX_BACKGROUND_RADII,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                DIALOGBOX_BACKGROUND_INSET)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return user;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //sets the background to green or red depending on error status"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img, int errorStatus) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DialogBox duke \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Color[] colours \u003d  new Color[]{DIALOGBOX_BACKGROUND_GREEN,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                DIALOGBOX_BACKGROUND_RED};"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Color correctColor \u003d colours[errorStatus];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        duke.setBackground("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                new Background("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        new BackgroundFill("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                correctColor,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                DIALOGBOX_BACKGROUND_RADII,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                                DIALOGBOX_BACKGROUND_INSET)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        duke.flip();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return duke;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 105
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.CommandType;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * The driver class to run user interface of Duke. Duke provides commands to add different tasks,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * list out tasks, marking tasks as done, deleting tasks and storing the tasks into a file for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * retrieval after reboot"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises a new Duke application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when parts of the command cannot be executed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    Duke() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Storage storage \u003d Storage.createStorageIfRequired();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.taskList \u003d new TaskList(storage.load(), storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Task.setTaskList(taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    Response getResponse(String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Command c \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new Response(c.execute(taskList, ui),false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (IllegalArgumentException | DukeException | IOException error2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new Response(ui.printErrorMessage(error2),true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 46,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void start(Stage stage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 35
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.Dialog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "//Some design for MainWindow.fxml"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "//adapted from https://github.com/calvincxz/duke/blob/master/src/main/resources/view/MainWindow.fxml"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(ui.printWelcomeMessage(), dukeImage, 0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Response response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        int mode \u003d booleanToInteger(response.getErrorStatus());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                DialogBox.getDukeDialog(response.getMessage(), dukeImage,mode)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private int booleanToInteger(boolean isTrue) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (isTrue) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 75
    }
  },
  {
    "path": "src/main/java/Response.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a response from Duke due to some user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * A response provides the getter methods to its message and error status"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "class Response {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private boolean isError;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises a Response that has a default isDone field of false."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param message Message to be displayed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param isError Error status tagged to the message"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    Response(String message, boolean isError) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the message to be shown to the user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Message to be displayed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    String getMessage() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the error status tagged to the message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Error status"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    boolean getErrorStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return isError;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that adds a deadline task to the task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * The AddDeadlineCommand object requires the parameters of the task that is to be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * added to the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the add command which contains the parameters of the task to be created"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param description deadline description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param date date description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public AddDeadlineCommand(String description, String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_ADD_DEADLINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(description,date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Adds the deadline task to the task list and prints the result."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when the new task cannot be added to the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Deadline task \u003d new Deadline(this.description,this.date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(taskList,ui);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        taskList.addToList(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printAddMessage(task, taskList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 54
    }
  },
  {
    "path": "src/main/java/duke/commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that adds a event task to the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * The AddEventCommand object requires the parameters of the task that is to be"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * added to the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class AddEventCommand extends Command{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the add command which contains the parameters of the task to be created"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Constructor to creating a command for adding an event task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param description event description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param date date description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public AddEventCommand(String description, String date) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_ADD_EVENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(description,date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Adds the event task to the task list and prints the result."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when the new task cannot be added to the file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Event task \u003d new Event(this.description,this.date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(taskList,ui);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        taskList.addToList(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printAddMessage(task, taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 56
    }
  },
  {
    "path": "src/main/java/duke/commands/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that adds a to-do task to the task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * The AddToDoCommand object requires the parameters of the task that is to be"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * added to the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class AddToDoCommand extends Command{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String [] tokens;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the add command which contains the parameters of the task to be created"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param tokens user input split by space, required for creating a to-do task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public AddToDoCommand(String [] tokens) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_ADD_TODO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.tokens \u003d tokens;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Adds the to-do task to the task list and prints the result."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when the new task cannot be added to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ToDo task \u003d ToDo.createToDo(tokens);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(taskList,ui);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        taskList.addToList(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printAddMessage(task, taskList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Base class for the other commands. Specifies the abstract method that is required to be implemented"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * by the children commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private CommandType commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the command of a specific command type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param commandType The type of command to be created."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Command(CommandType commandType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(commandType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * getter for type of command"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return type of command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public CommandType getCommandType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return commandType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Executes what the command is suppose to do."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Occurs when parts of the command cannot be executed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when the file update fails."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui) throws DukeException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 52
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the different command types"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_ADD_TODO,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_ADD_EVENT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_ADD_DEADLINE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_SHOW_LIST,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_DELETE_TASK,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_DONE_TASK,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_NULL,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_EXIT,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_FIND_TASK,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    COMMAND_HELP"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 18
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeExceptionType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that deletes a task to the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * The DeleteCommand object requires the task number of the task in the list that is to be"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * deleted from the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the command which contains the index of the task to be deleted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param index The index of the task to be deleted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private DeleteCommand(int index){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_DELETE_TASK);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Service for creating a delete command that checks for number formatting errors"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param tokens User input split by space, required for creating a delete command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when the parameters does not specify the index of the task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static DeleteCommand createDeleteIfValid(String [] tokens) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int index \u003d Integer.parseInt(tokens[1])-1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new DukeException(\"Must be integer\", DukeExceptionType.NOT_INTEGER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Deletes the specified task from the task list and prints the result."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when the task cannot be removed from the file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assert taskList !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Task task \u003d taskList.getTaskAt(index+1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            taskList.removeFromList(task);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return ui.printDeletion(task, taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (IndexOutOfBoundsException error3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return ui.printOneLine(new DukeException(\"No such task\", DukeExceptionType.MISSING_TASK).getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 71
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeExceptionType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that marks a task in the task list as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * The DoneCommand object requires the task number of the task that is to be marked in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the command which contains the index of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * to be marked as done"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param index the index of the task to be deleted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private DoneCommand(int index){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_DONE_TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert index \u003e\u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Service for creating a done command that checks for number formatting errors"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param tokens User input split by space, required for creating a done command"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when the parameters does not specify the index of  the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static DoneCommand createDoneIfValid(String [] tokens) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int index \u003d Integer.parseInt(tokens[1])-1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (NumberFormatException error) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new DukeException(\"Must be integer\", DukeExceptionType.NOT_INTEGER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Executes by marking a particular task as done and prints to the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when the file update fails."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assert taskList !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Task task \u003d taskList.getTaskAt(index+1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            boolean isDoneBefore \u003d task.setDone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (isDoneBefore) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                throw new IllegalArgumentException(\"Task has already been done\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            taskList.setDoneInList(this.index+1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            List\u003cString\u003e inst \u003d List.of(\"Nice! I\u0027ve marked this task as done: \","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    \"  \"+task.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return ui.printInput(inst);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (IndexOutOfBoundsException error3) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return ui.printOneLine(new DukeException(\"No such task\", DukeExceptionType.MISSING_TASK).getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (IllegalArgumentException error2) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return ui.printOneLine(new DukeException(error2.getMessage(), DukeExceptionType.TASK_ALREADY_DONE).getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 83
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method to exit the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the exit command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ExitCommand(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_EXIT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert ui !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printByeMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeExceptionType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that finds tasks with the matching keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the find command which contains the keyword"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * where the tasks will be searched against"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param keyword Keyword to be searched against"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private FindCommand(String keyword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_FIND_TASK);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert keyword !\u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Service for creating a find command that checks for multiple keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param tokens User input split by space, required for creating a find command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when the parameters contains multiple keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static FindCommand createFindCommandIfValid(String[] tokens) throws DukeException{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new DukeException(\"Must be a single keyword\", DukeExceptionType.NOT_SINGLE_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new FindCommand(tokens[1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Executes by storing all tasks with descriptions containing the keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and prints to the user"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(taskList, ui);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cTask\u003e resultList \u003d taskList.findTasks(this.keyword);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printFindResults(resultList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 62
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that shows a help page."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the list command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public HelpCommand(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_HELP);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Shows a help page to the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(taskList, ui);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printHelpMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command which contains an execute method that lists the tasks in the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the list command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ListCommand(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_SHOW_LIST);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Lists all the tasks in the task list and prints them out."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(taskList, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return ui.printNumberList(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 32
    }
  },
  {
    "path": "src/main/java/duke/commands/NullCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeExceptionType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a command that is invalid"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class NullCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the null command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public NullCommand(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(CommandType.COMMAND_NULL);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Throws an exception which tells"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * the user that the input command is not valid"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList The main task list of the application."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param ui The main user interface of the application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when the command does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String execute(TaskList taskList, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        throw new DukeException(\"Invalid Command! Please try again.\", DukeExceptionType.INVALID_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 35
    }
  },
  {
    "path": "src/main/java/duke/core/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeExceptionType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a class that takes in user inputs and translates them into different commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static String[] responses \u003d new String[]{\"/by\",\"/at\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static int[] startingIndex \u003d new int[]{9,6};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Takes in user input and convert it into a command which performs a set of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * instructions on the task list and ui."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param input String that contains user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return A command that execute a set of instructions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IllegalArgumentException Thrown when the length of the command is not sufficient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when exceptions occur due to non-length checks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static Command parseCommand(String input) throws DukeException, IllegalArgumentException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String[] tokens \u003d input.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (tokens.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new NullCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"help\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        checkValidLength(tokens);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (tokens[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return DoneCommand.createDoneIfValid(tokens);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return DeleteCommand.createDeleteIfValid(tokens);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return FindCommand.createFindCommandIfValid(tokens);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return Parser.createAddCommandIfValid(tokens, input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Throws an exception which tells"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * the user that the input command is not valid, by checking the length of command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * the user that the input lacks information based on each case"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param tokens User input split by space"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IllegalArgumentException Thrown when the length of the command is not sufficient"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static void checkValidLength(String[] tokens) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertArrayNotEmpty(tokens);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cString\u003e group1 \u003d List.of(\"todo\", \"deadline\", \"event\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cString\u003e group2 \u003d List.of(\"done\", \"delete\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (tokens.length \u003d\u003d 1 \u0026\u0026 group1.contains(tokens[0])) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(String.format(\"OOPS!!! The description of a %s cannot be empty.\",tokens[0]));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens.length \u003d\u003d 1 \u0026\u0026 group2.contains(tokens[0])) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(String.format(\"OOPS!!! %s command requires integer.\",tokens[0]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens.length \u003d\u003d 1 \u0026\u0026 tokens[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(String.format(\"OOPS!!! %s command requires keyword input.\",tokens[0]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    // helper method to check if user input can still be a valid to-do, deadline or event task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static Command createAddCommandIfValid(String[] tokens, String fullCommand) throws DukeException, IllegalArgumentException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertArrayNotEmpty(tokens);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cString\u003e validCommands \u003d List.of(\"todo\", \"deadline\", \"event\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!validCommands.contains(tokens[0])) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new DukeException(\"Command doesn\u0027t exist\", DukeExceptionType.INVALID_COMMAND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (tokens[0].equals(\"todo\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new AddToDoCommand(tokens);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return createDateCommandIfValid(tokens,fullCommand,0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (tokens[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return createDateCommandIfValid(tokens,fullCommand,1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new NullCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Takes in a string and tries to parse input string as Date and Time in dd/MM/yyyy HHmm,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * converting it into a more readable format"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * eg. dd/MM/yyyy HHmm(e.g. 11/12/1111 1111 -\u003e 11th of DECEMBER 1111, 11:11am)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param dateTimeString String to be parsed, and converted, if possible"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return The formatted date and time, if it can be formatted"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when the input cannot be formatted"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author qweiping31415-reused"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //Reused from https://github.com/briyanii/duke/blob/master/src/main/java/duke/command/Parser.java"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    // with minor modifications"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static String parseDateTime(String dateTimeString) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert dateTimeString !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            LocalDateTime dateAndTime \u003d LocalDateTime.parse(dateTimeString, formatter);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int year \u003d dateAndTime.getYear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            String month \u003d dateAndTime.getMonth().toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int day \u003d dateAndTime.getDayOfMonth();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int hour \u003d dateAndTime.getHour();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int minute \u003d dateAndTime.getMinute();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            StringBuilder dateTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append(getFormattedDay(day));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append(\" of \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append(month);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append(year);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append(\", \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime.append((hour \u003e 12 ? hour - 12 : hour \u003d\u003d 0 ? 12 : hour));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (minute !\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                dateTime.append(\":\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                dateTime.append(minute);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (hour \u003c 12) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                dateTime.append(\"am\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                dateTime.append(\"pm\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return dateTime.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (DateTimeParseException exception) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new DukeException(dateTimeString + \" is not in valid dd/MM/yyyy HHmm format.\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    DukeExceptionType.INVALID_DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    // helper method to attach a prefix to a day"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static String getFormattedDay(int day) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert day \u003e 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        int remainderHundred \u003d day % 100;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (remainderHundred \u003e 9 \u0026\u0026 remainderHundred \u003c 21) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return day + \"th\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            int remainderTen \u003d day % 10;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            switch (remainderTen) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    return day + \"st\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    return day + \"nd\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    return day + \"rd\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    return day + \"th\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    // helper method to check if the given date and time of a deadline or event task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    // can be recognised as a DateTime format."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static Command createDateCommandIfValid(String[] tokens, String fullCommand, int mode)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throws DukeException, IllegalArgumentException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertArrayNotEmpty(tokens);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert fullCommand !\u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cString\u003e lst \u003d Arrays.asList(tokens);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String key \u003d responses[mode];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!lst.contains(key)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(\"Missing deadline keyword!!\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        int index \u003d lst.indexOf(key);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        checkTaskDescription(index);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String[] datedTaskSplit \u003d fullCommand.split(\" \" + key + \" \");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        checkDeadline(datedTaskSplit);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String description \u003d datedTaskSplit[0].substring(startingIndex[mode]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String dateTime \u003d datedTaskSplit[1];"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (isDate(dateTime)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            String dateTimeString \u003d tokens[index + 1] + \" \" + tokens[index + 2];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            dateTime \u003d Parser.parseDateTime(dateTimeString);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return createDateCommand(mode, description, dateTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //helper method to create the correct kind of DateTime Command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static Command createDateCommand(int mode, String description, String correctDate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (mode\u003d\u003d0) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new AddDeadlineCommand(description,correctDate);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return new AddEventCommand(description,correctDate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //helper method to verify that the date is actually in dd/MM/yyyy HHmm format"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static boolean isDate(String dateDescription){"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert dateDescription !\u003d null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String[] dateSplit \u003d dateDescription.split(\" \");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (dateSplit.length !\u003d 2){"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else if (!dateSplit[0].contains(\"/\") ||"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                checkSlashCount(dateSplit[0])) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static boolean checkSlashCount(String str) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return str.chars()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .filter(ch -\u003e ch \u003d\u003d \u0027/\u0027)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                .count() !\u003d 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //helper method to check if the datetime task can have a description"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static void checkTaskDescription(int index) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (index -1 \u003c\u003d0) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(\"Please input task description for DateCommand\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //helper method to check if the datetime task is given a deadline"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private static void checkDeadline(String [] datedTaskSplit) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (datedTaskSplit.length \u003e 2) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(\"Multiple keyword detected!!\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (datedTaskSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new IllegalArgumentException(\"Please insert a due date!!!\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 252,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeExceptionType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the storage of the application. Provides methods that create a storage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * overwrite the contents of the file and loading data from the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Storage{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the Storage with the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param file File Object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Storage(File file) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a Storage for the application"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * It creates a new directory with a new text file if there is no existing file"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Storage for the application"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static Storage createStorageIfRequired() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String path \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        path +\u003d File.separator + \"DukeData\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        File customDir \u003d new File(path);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!customDir.exists()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            customDir.mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        path +\u003d File.separator + \"data.txt\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        File file \u003d new File(path);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new Storage(file);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Reads the data stored in the file, after which the date would be used"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * to generate a ArrayList that would be returned."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return An ArrayList of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws DukeException Thrown when the file does not exist."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            Scanner sc \u003d new Scanner(this.file);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                taskList.add(formatFileToTask(line));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return taskList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            throw new DukeException(\"Load failed\", DukeExceptionType.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Overwrites the data in the file by writing to the file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList Current task list stored in the application."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when writing to file fails."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void overwriteStorage(ArrayList\u003cTask\u003e taskList) throws IOException{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert (this.file !\u003d null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Task task: taskList){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            switch (task.getType()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                case TODO_TASK:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    fw.write(Task.getTaskID(task) + \" / \" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            \"ToDo\" + \" / \" +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            task.getStorageStatusIcon() + \" / \" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            task.getDescription() +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            System.lineSeparator());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                case DEADLINE_TASK:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    fw.write(Task.getTaskID(task) + \" / \" +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            \"Deadline\" + \" / \" +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            task.getStorageStatusIcon() + \" / \" +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            task.getDescription() + \" / \" +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            ((Deadline) task).getDate() +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            System.lineSeparator());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                case EVENT_TASK:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    fw.write(Task.getTaskID(task) + \" / \" +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            \"Event\" + \" / \" +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            task.getStorageStatusIcon() + \" / \" +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            task.getDescription() + \" / \" +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            ((Event) task).getDate() +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                            System.lineSeparator());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //helper method to convert the written format of the task in the file"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //into a Task to be loaded back into storage"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Task formatFileToTask(String line) throws DukeException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert line !\u003d null;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        String[] tokens \u003d line.split(\" / \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        switch(tokens[1]){"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            case \"ToDo\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                ToDo toDoTask \u003d new ToDo(tokens[3]);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                if (tokens[2].equals(\"1\")){"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    toDoTask.setDone();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                return toDoTask;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            case \"Deadline\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                Deadline deadlineTask \u003d new Deadline(tokens[3], tokens[4]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                if (tokens[2].equals(\"1\")){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    deadlineTask.setDone();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                return deadlineTask;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            case \"Event\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                Event eventTask \u003d new Event(tokens[3], tokens[4]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                if (tokens[2].equals(\"1\")){"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    eventTask.setDone();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                return eventTask;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                throw new DukeException(\"Unknown task detected? Something is wrong.\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        DukeExceptionType.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 160
    }
  },
  {
    "path": "src/main/java/duke/core/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the task list used to store the tasks. Provides methods to add a task to the list,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * getting a List, getting a task using the index and removing"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * a task based on the index specified, getting the size of the list, "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * setting the done status of a task and getting the ID of a task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the TaskList, creates an ArrayList to store the tasks,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and holds a reference to the main storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param storage The main storage of the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public TaskList(Storage storage){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises the TaskList, with a given ArrayList to store the tasks,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * and holds a reference to the main storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param list List to initialise with"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param storage The main storage of the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list, Storage storage){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.taskList \u003d list;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param task Task to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when writing to file fails."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void addToList(Task task) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.storage.overwriteStorage(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a ArrayList of type Task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return An ArrayList of tasks."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ArrayList\u003cTask\u003e getList(){"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a task at specified index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param index Index of task to be retrieved."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Task of the corresponding index."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Task getTaskAt(int index){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Removes a task from the list using its reference"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param task Task to be removed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when writing to file fails."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void removeFromList(Task task) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        boolean isRemoved \u003d this.taskList.remove(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (isRemoved) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.storage.overwriteStorage(taskList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Sets task at specified index to done"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param index Index of task to be set as done"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @throws IOException Thrown when writing to file fails."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public void setDoneInList(int index) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.taskList.get(index - 1).setDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.storage.overwriteStorage(taskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the number of tasks in current list"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Number of tasks in current list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    int getNumTasks(){"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the position of the specified task in current list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Position of the specified task in current list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public int getTaskID(Task task) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return taskList.indexOf(task) + 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a list of tasks containing the specific keyword"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return List of tasks containing the specific keyword"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public List\u003cTask\u003e findTasks(String word) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        ArrayList\u003cTask\u003e lst\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Task task: taskList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            if (task.getDescription().contains(word)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                lst.add(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return lst;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 139
    }
  },
  {
    "path": "src/main/java/duke/core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents the user interface of the application. Provides methods for reading input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * and printing output to the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Checks if there are inputs to be read"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return True if there are inputs, false otherwise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean hasInputs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return sc.hasNextLine();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Reads from standard input and returns it."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String which consists of user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints the welcome message of the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Welcome message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printWelcomeMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        List\u003cString\u003e start \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        start.add(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        start.add(\"What can I do for you?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.printInput(start);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints a message when a task is added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param task Task that was added."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList Task list where the Task is stored."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printAddMessage(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder, \"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder, task.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\", taskList.getNumTasks()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints out the message when a task is deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param task Task that was deleted."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList Task list that the Task was removed from."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printDeletion(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder, \"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder, task.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                String.format(\"Now you have %d tasks in the list.\", taskList.getNumTasks()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints a list of string in the correct format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param start List of Strings which needs to be printed sequentially"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printInput(List\u003cString\u003e start) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (String input : start) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            appendWithNewline(builder, input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints a single line of input in the correct format"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param input String to be printed"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printOneLine(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder, input);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints the list of tasks."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param taskList List of tasks stored in the application"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printNumberList(TaskList taskList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        appendWithNewline(builder, \"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.getNumTasks(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            appendWithNewline(builder,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    String.format(\"%d.%s\", i + 1, taskList.getTaskAt(i + 1)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints the list of tasks."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param lst List of tasks with matching keyword"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printFindResults(List\u003cTask\u003e lst) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        builder.append(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 0; i \u003c lst.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            appendWithNewline(builder,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    String.format(\"%d.%s\", i + 1, lst.get(i)));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints the exit message."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printByeMessage() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.printOneLine(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints out the exception."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param e Exception object whose message is to be printed out"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printErrorMessage(Exception e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.printOneLine(e.getMessage());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    //helper method to attach a newline after adding a message to the same StringBuilder"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private void appendWithNewline(StringBuilder builder, String msg) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        builder.append(msg);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Prints out a mini user manual to help the user"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String message to be printed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String printHelpMessage() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return printInput(List.of("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"List of commands with format:\","
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     todo TASK_DESCRIPTION : Adds a todo task to list\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     deadline TASK_DESCRIPTION /by dd/mm/yyyy hhmm : Adds a deadline to list \" +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        \" with a recognisable datetime format\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     event TASK_DESCRIPTION /at dd/mm/yyyy hhmm : Adds a deadline to list\" +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                        \" with a recognisable datetime format\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     deadline TASK_DESCRIPTION /by DUE_DATE : To add deadline to list with any due date format\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     event TASK_DESCRIPTION /at DUE_DATE : To add event to list with any due date format\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     e.g. todo report\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     e.g. deadline report /by 12/12/1212 2312\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     e.g. event meetup /at 12/12/1212 2312\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     e.g. deadline report /by Monday\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     e.g. event meetup /at Monday\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     find KEYWORD : Find tasks with the word in the description/name\","
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     done [TASK_NUMBER] : Checks task at a particular index as done\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     delete [TASK_NUMBER] : Deletes task at a particular index\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     list : Shows all undeleted tasks\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     bye : Exit the program\","
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \"     Note: bracketed inputs like [TASK_NUMBER] denote that only integer inputs are accepted\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 225
    }
  },
  {
    "path": "src/main/java/duke/errors/DukeAssertions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents an helper class to assert null checks for any number of objects"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class DukeAssertions {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Asserts that each object of any given number is not null"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static void assertNotNull(Object ... items) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (Object item : items) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assert item !\u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Asserts that each String of any given number is not null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static void assertArrayNotEmpty(String [] items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (String item : items) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assert item !\u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 25
    }
  },
  {
    "path": "src/main/java/duke/errors/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents an Exception class in Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private DukeExceptionType type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public DukeException(String error, DukeExceptionType type){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert type !\u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t * Specifies the message to be printed based on different Exception types"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t * @return String which is the message of the exception."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \tswitch (type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\tcase INVALID_COMMAND:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\t\treturn \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\tcase NOT_INTEGER:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\t\treturn \"Invalid input, must be an integer!!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\tcase MISSING_TASK:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\t\treturn \"No such task\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\tcase INVALID_DATE_TIME_FORMAT:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\t\treturn super.getMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            case FILE_NOT_FOUND:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                return \"File not found!!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\tcase TASK_NOT_FOUND:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\t\treturn \"Task not found!!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\tcase NOT_SINGLE_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\t\treturn \"Must be a single keyword\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\tcase TASK_ALREADY_DONE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\t\treturn \"Task already done!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t\t\treturn \"Unknown error! Please try again.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \t}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 44
    }
  },
  {
    "path": "src/main/java/duke/errors/DukeExceptionType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.errors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents different Exception types"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public enum DukeExceptionType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    INVALID_COMMAND,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    NOT_INTEGER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    MISSING_TASK,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    TASK_NOT_FOUND,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    NOT_SINGLE_WORD,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    TASK_ALREADY_DONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    INVALID_DATE_TIME_FORMAT"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 15
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a deadline task in the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * A deadline provides the getter methods to its date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises an deadline task with the description and date and time of the deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param description Deadline description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param date Date description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Deadline(String description, String date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(description, TaskType.DEADLINE_TASK);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a string containing the date and time of a deadline task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String containing the date and time of a deadline task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns A string that includes the task type, description and date of the deadline task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String that includes the task type, description and date of the deadline task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return String.format(\"[D][%s] %s(by: %s)\", getStatusIcon(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                getDescription(), getDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 44
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents an event task in the application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * An event provides the getter methods to its date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises an deadline task with the description and date and time of the event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param description Event description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param date Date description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Event(String description, String date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(description, TaskType.EVENT_TASK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a string containing the date and time of a event task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String containing the date and time of a event task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert date !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns A string that includes the task type, description and date of the event task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String that includes the task type, description and date of the event task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return String.format(\"[E][%s] %s(at: %s)\", getStatusIcon(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                getDescription(), getDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 44
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeAssertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a task in the application. A task has two private fields, the description of the task and"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * the state of completion of the task. The type of task is package-private and taskList is a"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * class attribute. The Task class provides the getters to type, description, completion status,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * the task list as well as getting the icon (tick and cross, or 1 and 0)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * which corresponds to the isDone field. Task class also"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * supports a setDone method which sets isDone field  to true and a setTaskList method which sets"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * taskList field to the main task list of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises a Task that has a default isDone field of false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param type Type of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public Task(String description, TaskType type) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        DukeAssertions.assertNotNull(description, type);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the type of Task"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return TaskType"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public TaskType getType() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert type !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a tick or a cross depending on the field isDone."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Icon which shows a tick or a cross."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a 1 or 0 depending on the field isDone, used for Storage purposes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String number which is 1 or 0."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getStorageStatusIcon() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String that represents the description of the task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert description !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns a string that includes the status icon and the description of the task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String with status icon and description of task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the type of Task"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Completion status of the task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Sets the boolean isDone to true and returns the  previous status of the task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Previous boolean value of isDone."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public boolean setDone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        if (!isDone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises a reference to the task list of the application in the Task class"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static void setTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        Task.taskList \u003d taskList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns the position of the specified task in current list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return Position of the specified task in current list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static int getTaskID(Task task) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return Task.taskList.getTaskID(task);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 128
    }
  },
  {
    "path": "src/main/java/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents different task types"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    EVENT_TASK,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    TODO_TASK,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    DEADLINE_TASK"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 11
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.lang.StringBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Represents a Todo task in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * A Todo provides a factory method to create itself."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Initialises a todo task with the description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param description ToDo description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        super(description, TaskType.TODO_TASK);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Creates a ToDo task from the parameters provided for a ToDo task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return A ToDo task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @param tokens User input split by space"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public static ToDo createToDo(String [] tokens) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        for (int i \u003d 1; i \u003c tokens.length - 1 ; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            builder.append(tokens[i]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            builder.append(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        builder.append(tokens[tokens.length-1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return new ToDo(builder.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Returns A string that includes the type task and the toString of Task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * @return String that adds the type of the task to the toString method of Task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 49
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "         maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "         prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "               text\u003d\"Label \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "               textFill\u003d\"#f5f5f5\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "               wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cFont name\u003d\"Arial Black\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   fitHeight\u003d\"80.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   fitWidth\u003d\"80.0\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   pickOnBounds\u003d\"true\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003cclip\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cCircle centerX\u003d\"40.0\" centerY\u003d\"40.0\" radius\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/clip\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 45
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            prefHeight\u003d\"730.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            prefWidth\u003d\"900.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   minWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   prefHeight\u003d\"50.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   prefWidth\u003d\"814.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   AnchorPane.leftAnchor\u003d\"1.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                   AnchorPane.rightAnchor\u003d\"85.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                layoutX\u003d\"814.0\" layoutY\u003d\"617.8\" maxHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                prefHeight\u003d\"55.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                prefWidth\u003d\"88.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                style\u003d\"-fx-border-color: #a52a2a; -fx-background-color: #00ff00;\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                text\u003d\"Send\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                AnchorPane.bottomAnchor\u003d\"-3.0\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                AnchorPane.rightAnchor\u003d\"-2.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    fitToHeight\u003d\"true\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    fitToWidth\u003d\"true\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    minViewportHeight\u003d\"900.0\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    minViewportWidth\u003d\"900.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    prefViewportHeight\u003d\"900.0\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    prefViewportWidth\u003d\"900.0\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    vvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    AnchorPane.bottomAnchor\u003d\"52.0\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                      maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                      prefHeight\u003d\"524.0\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                      prefWidth\u003d\"898.0\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 72
    }
  },
  {
    "path": "src/test/java/duke/core/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.NullCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.AddToDoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.AddEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " * Class to test certain functionality of the Parser class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Test that the parseDateTime method can convert into"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * formatted date and time when a valid input is given"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseDateTime_validInput_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertEquals(\"2nd of DECEMBER 1212, 12pm\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    Parser.parseDateTime(\"02/12/1212 1200\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertEquals(\"12th of DECEMBER 1212, 12:13am\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    Parser.parseDateTime(\"12/12/1212 0013\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertEquals(\"23rd of FEBRUARY 2019, 11:12pm\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "                    Parser.parseDateTime(\"23/02/2019 2312\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fail(\"Should not have thrown exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Test that the parseDateTime method throws an exception"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * when it tries to parse and format an invalid input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseDateTime_invalidInput_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"1212\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/12/1212\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12pm\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"Hello\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Test that the parseDateTime method throws an exception when the input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * is potentially valid but cannot be formatted to the expected format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseDateTime_validLookingInvalidNumbers_exceptionThrown() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"0/12/1212 1212\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"-1/12/1212 1212\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"/12/1212 1212\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"99/12/1212 1212\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/13/1212 1212\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/12/999 1212\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/12/0 1212\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseDateTime(\"12/12/0 00\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Test that the parseCommand method throws the expected Exceptions when the it tries to parse a input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * as a command, but the required arguments are not provided"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseCommand_missingParameter_exceptionThrown() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"todo \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"deadline \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"deadline task\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseCommand(\"deadline /by time\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"event \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"event task \"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e Parser.parseCommand(\"event /at time\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"event task /at \"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"done \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Parser.parseCommand(\"delete \"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Test that the parseCommand method properly still return an valid AddCommand"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * even when the deadline is not in recognisable dateTime format"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseCommand_nonParseableTimeForDeadlineOrEvent_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertTrue(Parser.parseCommand(\"deadline task /by time\") instanceof AddDeadlineCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertTrue(Parser.parseCommand(\"event task /at time\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fail(\"Should return without formatting the time parameter into dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * Test that the parseCommand method ignores extra input when attempting to parse commands"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     * which do not require arguments."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    void parseCommand_extraArgumentForNoArgumentCommands_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertTrue(Parser.parseCommand(\"list 1\") instanceof ListCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertTrue(Parser.parseCommand(\"bye 1\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertTrue(Parser.parseCommand(\"list a\") instanceof ListCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            assertTrue(Parser.parseCommand(\"bye a\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "            fail(\"Should return a command ignoring the extra arguments\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 127
    }
  },
  {
    "path": "src/test/java/duke/core/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.errors.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 24
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "       mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `./gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "│     └─seedu/duke/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 1,
      "-": 169
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we will be creating a GUI for Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Mockup for Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "![Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 1,
      "-": 158
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qweiping31415"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "qweiping31415": 1,
      "-": 243
    }
  }
]
