[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "test {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "run{"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 32,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "# FishSeller User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "### List"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "View all tasks"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "### `list` - displays all tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "### Sort"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "Sort tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "### `sort` - sorts all tasks based on argument"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "`sort date`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "`sort name`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lumwb": 19,
      "-": 12
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "lumwb": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the addition of tasks. Could be one of 3 types of tasks: todo, deadline, event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate String commandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor of AddCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param command the command input. Used to distinguish the type of task to create and add"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param inFullCommandScanner scanner to read the rest of the user\u0027s input including the taskDescription and other"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t *                             details"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic AddCommand(String command, Scanner inFullCommandScanner) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(inFullCommandScanner);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.commandType \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Execute the saving of tasks into TaskList and printing out a confirmation or error message through Ui object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks the user has input in memory"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the UI object used to interact with the user be it reading input or displaying messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the storage object to read and write to the archival file. Not used in this method"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException throws Exception for invalid formatting of user commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (!inFullCommandScanner.hasNext()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tif (commandType.equals(\"todo\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tString taskDescription \u003d inFullCommandScanner.nextLine().trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tassert !taskDescription.isEmpty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tTask addedTodo \u003d tasks.addTask(new ToDo(taskDescription));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tui.alertLatestTaskAdded(addedTodo, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else if (commandType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tStringBuilder deadLineTaskName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tStringBuilder deadLineTaskDateTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tString currentWord;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tBoolean reachedDateTimePortion \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\twhile (inFullCommandScanner.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tcurrentWord \u003d inFullCommandScanner.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tif (currentWord.equals(\"/by\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\t//set switch to true but do not append"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\treachedDateTimePortion \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t} else if (reachedDateTimePortion \u003d\u003d false) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\tdeadLineTaskName.append(currentWord);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\tdeadLineTaskName.append(\" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\tdeadLineTaskDateTime.append(currentWord);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\tdeadLineTaskDateTime.append(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tif (!reachedDateTimePortion) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"/by keyword not found\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tif (deadLineTaskDateTime.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"no date provided\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tassert !(deadLineTaskName \u003d\u003d null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tassert !(deadLineTaskDateTime \u003d\u003d null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tDeadLine deadline \u003d new DeadLine(deadLineTaskName.toString().trim(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tLocalDateTime.parse(formatDateTimeString(deadLineTaskDateTime.toString().trim()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\tdateTimeFormatter));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tTask addedDeadline \u003d tasks.addTask(deadline);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tui.alertLatestTaskAdded(addedDeadline, tasks);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else if (commandType.equals(\"event\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tStringBuilder eventName \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tStringBuilder eventDateTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tString currentWord;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tBoolean reachedDateTimePortion \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\twhile (inFullCommandScanner.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tcurrentWord \u003d inFullCommandScanner.next();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tif (currentWord.equals(\"/at\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\t//set switch to true but do not append"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\treachedDateTimePortion \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t} else if (reachedDateTimePortion \u003d\u003d false) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\teventName.append(currentWord);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\teventName.append(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t} else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\teventDateTime.append(currentWord);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t\teventDateTime.append(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\t}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tif (!reachedDateTimePortion) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"/at keyword not found\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tif (eventDateTime.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tthrow new DukeException(\"no date provided\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tassert !(eventName \u003d\u003d null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tassert !(eventDateTime \u003d\u003d null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tEvent event \u003d new Event(eventName.toString().trim(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tLocalDateTime.parse(formatDateTimeString(eventDateTime.toString().trim()), dateTimeFormatter));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tTask eventAdded \u003d tasks.addTask(event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tui.alertLatestTaskAdded(eventAdded, tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tthrow new DukeException(\"task type not found\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static String formatDateTimeString(String eventString) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tStringBuilder formattedDateTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tString[] splitDateAndTime \u003d eventString.split(\" \");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tString date \u003d splitDateAndTime[0];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tString time \u003d splitDateAndTime[1];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tString[] splitDate \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(String.format(\"%02d\", Integer.parseInt(splitDate[0])));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(\"/\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(String.format(\"%02d\", Integer.parseInt(splitDate[1])));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(\"/\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(splitDate[2]);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(\" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tformattedDateTime.append(time);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn formattedDateTime.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (Exception ex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(\"the date time format entered is incorrect. \" +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\"Please enter again in the following format: dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 124
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the abstract parent class of all types of commands a user can input into the duke program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "abstract public class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprotected boolean isExit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprotected Scanner inFullCommandScanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprotected static final DateTimeFormatter dateTimeFormatter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Default constructor for command object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Command() {}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Overloaded constructor for command object for commands which require further details from user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param inFullCommandScanner Scanner object to iterate through the rest of the details the user has input into"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t *                             duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Command(Scanner inFullCommandScanner) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.inFullCommandScanner \u003d inFullCommandScanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * isExit represents if the duke program has been instructed by the user to shut down."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return returns the isExit attribute of the command object, only the Exit command alters this attribute"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this.isExit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * the core method for all commands, effects the needed changes in TaskList, Ui and Storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks added in memory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the interaction between duke and the user"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the reading and writing to the archival file"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tabstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 43
    }
  },
  {
    "path": "src/main/java/DeadLine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents one of 3 types of tasks. Has a LocalDateTime attribute to represent the dateTime at which the task should"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * \t\t\tbe completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DeadLine extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate String endDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate LocalDateTime deadlineDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static DateTimeFormatter dateTimeFormatter"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor for the deadline object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskName name of the deadline task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param deadlineDate LocalDateTime of when the deadline is due by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic DeadLine (String taskName, LocalDateTime deadlineDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(taskName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.deadlineDate \u003d deadlineDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this.deadlineDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Formats the deadline object in a more readable form for informing the user about the task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string representation of the deadline object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn \"[D]\" + super.toString() + \" (by: \" + deadlineDate.format(dateTimeFormatter) + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Formats the deadline object to be archived. Format is crucial for reading the task from the archival file later"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * \t\ton."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string representation of the deadline object for archival purposes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getArchivalText() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn (\"D\" + \" | \" + super.getDoneStatusAsInt() + \" | \"  + super.getTaskName()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t+ \" | \" + deadlineDate.format(dateTimeFormatter));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 46
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the delete task functionality of duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor of Delete Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param inFullCommandScanner scanner to scan the user\u0027s desired task index to delete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic DeleteCommand(Scanner inFullCommandScanner) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(inFullCommandScanner);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Executes the delete command to remove the task from taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks added in memory"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the interaction between duke and the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the reading and writing to the archival file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (!inFullCommandScanner.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(\"no number provided\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tInteger taskToDeleteIndex \u003d Integer.parseInt(inFullCommandScanner.next());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassert (taskToDeleteIndex !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassert (taskToDeleteIndex !\u003d 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tTask taskToBeDeleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttaskToBeDeleted \u003d tasks.removeTask(taskToDeleteIndex - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tStringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\toutput.append(\"Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\toutput.append(\"    \" + taskToBeDeleted + \"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\toutput.append(String.format(\"Now you have %d tasks in the list.\", tasks.getTaskListSize()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.displayLine(output.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 42
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdisplayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tCollections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tgetChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsetAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tvar db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdb.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 59
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents duke\u0027s functionality of marking a task as completed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor of done command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param inFullCommandScanner scanner used to read the index of the task which the user wishes to mark as done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic DoneCommand(Scanner inFullCommandScanner) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(inFullCommandScanner);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Marks the task specified as completed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks added in memory"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the interaction between duke and the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the reading and writing to the archival file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t//read which task to complete and set as complete"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tInteger taskNumber \u003d Integer.parseInt(inFullCommandScanner.nextLine().trim()) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassert(taskNumber !\u003d null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassert(taskNumber !\u003d 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tTask task \u003d tasks.markCompleted(taskNumber);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tStringBuilder sb \u003d new StringBuilder(\"Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsb.append(\"    \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsb.append(task.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tui.displayLine(sb.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 32
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the main class of Duke program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static final String taskListArchivalPath \u003d \"/Users/lumweiboon/Duke/src/main/java/data/duke.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Ui ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate ScrollPane scrollPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate VBox dialogContainer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate TextField userInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Button sendButton;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Scene scene;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/fishSeller.jpg\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void start(Stage stage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t//Step 1. Setting up required components"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t//The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tuserInput \u003d new TextField();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tAnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tmainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstage.setScene(scene);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstage.show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstage.setResizable(false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tmainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t// You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tuserInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tAnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tAnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tAnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tAnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tAnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tdialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tuserInput.clear();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t});"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tuserInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tdialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tuserInput.clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t});"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t//Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\thandleUserInput();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t});"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tuserInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\thandleUserInput();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t});"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Iteration 1:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param text String containing text to add"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t// You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tLabel textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttextToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn textToAdd;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Iteration 2:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate void handleUserInput() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tLabel userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tLabel dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tDialogBox.getUserDialog(userText.getText(), new ImageView(user).getImage()),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tDialogBox.getDukeDialog(dukeText.getText(), new ImageView(duke).getImage())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tuserInput.clear();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Replace this stub with your completed method."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getResponse(String input) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t// need to return string here from UI"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tCommand c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tc.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (DukeException ex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn ui.getOutput();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor of Duke class. Initializes Storage, Ui and TaskList."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Duke() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tui \u003d new Ui();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstorage \u003d new Storage(taskListArchivalPath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (DukeException ex) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.showLoadingErrors(ex);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttasks \u003d new TaskList();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Starts the Duke program."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void run() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tui.showWelcome();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tboolean isExit \u003d false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\twhile (!isExit) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttry {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tString fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tui.showBreakLine();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tCommand c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tc.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tisExit \u003d c.isExit();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} catch (DukeException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tui.showError(e.getMessage());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} finally {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tui.showBreakLine();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * This is the main method of the program simply calls the run method of Duke"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param args"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tnew Duke().run();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lumwb": 196,
      "-": 1
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic DukeException(String exceptionMessage) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(exceptionMessage);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a event which is one of 3 types of tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate LocalDateTime eventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static DateTimeFormatter dateTimeFormatter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor of event object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskName the event name of the task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param eventDate the DateTime in which the event is going to happen"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Event(String taskName, LocalDateTime eventDate) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(taskName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Converts the event object into a nice string representation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string representation of the event object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn \"[E]\" + super.toString() + \" (at: \" + eventDate.format(dateTimeFormatter) + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Converts the event object into a specific string presentation for archival purposes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string presentation of the event object in the archival format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getArchivalText() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn (\"E\" + \" | \" + super.getDoneStatusAsInt() + \" | \"  + super.getTaskName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t+ \" | \" + eventDate.format(dateTimeFormatter));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this.eventDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 44
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the command to exit the Duke program"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Just a default constructor for the Exit Command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic ExitCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Executes the exit command, which does 2 things: save all tasks into storage and displays the exit messsage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * \t\tthrough the UI object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks added in memory"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the interaction between duke and the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the reading and writing to the archival file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper.isExit \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tstorage.saveTasks(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tui.showExitMessage();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 24
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic FindCommand(Scanner inFullCommandScanner) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(inFullCommandScanner);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString searchKeyword \u003d inFullCommandScanner.nextLine();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tTaskList tasksFound \u003d tasks.findByKeyword(searchKeyword);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (tasksFound \u003d\u003d null) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.displayLine(\"apologies there were no tasks found with the keyword: \" + searchKeyword);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tStringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\toutput.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\toutput.append(tasksFound);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.displayLine(output.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 21
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tApplication.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 10
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the command to list all tasks in memory and their respective details"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * just a default constructor for the list command object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic ListCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * simply converts the tasks in TaskList to string and displays them to the user through the UI object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks added in memory"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the interaction between duke and the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the reading and writing to the archival file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tui.displayLine(tasks.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 21
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tFXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tAnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tScene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tstage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tstage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\te.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tduke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tdialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tDialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tDialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tuserInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 49
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the parsing of user commands into actual command objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * \t\tBasically a switch for deciding which commands to execute based on the input"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Parser() { }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * parse takes in the user\u0027s input as a fullCommand and decideds which command object to initialize based on the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * \t\tfirst word of the fullCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param fullCommand the entire command the user has input into the duke program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return returns the corresponding command with the user\u0027s input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException throws exception if the command is not found."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tScanner inFullCommandScanner \u003d new Scanner(fullCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString command \u003d inFullCommandScanner.next();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (command.equals(\"todo\") || command.equals(\"deadline\") || command.equals(\"event\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new AddCommand(command, inFullCommandScanner);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (command.equals(\"list\")){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new ListCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (command.equals(\"delete\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new DeleteCommand(inFullCommandScanner);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (command.equals(\"done\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new DoneCommand(inFullCommandScanner);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (command.equals(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new FindCommand(inFullCommandScanner);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (command.equals(\"sort\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn new SortCommand(inFullCommandScanner);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(\"command not found\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 38
    }
  },
  {
    "path": "src/main/java/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the sort task functionality of duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor of Sort Command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param inFullCommandScanner scanner to scan the user\u0027s desired task index to delete"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic SortCommand(Scanner inFullCommandScanner) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(inFullCommandScanner);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Executes the delete command to remove the task from taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks represents all the tasks added in memory"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ui represents the interaction between duke and the user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param storage represents the reading and writing to the archival file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (!inFullCommandScanner.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(\"no sort type provided\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString sortType \u003d inFullCommandScanner.next();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassert (sortType !\u003d null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassert (!sortType.isEmpty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (sortType.equals(\"date\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttasks.sortByDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.displayLine(\"successfully sorted task list by date\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else if (sortType.equals(\"name\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttasks.sortByName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tui.displayLine(\"successfully sorted task list by name\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrow new DukeException(\"sort type not found\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 40
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the reading and writing of tasks from a specified file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate File file;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static final DateTimeFormatter dateTimeFormatter"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor for Storage object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param filePath the path of the archival file as a string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * load, represents the reading of tasks from the archival file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return returns an arraylist of tasks that were archived from previous usage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException throws DukeException for reading and formatting errors of the archival file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn readAndUpdateArchivalList(output, file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * saveTasks takes a TaskList object and saves all tasks contained in according to the specified format in each"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Task object. This formatting aids in the reading of tasks in the Load method as well."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param tasks"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void saveTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tFileWriter fileWriter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfileWriter \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfor (Task task : tasks.getTaskArrayList()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tfileWriter.write(task.getArchivalText() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfileWriter.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (IOException ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tSystem.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * readAndUpdateArchivalList reads from the file and appends each task into the taskArrayList specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskArrayList the arrayList of tasks to append to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param file the archival file of tasks"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return the same taskArrayList passed into its argument"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException wraps FileNotFoundException and throws it upwards"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static ArrayList\u003cTask\u003e readAndUpdateArchivalList(ArrayList\u003cTask\u003e taskArrayList, File file)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrows DukeException{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tScanner fileScanner;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tfileScanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\twhile(fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treadAndAddArchivalTask(fileScanner.nextLine(), taskArrayList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tSystem.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn taskArrayList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * readAndAddArchivalEvent reads a string representation of a Task and adds it to a specified list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskString the string representation of task. has to be in a specified format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskArrayList the arraylist to add the tasks to."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException throws exception upwards that may derive from decryptTaskString"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static void readAndAddArchivalTask(String taskString, ArrayList\u003cTask\u003e taskArrayList)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tthrows DukeException{"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tTask taskToBeAdded \u003d decryptTaskString(taskString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttaskArrayList.add(taskToBeAdded);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * converts a taskString into a task object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskString the string representation of a task in the archival file"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a task object converted from the taskString"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @throws DukeException throws exception if the format of taskString is not recognised / expected"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static Task decryptTaskString(String taskString) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString[] taskDetails \u003d taskString.split(\" \\\\| \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tTask taskToReturn;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tBoolean isCompleted \u003d taskDetails[1].equals(\"1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tswitch(taskType) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tcase \"T\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\ttaskToReturn \u003d new ToDo(taskDetails[2].trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tupdateTaskCompletionStatus(isCompleted, taskToReturn);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn taskToReturn;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tcase \"E\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\ttaskToReturn \u003d new Event(taskDetails[2].trim(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tLocalDateTime.parse(taskDetails[3].trim(), dateTimeFormatter));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tupdateTaskCompletionStatus(isCompleted, taskToReturn);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn taskToReturn;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tcase \"D\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\ttaskToReturn \u003d new DeadLine(taskDetails[2].trim(),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\tLocalDateTime.parse(taskDetails[3].trim(), dateTimeFormatter));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tupdateTaskCompletionStatus(isCompleted, taskToReturn);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn taskToReturn;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tdefault:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\tthrow new DukeException(\"Event Type is not recognised\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Update the completion status based on the archival details. Used in decryptingTaskString when converting"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * a task string into task."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param status true for completed and false for not completed"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param task returns the same task passed into it after setting its completion status correspondingly"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate static void updateTaskCompletionStatus(boolean status, Task task) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (status) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttask.markCompleted();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\ttask.markIncomplete();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 132
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a single task in the program. Specifically has 3 types of tasks that inherit from this class:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * \t\ttodo, deadline and event"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate boolean doneStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor for all task objects. Also initializes the doneStatus to false."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskName the name of the task object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Task(String taskName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.taskName \u003d taskName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.doneStatus \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * marks this task as completed by setting the doneStatus to true."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void markCompleted() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.doneStatus \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * marks this task as incomplete by setting the doneStatus to false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void markIncomplete() { this.doneStatus \u003d false;}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Converts the task object to include the completion status. Adds a nice tick and cross based on the doneStatus"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string representation of the task object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tStringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (doneStatus \u003d\u003d true) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tsb.append(\"[✓]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tsb.append(\"[✗]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsb.append(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsb.append(taskName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * get the name of the task object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return the task name of the object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getTaskName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this.taskName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * an abstract method to be implemented in child classes to convert the task into archival format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string represntation of the task for archival purposes"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic abstract String getArchivalText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * getDoneStatusAsInt converts the doneStatus from boolean to int. 1 for completed and 0 for incomplete. Used"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * \t\tin converting the object into archival format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getDoneStatusAsInt() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tif (doneStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn \"1\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\treturn \"0\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic abstract LocalDateTime getDateTime();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 77
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the collection of tasks in memory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate ArrayList\u003cTask\u003e taskArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * default constructor for taskList object, initializes a empty arraylist of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic TaskList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttaskArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * overloaded constructor for taskList object. Assigns a ArrayList as the taskArraylist"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskArrayList a arraylist of tasks to be used as the collection of tasks for duke"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic TaskList(ArrayList\u003cTask\u003e taskArrayList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.taskArrayList \u003d taskArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * adds a task into the taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param task the task to be added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return returns the same task object that was added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Task addTask(Task task) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttaskArrayList.add(task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn task;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * removes a task from the taskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param index the index of the task in the taskList. Note that the index starts from 1 for user ease."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return the task that was removed from the taskList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Task removeTask(int index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this.taskArrayList.remove(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * returns the tasks added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return an arraylist of all the tasks in the current program"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic ArrayList\u003cTask\u003e getTaskArrayList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this.taskArrayList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * mark a task within the taskList as completed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param index index of the task to be marked"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return the task object at specified index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Task markCompleted(Integer index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tTask task \u003d taskArrayList.get(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttask.markCompleted();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn task;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * get the number of tasks in memory"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a Integer representing the number of tasks in the program currently"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Integer getTaskListSize() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn taskArrayList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * converts the lists into a nice string representation of all the lists in the taskList object and also includes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * \t\ta numbering for each task from 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tStringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tfor (int i \u003d 0; i \u003c taskArrayList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\toutput.append(String.format(\"%d.%s\", i + 1, taskArrayList.get(i).toString()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tif (i !\u003d taskArrayList.size() - 1) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\toutput.append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn output.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic TaskList findByKeyword(String keyword) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tfor (Task task : this.taskArrayList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tif (task.getTaskName().contains(keyword)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\toutput.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn new TaskList(output);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tstatic class dateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tpublic int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tLocalDateTime task1DateTime \u003d task1.getDateTime();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tLocalDateTime task2DateTime \u003d task2.getDateTime();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tif (task1DateTime \u003d\u003d null \u0026\u0026 task2DateTime !\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else if (task2DateTime \u003d\u003d null \u0026\u0026 task1DateTime !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn -1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else if (task1DateTime \u003d\u003d null \u0026\u0026 task2DateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn task1DateTime.compareTo(task2DateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tstatic class nameComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tpublic int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tString task1Name \u003d task1.getTaskName();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tString task2Name \u003d task2.getTaskName();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tif (task1Name.isEmpty() \u0026\u0026 !task2Name.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else if (task2Name.isEmpty() \u0026\u0026 !task1Name.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn -1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else if (task1Name.isEmpty() \u0026\u0026 task2Name.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t} else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\treturn task1Name.compareTo(task2Name);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic TaskList sortByDate() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.taskArrayList.sort(new dateComparator());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic TaskList sortByName() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.taskArrayList.sort(new nameComparator());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 139
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the ToDo task which is one of the 3 types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Constructor for ToDo object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskName the name of the todo task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic ToDo(String taskName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tsuper(taskName);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * converts the ToDo object into a nice string representation for displaying to the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string representation of the todo object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * converts the ToDo object into a string representation in the archival form"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return a string represnetation of the todo object in archival form"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getArchivalText() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn (\"T\" + \" | \" + super.getDoneStatusAsInt() + \" | \"  + super.getTaskName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 36
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents the interaction between Duke and the User. Both in reading the input and displaying messages / errors"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * \t\tof the program"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate Scanner scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate StringBuilder outputHolder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Default constructor for UI, initializes a scanner object to read user inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic Ui() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tscanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\toutputHolder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * show errors from attempting to load tasks from the archival file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param ex exception thrown from loading tasks from the archival file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void showLoadingErrors(Exception ex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(ex.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * show the welcome message to the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void showWelcome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(\"Welcome to Duke. What can I do for you today?\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * Displays messages to the user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param toShow the string to be displayed to the user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void displayLine(String toShow) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(toShow);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * simply display a break line to organise the outputs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void showBreakLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(\"------------------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * readCommand takes in the entire line of user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return the fullCommand input by the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String readCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn scanner.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * show the exit message for duke. This method is run when the user closes the program through the bye command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void showExitMessage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * display the error messsages thrown from the duke program"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param errorMessage a string representation of the error thrown from Duke"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void showError(String errorMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(errorMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * displays to the user that the task was succesfully added to the taskList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param task the task that was added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @param taskList the taskList representing all tasks added. Required to calculate the total number of tasks in"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t *                 memory"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void alertLatestTaskAdded(Task task, TaskList taskList) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(\"Got it. I\u0027ve added this task: \\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(task + \"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder.append(String.format(\"Now you have %d tasks in the list.\\n\", taskList.getTaskListSize()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * getOutput returns the required output to the user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * @return string representation of the output required"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic String getOutput() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString output \u003d  this.outputHolder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tresetUI();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\treturn output;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t/**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t * sets the UI back to default state, awaiting for user input"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tprivate void resetUI() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tthis.outputHolder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 100
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "lumwb": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\t\u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\t\u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lumwb": 19
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Test()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void invalidCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tString input \u003d \"a invalid command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tThrowable e \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\ttry {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\tParser.parse(input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t} catch (Throwable ex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t\te \u003d ex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\t}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassertTrue(e instanceof DukeException);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 18
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\tpublic void emptySizdList() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t\tassertEquals(new TaskList().getTaskListSize(), 0);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "\t}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 10
    }
  }
]
