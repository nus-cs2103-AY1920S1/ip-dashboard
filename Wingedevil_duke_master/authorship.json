[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    Deadline(String name, String date){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return \"[D][\" + getState() + \"] \" + getName() + \" (by: \" + date + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 13
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    // printing constants"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static final String INDENT \u003d \"    \";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    // main loop behavior constants"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static final int CONTINUE \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private static final int EXIT \u003d 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    // class members"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    // iostreams"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private InputStream inStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private BufferedReader in;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private OutputStream outStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private Writer out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    // data members"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private List\u003cTask\u003e todoList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        new Duke(System.in, System.out).run();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public Duke(InputStream inStream, OutputStream outStream){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.inStream \u003d inStream;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.in \u003d new BufferedReader(new InputStreamReader(inStream));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.outStream \u003d outStream;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.out \u003d new PrintWriter(outStream);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public int run(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            greet();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            mainLoop();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            System.out.println(\"Stream supplied to Duke is not a valid stream\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void bye() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s Bye. Hope to see you again soon!\\n\", INDENT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.flush();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void mainLoop() throws IOException{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        while(processInput() \u003d\u003d CONTINUE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private int processInput() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String command \u003d in.readLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    bye();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    return EXIT;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    listList(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    // regex matching for more complex commands"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    // check if it is `done` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    if (command.matches(\"(done )[\\\\d]{1,9}\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        done(command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        // verify command is correct for todo/deadline/event"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    } else if (command.matches(\"(delete )[\\\\d]{1,9}\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        delete(command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        // verify command is correct for todo/deadline/event"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    } else if (command.matches(\"(todo).*\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        addToList(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    } else if (command.matches(\"(deadline).*\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        addToList(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    } else if (command.matches(\"(event).*\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        addToList(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                        throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s %s\\n\", INDENT, e.getMessage()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.flush();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return CONTINUE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void delete(String command) throws IOException, DukeException{"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        Scanner sc \u003d new Scanner(command).useDelimiter(\"[\\\\D]+\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        int thingToDo \u003d sc.nextInt(); // one indexed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        Task removedTask;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            removedTask \u003d todoList.remove(thingToDo - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s Noted. I\u0027ve removed this task: \\n\", INDENT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s   %s\\n\", INDENT, removedTask));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s  Now you have %d tasks in the list.\\n\", INDENT, todoList.size()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.flush();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(String.format(\"\\u2639 OOPS!!! There is no task %d.\", thingToDo));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void done(String command) throws IOException, DukeException{"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        Scanner sc \u003d new Scanner(command).useDelimiter(\"[\\\\D]+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        int thingToDo \u003d sc.nextInt(); // one indexed"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            todoList.get(thingToDo - 1).setState(Task.DONE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } catch (IndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(String.format(\" OOPS!!! There is no task %d.\", thingToDo));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s Nice! I\u0027ve marked this task as done: \\n\", INDENT));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s   %s\\n\", INDENT, todoList.get(thingToDo - 1)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.flush();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void listList(String command) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        for(Task item: todoList){"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s %d.%s\\n\", INDENT, counter++, item));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (counter \u003d\u003d 1){"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            out.write(String.format(\"%s Such empty, much wow\\n\", INDENT));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.flush();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void addToList(String command) throws IOException, DukeException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if (command.matches(\"(.*(?\u003c\u003d\\\\s)(/at|/by)(?\u003e\\\\s|$|\\\\z).*){2,}\")){"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! There are too many flags in the Task.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        Scanner sc \u003d new Scanner(command).useDelimiter(\"((?\u003c\u003dtodo)|(?\u003c\u003ddeadline)|(?\u003c\u003devent)|(?\u003c\u003d\\\\s)/at|(?\u003c\u003d\\\\s)/by)(?\u003e[\\\\s$])\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        String typeOfTask \u003d sc.next();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        switch (typeOfTask) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    todoList.add(Task.parseTodo(sc.next().trim()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                } catch (NoSuchElementException e){"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                if(!command.matches(\"deadline.*/by.*\")){"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! A deadline must have a /by flag.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    todoList.add(Task.parseDeadline(sc.next().trim(), sc.next().trim()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                } catch (NoSuchElementException e){"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! A deadline must have a description and a date.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                if(!command.matches(\"event.*/at.*\")){"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! An event must have a /at flag.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    todoList.add(Task.parseEvent(sc.next().trim(), sc.next().trim()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                } catch (NoSuchElementException e){"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                    throw new DukeException(\"\\u2639 OOPS!!! An event must have a description and a date.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s Got it. I\u0027ve added this task: \\n\", INDENT));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s   %s\\n\", INDENT, todoList.get(todoList.size() - 1)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s  Now you have %d tasks in the list.\\n\", INDENT, todoList.size()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.flush();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void echo(String command) throws IOException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, command));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.flush();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private void greet() throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s Hello! I\u0027m Duke\\n\", INDENT));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s What can I do for you?\\n\", INDENT));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.write(String.format(\"%s%s\\n\", INDENT, HORIZONTAL_LINE));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        out.flush();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "class DukeException extends Exception{"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    DukeException(String error){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "class DukeError extends Error{"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jeffry Lum"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jeffry Lum": 3,
      "Wingedevil": 205,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "public class Event extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    Event(String name, String date){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return \"[E][\" + getState() + \"] \" + getName() + \" (at: \" + date + \")\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 13
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "class Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    // state constants"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    static final char DONE \u003d \u0027\\u2713\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    static final char NOT_DONE \u003d \u0027\\u2717\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private char state; // dont use boolean"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    Task (String name){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.state \u003d NOT_DONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static Todo parseTodo(String name) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if(name.isEmpty()){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return new Todo(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static Deadline parseDeadline(String name, String date) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if(name.isEmpty()){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } else if(date.isEmpty()){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return new Deadline(name, date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public static Event parseEvent(String name, String date) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        if(name.isEmpty()){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        } else if(date.isEmpty()){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return new Event(name, date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public void setState(char state) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        this.state \u003d state;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public char getState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return \"[\" + state + \"] \" + name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 55
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "class Todo extends Task{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    Todo(String name) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "        return \"[T][\" + getState() + \"] \" + getName();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Wingedevil"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Wingedevil": 10
    }
  }
]
