[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "### What is Duke?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Duke is your friendly chatbot which helps to keep track of your daily tasks! It\u0027s a To-Do List where you can add and "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "modify your tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Add Task - Add new tasks into your list to keep track of them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Delete Task - Delete old tasks that you have completed or no longer have use for."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Modify Task - Update details of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Find Task - Filters the list of tasks based on a keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Complete Task - Marks the task as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. List Task - Lists the tasks you have."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "## List of commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `list` : Displays information about your tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Displays the entire list of your tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `list`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `list`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Here are the tasks in your list: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    1. [T][x] borrow book "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    2. [D][x] sing song (by: 2019-09-09 0900) "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `bye` : Quits Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Quits Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `bye`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `bye`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Bye! Hope to see you again soon!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `todo` : Adds a To-Do into your list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Adds a to-do task into your lists with the description of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `todo \u003cDescription\u003e`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `todo borrow book`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][x] borrow book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `deadline` : Adds a Deadline into your list. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Adds a Deadline into the list of tasks. Deadlines must have time of format of format `Year(yyyy)/Month(mm)/Date(dd) Hour(hh)Minute(mm)`, eg 2019-09-14 1800"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `deadline \u003cDescription\u003e /by \u003cTime\u003e`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `deadline sing song /by 2019-09-09 0900`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [D][x] deadline sing song (by: 2019-09-09 0900)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `event` : Adds an Event into your list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Adds a Event into the list of tasks. Events must have time of format of format `Year(yyyy)/Month(mm)/Date(dd) Hour(hh)Minute(mm)`, eg 2019-09-14 1800"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `event \u003cDescription\u003e /at \u003cTime\u003e`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `event sing song /at 2019-09-09 0900`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [E][x] event sing song (at: 2019-09-09 0900)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `find` : Obtains task with the keyword in it."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Filters the task list by the keyword to find the corresponding tasks with the keyword in it\u0027s description."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `find \u003cKeyword\u003e`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `find book`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    1. [E][x] book party (at: 2019-09-09 0900)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    2. [T][x] todo borrow book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `done` : Mark the task in the list as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Mark the task at `Number` in the list as done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `done \u003cNumber in the list\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `done 2`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][✓] todo borrow book"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `delete` : Deletes the task from the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Deletes the task at `Number` in the list from the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `delete \u003cNumber in the list\u003e`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `delete 2`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][✓] todo borrow book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `update` : Updates the task at `Number` in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Updates the Description or Time of the task at `Number`\u0027s in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `update \u003cNumber in the list\u003e descrip \u003cNew Description\u003e` : Updates the task at `Number`\u0027s Description."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format : `update \u003cNumber in the list\u003e time \u003cNew Time\u003e` : Updates the task at `Number`\u0027s Time."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `update 2 descrip sleep`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it. I\u0027ve updated this task:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][x] sleep"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Dandford": 127,
      "-": 9
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 38,
      "-": 14
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "[T]|false|shower plants at night"
      }
    ],
    "authorContributionMap": {
      "Dandford": 1
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "### What is Duke?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Duke is your friendly chatbot which helps to keep track of your daily tasks! It\u0027s a To-Do List where you can add and "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "modify your tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Add Task - Add new tasks into your list to keep track of them."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Delete Task - Delete old tasks that you have completed or no longer have use for."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Modify Task - Update details of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Find Task - Filters the list of tasks based on a keyword."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. Complete Task - Marks the task as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "1. List Task - Lists the tasks you have."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "## List of commands"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `list` : Displays information about your tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Displays the entire list of your tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `list`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `list`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Here are the tasks in your list: "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    1. [T][x] borrow book "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    2. [D][x] sing song (by: 2019-09-09 0900) "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `bye` : Quits Duke."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Quits Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `bye`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `bye`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Bye! Hope to see you again soon!"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `todo` : Adds a To-Do into your list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Adds a to-do task into your lists with the description of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `todo \u003cDescription\u003e`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `todo borrow book`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][x] borrow book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `deadline` : Adds a Deadline into your list. "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Adds a Deadline into the list of tasks. Deadlines must have time of format of format `Year(yyyy)/Month(mm)/Date(dd) Hour(hh)Minute(mm)`, eg 2019-09-14 1800"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `deadline \u003cDescription\u003e /by \u003cTime\u003e`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `deadline sing song /by 2019-09-09 0900`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [D][x] deadline sing song (by: 2019-09-09 0900)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `event` : Adds an Event into your list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Adds a Event into the list of tasks. Events must have time of format of format `Year(yyyy)/Month(mm)/Date(dd) Hour(hh)Minute(mm)`, eg 2019-09-14 1800"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `event \u003cDescription\u003e /at \u003cTime\u003e`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `event sing song /at 2019-09-09 0900`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it! I\u0027ve added this task:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [E][x] event sing song (at: 2019-09-09 0900)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `find` : Obtains task with the keyword in it."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Filters the task list by the keyword to find the corresponding tasks with the keyword in it\u0027s description."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `find \u003cKeyword\u003e`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `find book`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    1. [E][x] book party (at: 2019-09-09 0900)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    2. [T][x] todo borrow book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `done` : Mark the task in the list as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Mark the task at `Number` in the list as done."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `done \u003cNumber in the list\u003e`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `done 2`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][✓] todo borrow book"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `delete` : Deletes the task from the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Deletes the task at `Number` in the list from the list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `delete \u003cNumber in the list\u003e`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `delete 2`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][✓] todo borrow book"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dandford"
        },
        "content": "#### `update` : Updates the task at `Number` in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Updates the Description or Time of the task at `Number`\u0027s in the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format: `update \u003cNumber in the list\u003e descrip \u003cNew Description\u003e` : Updates the task at `Number`\u0027s Description."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Format : `update \u003cNumber in the list\u003e time \u003cNew Time\u003e` : Updates the task at `Number`\u0027s Time."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Example of usage: `update 2 descrip sleep`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Got it. I\u0027ve updated this task:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    [T][x] sleep"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Dandford"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Dandford"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Dandford": 124,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/Command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for AddCommand which inherits from Command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public AddCommand(String inputCommand) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads and creates new ToDo, Event or Deadline based on the parsed input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks Array of Tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui for printing output. q"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage to update textfile."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException for incorrect user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //note private can\u0027t be accessed by child"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] inputsplit \u003d this.inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String typeTask \u003d inputsplit[0].toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a \" + typeTask + \" cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task taskToAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] descripSplit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            LocalDateTime ldt;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            switch (typeTask) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskToAdd \u003d new ToDo(inputsplit[1]);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                descripSplit \u003d inputsplit[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ldt \u003d DateTimeHelper.formatInput(descripSplit[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskToAdd \u003d new Deadline(descripSplit[0], ldt);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                descripSplit \u003d inputsplit[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                ldt \u003d DateTimeHelper.formatInput(descripSplit[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskToAdd \u003d new Event(descripSplit[0], ldt);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! Please specify a valid type of task!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            tasks.addToRecord(taskToAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ui.printAdd(taskToAdd, tasks.getSize());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of tasks is not complete.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 70
    }
  },
  {
    "path": "src/main/java/duke/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected String inputCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected boolean shouldExit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Command which will be inherited by all other commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * shouldExit is the boolean that will stop the for loop and exit the program, by default is false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Command(String inputCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.inputCommand \u003d inputCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.shouldExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Checks if the for loop should continue."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return true which will stop the for loop and exit the program."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.shouldExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Executes the commands on Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 39
    }
  },
  {
    "path": "src/main/java/duke/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for DeleteCommand which inherits from Command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DeleteCommand(String inputCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Deletes the aforementioned task from TaskList based on the number parsed from inputcommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks Array of Tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui for printing output."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage to update textfile."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException for incorrect user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of delete must have a value.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(inputsplit[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (taskNumber \u003e tasks.getSize() || taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! Invalid value for task delete!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d tasks.removeTask(taskNumber);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ui.printDelete(t, tasks.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of delete must be a number.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 46
    }
  },
  {
    "path": "src/main/java/duke/Command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for DoneCommand which inherits from Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DoneCommand(String inputCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Marks as done the aforementioned task from TaskList based on the number parsed from inputcommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks Array of Tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui for printing output."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage to update textfile."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException for incorrect user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] inputsplit \u003d this.inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of done must have a value.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(inputsplit[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (taskNumber \u003e tasks.getSize() || taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! Invalid value for task done!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (tasks.getTask(taskNumber).getIsDone() \u003d\u003d true) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! Task is already done!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            t.markIsDone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ui.printDone(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of done must be a number.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 53
    }
  },
  {
    "path": "src/main/java/duke/Command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for ExitCommand which inherits from Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ExitCommand(String inputCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Assigns the boolean shouldExit as true, thus terminating the for loop and closing Duke."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks Array of Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui for printing output."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage to update textfile."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.shouldExit \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return ui.printBye();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 31
    }
  },
  {
    "path": "src/main/java/duke/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for FindCommand which inherits from Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public FindCommand(String inputCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads and filters tasks based on the keyword of parsed input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks Array of Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui for printing output."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage to update textfile."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException for incorrect user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d this.inputCommand.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (inputsplit.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of a find Command cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArrayList\u003cTask\u003e taskToFind \u003d tasks.findTask(inputsplit[1].trim());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return ui.printFind(taskToFind);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 39
    }
  },
  {
    "path": "src/main/java/duke/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for ListCommand which inherits from Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String that is parsed from the Parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ListCommand(String inputCommand) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints the list of tasks which is obtained from TaskList tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks TaskList passed from the Duke main class, containing Array of Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui passed from the Duke main class, responsible for printing output to the user and obtaining input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage passed from the Duke main class, responsible for updating duke.txt after every command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return ui.printRecord(tasks.getTaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 29
    }
  },
  {
    "path": "src/main/java/duke/Command/UpdateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Timeable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public UpdateCommand(String inputCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(inputCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads and updates description of time of ToDo, Event or Deadline based on the parsed input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param tasks Array of Tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param ui Ui for printing output."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param storage Storage to update textfile."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return feedback message to update user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException for incorrect user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String[] inputsplit \u003d this.inputCommand.split(\" \", 3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (inputsplit.length \u003c\u003d 2 || inputsplit[2].split(\" \").length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of update is not complete.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(inputsplit[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (taskNumber \u003e tasks.getSize() || taskNumber \u003c\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"OOPS!!! Invalid value for task update!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task taskToUpdate \u003d tasks.getTask(taskNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            updateTask(inputsplit[2], taskToUpdate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            storage.writeToFile(tasks.getTaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ui.printUpdate(taskToUpdate, tasks.getSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! The description of update must have a number for the task to update.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Updates description or time of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputTask Details of update."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskToUpdate Task to be updated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException for incorrect user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void updateTask(String inputTask, Task taskToUpdate) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] updateDetails \u003d inputTask.split(\" \",2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String updateType \u003d updateDetails[0].toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        switch (updateType) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"descrip\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToUpdate.updateDescrip(updateDetails[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (taskToUpdate.getType().equalsIgnoreCase(\"[T]\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                throw new DukeException(\"ToDos do not have time!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            LocalDateTime ldt \u003d DateTimeHelper.formatInput(updateDetails[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ((Timeable) taskToUpdate).updateTime(ldt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! Please specify if you want to modify the description or time\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 74
    }
  },
  {
    "path": "src/main/java/duke/Core/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.UpdateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads and Understands the user\u0027s input command from class Ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputCommand String which is the user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return Command any of the commands based on the first word of the user input parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException if the user input is not one of the predefined inputs."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static Command parse(String inputCommand) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d inputCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String parsedString \u003d inputsplit[0].toLowerCase();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        switch (parsedString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"list\" :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new ListCommand(inputCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"done\" :"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new DoneCommand(inputCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"todo\" :"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new AddCommand(inputCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new DeleteCommand(inputCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new FindCommand(inputCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new UpdateCommand(inputCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return new ExitCommand(inputCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 46
    }
  },
  {
    "path": "src/main/java/duke/Core/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Timeable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //stores information of the data in the duke.txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String fileName \u003d \"../duke/data/duke.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    final String direcName \u003d \"../duke/data\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Writes the updated contents from TaskList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * First checks if the file or directory exists, if it doesn\u0027t create a new empty file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by Command and it\u0027s child classes each time Command.execute is run."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskEntered ArrayList of Tasks obtained from the TaskList class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which occurs if there is problem in loading the duke.txt."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e taskEntered) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File taskStorage \u003d new File(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File directoryStorage \u003d new File(direcName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!taskStorage.getAbsoluteFile().exists()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                directoryStorage.mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskStorage.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FileWriter taskWrite \u003d new FileWriter(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String s \u003d writeFromArray(taskEntered);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskWrite.write(s);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskWrite.close();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! Error occured when loading file.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Uses StringBuffer to append string of tasks obtained from taskEntered into format required to put into duke.txt."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by writeToFile, which is called each time Command.execute is run."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskEntered ArrayList of Tasks obtained from the TaskList class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String writeFromArray(ArrayList\u003cTask\u003e taskEntered) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        StringBuffer toWrite \u003d new StringBuffer(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c taskEntered.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d taskEntered.get(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String appendedString \u003d t.getType() + \"|\" + t.getIsDone() + \"|\" + t.getDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (t instanceof Timeable) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                appendedString \u003d appendedString + \"|\" + ((Timeable) t).getTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            appendedString \u003d appendedString + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            toWrite.append(appendedString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toWrite.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads \u0026 Understands the string from duke.txt and creates a arraylist of tasks based on the strings in duke.txt."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * First checks if the file or directory exists, if it doesn\u0027t create a new empty file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * public method called by duke when it first starts up."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return ArrayList of Tasks which will be assigned to TaskList class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which occurs if there is problem in loading the duke.txt."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ArrayList\u003cTask\u003e outputFileContents() throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File taskStorage \u003d new File(fileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            File directoryStorage \u003d new File(direcName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            //checks if the file exists"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (!taskStorage.getAbsoluteFile().exists()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                directoryStorage.mkdir();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                taskStorage.createNewFile();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Scanner s \u003d new Scanner(taskStorage); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ArrayList\u003cTask\u003e retrievedTask \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                Task taskToAdd \u003d this.outputTaskDetails(s.nextLine());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                retrievedTask.add(taskToAdd);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return retrievedTask;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS!!! I\u0027m sorry, but file not found :-(\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Task outputTaskDetails(String taskDetails) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //note that | is known as || in java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String[] inputsplit \u003d taskDetails.split(\"\\\\|\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String taskType \u003d inputsplit[0];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Task taskToAdd;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"[T]\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToAdd \u003d new ToDo(inputsplit[2]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"[D]\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ldt \u003d DateTimeHelper.formatInput(inputsplit[3]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToAdd \u003d new Deadline(inputsplit[2], ldt);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        case \"[E]\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ldt \u003d DateTimeHelper.formatInput(inputsplit[3]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            taskToAdd \u003d new Event(inputsplit[2], ldt);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS! Error in save file!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.checkIfDone(taskToAdd,inputsplit[1]);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskToAdd;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Checks if the task is done by calling markIsDone();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called by outputFileContents and checks the string which is retrieved from duke.txt if the task is Done."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void checkIfDone(Task t, String booleanValue) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (booleanValue.equalsIgnoreCase(\"True\")) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            t.markIsDone();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 131
    }
  },
  {
    "path": "src/main/java/duke/Core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    Scanner scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for User Interface Ui and creates one scanner everytime it starts up."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.scanner \u003d scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints out greeting message when Duke first starts up."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printHello() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return (\"Hello! I\u0027m Duke\\nWhat can I do for you?\\n\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Reads user input. Duke class calls this method to read user\u0027s input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return input which is a String that is read from the user\u0027s input which will later be passed to the Parser."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints the list of tasks in TaskList. ListCommand class calls this function."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param textEntered is retrieved from TaskList class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printRecord(ArrayList\u003cTask\u003e textEntered) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String printString \u003d \"Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c textEntered.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            printString \u003d printString + ((i + 1) + \".\" + textEntered.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        printString \u003d printString + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return printString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints message when Duke ends as ExitCommand is called."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printBye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints notification that the task has been added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printAdd(Task t, int sizeOfTask) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String toPrint \u003d (\"Got it. I\u0027ve added this task: \\n  \" + t.toString() + \"\\nNow you have \" + sizeOfTask"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints notification that the task has been done."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printDone(Task t) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String toPrint \u003d (\"Nice! I\u0027ve marked this task as done: \\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        toPrint \u003d toPrint + (\"  \" + t.toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints notification that the task has been deleted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printDelete(Task t, int sizeOfTask) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task: \\n\" + \"  \" + t.toString() + \"\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + \"Now you have \" + sizeOfTask + \" tasks in the list.\" + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints list of tasks which has been filtered to include the keyword."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printFind(ArrayList\u003cTask\u003e inputList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String toPrint \u003d (\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c inputList.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            toPrint \u003d toPrint + ((i + 1) + \".\" + inputList.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Prints the task that has been updated."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String printUpdate(Task t, int sizeOfTask) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String toPrint \u003d (\"Got it. I\u0027ve updated this task: \\n  \" + t.toString() + \"\\nNow you have \" + sizeOfTask"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + \" tasks in the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return toPrint;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 99
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Ui userIF;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Duke which is called in main. Creates a new Ui and Storage. If Storage can\u0027t find the file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * duke.txt it will throw an exception, in which case a new TaskList will be created that is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.userIF \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            tasks \u003d new TaskList(storage.outputFileContents());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            e.getMessage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            //no empty string input since already disabled send button if is empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assert input !\u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return c.execute(tasks, userIF, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String sayHello() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return userIF.printHello();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 49
    }
  },
  {
    "path": "src/main/java/duke/Helper/DateTimeHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DateTimeHelper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //contains possible formats of inputs that the user may pass in for the date and time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    static DateTimeFormatter INPUTFORMATTER \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy/MM/dd HHmm\"))"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy/MM/d HHmm\"))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy-MM-d HHmm\"))"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy.MM.dd HHmm\"))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"yyyy.MM.d HHmm\"))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\"))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\"))"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d-MM-yyyy HHmm\"))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"dd.MM.yyyy HHmm\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d.MM.yyyy HHmm\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            .toFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    //formatter for user input to be converted to to standardize."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    static DateTimeFormatter OUTPUTFORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Formats the user input for date and time using the INPUTFORMATTER to ensure it is in the proper format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputDateTime is the date and time passed in by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @throws DukeException which occurs if there is problem in user input date and time and outputs error to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static LocalDateTime formatInput(String inputDateTime) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            LocalDateTime ldt \u003d LocalDateTime.parse(inputDateTime, INPUTFORMATTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ldt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            throw new DukeException(\"OOPS! Please make sure that date \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                    + \"keyed in is of format Year(yyyy)/Month(mm)/Date(dd) Hour(hh)Minute(mm), eg 2019-09-14 1800\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Formats the user input for date and time using the OUTPUTFORMATTER to be printed or saved in the duke.txt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param outputDateTime is the LocalDateTime saved in the tasks."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static String formatOutput(LocalDateTime outputDateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return outputDateTime.format(OUTPUTFORMATTER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 54
    }
  },
  {
    "path": "src/main/java/duke/Helper/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    String message;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for DukeException which inherits from Exception. Modifies the string with a sad unicode face."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param errormsg String which contains error."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DukeException(String errormsg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String modifiedMsg \u003d \"\\u2639 \" + errormsg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.message \u003d modifiedMsg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string containing the error message. Called by to print the error."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the error message for the Exception."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 24
    }
  },
  {
    "path": "src/main/java/duke/Interface/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Circle myCircle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.setDialogBoxImage(img);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void setDialogBoxImage(Image img) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Circle myCircle \u003d new Circle(45, 45, 40);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        displayPicture.setClip(myCircle);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Flips the Duke DialogBox."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the flipped DialogBox."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 76
    }
  },
  {
    "path": "src/main/java/duke/Interface/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.Interface;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.concurrent.Executors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.concurrent.ScheduledExecutorService;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.beans.binding.BooleanBinding;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Disables the send button if the textfield is empty."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        BooleanBinding isTextFieldEmpty \u003d Bindings.isEmpty(userInput.textProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        sendButton.disableProperty().bind(isTextFieldEmpty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Displays a greeting DialogBox."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                DialogBox.getDukeDialog(duke.sayHello(), dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        //Ensures nothing is returned if the Userinput is equals to \"\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (input.equalsIgnoreCase(\"\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            return ;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        );"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        if (input.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            ScheduledExecutorService executor \u003d Executors.newSingleThreadScheduledExecutor();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            // schedule a exit task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Runnable task \u003d () -\u003e System.exit(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            executor.schedule(task, 1, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            executor.shutdown();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 85
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Application.launch(duke.Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.Interface.MainWindow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/DaApp.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().greet();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 37
    }
  },
  {
    "path": "src/main/java/duke/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Deadline extends Task implements Timeable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final String TASK_TYPE \u003d \"[D]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected LocalDateTime deadlineTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Deadline which inherits from Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param by contains information about the deadlineTime from the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.deadlineTime \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void updateTime(LocalDateTime updtTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.deadlineTime \u003d updtTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string based on the formatted LocalDateTime time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the time of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return DateTimeHelper.formatOutput(this.deadlineTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string based on the deadline descriptions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string, referring to the type of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the symbol for type of task, \"[D]\"."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string containing full description of the deadline."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return string containing information of task to be printed out."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE + super.getStatusIcon() + \" \" + super.toString()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + \" (by: \" + DateTimeHelper.formatOutput(deadlineTime)  + \")\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 63
    }
  },
  {
    "path": "src/main/java/duke/Task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class Event extends Task implements Timeable {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final String TASK_TYPE \u003d \"[E]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected LocalDateTime eventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Event which inherits from Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param eventTime contains information about the eventTime from the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Event(String description, LocalDateTime eventTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void updateTime(LocalDateTime updtTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.eventTime \u003d updtTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the symbol for type of task, \"[E]\"."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string based on the event description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the description of the task to be placed into Storage class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Returns a string based on the formatted LocalDateTime time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the time of the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return DateTimeHelper.formatOutput(this.eventTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * toString() method."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return string containing information of task to be printed out by ListCommand and Ui."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE + super.getStatusIcon() + \" \" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                + DateTimeHelper.formatOutput(eventTime) + \")\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 63
    }
  },
  {
    "path": "src/main/java/duke/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for Task which will be inherited by Deadline Event and ToDo. Default boolean for isDone is false."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to obtain information if the task is completed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return boolean of whether task is completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to change information if the task is completed. Modifies the isDone boolean value to true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void markIsDone() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void updateDescrip(String text) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.description \u003d text;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to provide tick or cross symbols to be printed out."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return String of tick or cross symbols."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return (isDone ? \"[\" + \"\\u2713\" + \"]\" : \"[\" + \"\\u2718\" + \"]\"); //return tick or X symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Called to provide description of event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return description of event."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public abstract String getType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public abstract String getDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 59
    }
  },
  {
    "path": "src/main/java/duke/Task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for TaskList if duke.txt file exists."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param taskArray Array of Tasks that is loaded from the duke.txt file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskArray) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.taskArray \u003d taskArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for TaskList if duke.txt file does not exists a empty Task array is created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.taskArray \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskArray.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.taskArray;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Task getTask(int num) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return taskArray.get(num - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void addToRecord(Task t) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        this.taskArray.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public Task removeTask(int num) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.taskArray.remove(num - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Filters out the Tasks in the ArrayList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param inputString obtained from the Parser to reflect the string to find."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return returnedTaskList, the new ArrayList containing the tasks found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(String inputString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ArrayList\u003cTask\u003e returnedTaskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        for (int i \u003d 0; i \u003c taskArray.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Task t \u003d taskArray.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String toCheck \u003d t.getDescription();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            if (toCheck.toLowerCase().contains(inputString)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                returnedTaskList.add(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return returnedTaskList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 61
    }
  },
  {
    "path": "src/main/java/duke/Task/Timeable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public interface Timeable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void updateTime(LocalDateTime updtTime);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getTime();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 9
    }
  },
  {
    "path": "src/main/java/duke/Task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    private static final String TASK_TYPE \u003d \"[T]\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Constructor for ToDo which inherits from Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @param description String that is passed from the commands containing info about the Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the symbol for type of task, \"[T]\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * Abstract method implemented from parent Task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return the description of the task to be placed into Storage class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * toString() method."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     * @return string containing information of task to be printed out by ListCommand and Ui."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        return TASK_TYPE + super.getStatusIcon() + \" \" +  super.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 46
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"405.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"252.0\" styleClass\u003d\"chatbox\" stylesheets\u003d\"@../../../../build/resources/main/view/DukeCSS.css\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \u003cInsets left\u003d\"15.0\" right\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"92.0\" fitWidth\u003d\"89.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Dandford": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.Interface.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"anchor\" stylesheets\u003d\"@DukeCSS.css\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Dandford": 19
    }
  },
  {
    "path": "src/test/java/Command/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ByteArrayOutputStream modifiedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public AddCommandTest(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.setOut(new PrintStream(modifiedOut));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void executeToDo() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String printedAssert \u003d \"Got it. I\u0027ve added this task: \\n\" + \"  [T]\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "                              + \" borrow book\\nNow you have 1 tasks in the list.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command a \u003d new AddCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        a.execute(tl ,new Ui() , new Storage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(printedAssert,modifiedOut.toString().trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void executeToDo_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Command a \u003d new AddCommand(\"todo\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            a.execute(tl, new Ui(), new Storage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fail(\"Exception was not thrown for Add Command Test\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String printedAssert \u003d \"\\u2639 \" +  \"OOPS!!! The description of a todo cannot be empty.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(printedAssert, e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 47
    }
  },
  {
    "path": "src/test/java/Command/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ByteArrayOutputStream modifiedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DeleteCommandTest(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.setOut(new PrintStream(modifiedOut));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deleteToDo() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command a \u003d new AddCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command d \u003d new DeleteCommand(\"delete 1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Ui u \u003d new Ui();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Storage s \u003d new Storage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        a.execute(tl, u, s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        d.execute(tl, u , s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(0, tl.getSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deleteToDo_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Command a \u003d new AddCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Command d \u003d new DeleteCommand(\"delete\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Ui u \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Storage s \u003d new Storage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            a.execute(tl, u, s);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            d.execute(tl, u, s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fail(\"Exception was not thrown for Delete Command Test\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String printedAssert \u003d \"\\u2639 \" +  \"OOPS!!! The description of delete must have a value.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(printedAssert, e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 53
    }
  },
  {
    "path": "src/test/java/Command/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public ByteArrayOutputStream modifiedOut \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public DoneCommandTest(){"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        System.setOut(new PrintStream(modifiedOut));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void doneToDo_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Command a \u003d new AddCommand(\"todo borrow book\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Command d \u003d new DoneCommand(\"done\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Ui u \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            Storage s \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            TaskList tl \u003d new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            a.execute(tl, u, s);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            d.execute(tl, u, s);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fail(\"Exception was not thrown for Done Command Test\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String printedAssert \u003d \"\\u2639 \" +  \"OOPS!!! The description of done must have a value.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(printedAssert, e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 42
    }
  },
  {
    "path": "src/test/java/Core/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.core.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestAdd() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addToDo \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addToDo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof AddCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestDone() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addDone \u003d \"done 3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof DoneCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestDelete() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addDelete \u003d \"delete 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof DeleteCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTestList() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String addList \u003d \"list\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Command c \u003d Parser.parse(addList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertTrue(c instanceof ListCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void parserParseTest_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            String testError \u003d \"Blah\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(testError, Parser.parse(testError));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            fail(); // the test should not reach this line"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Dandford"
        },
        "content": "            assertEquals(\"\\u2639 \" + \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 57
    }
  },
  {
    "path": "src/test/java/Task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deadlineTypeTest_Success() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"deadline return book /by 2019-09-17 0900\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Deadline deadL \u003d new Deadline(\"return book\", ldt);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"[D]\", deadL.getType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deadlineGetDescription_Success() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"deadline return book /by 2019-09-17 0900\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Deadline deadL \u003d new Deadline(\"return book\", ldt);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"return book|\" + DateTimeHelper.formatOutput(ldt), deadL.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void deadlineToString_Success() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"deadline return book /by 2019-09-17 0900\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String assertD \u003d \"[D]\" + \"[\" + \"\\u2718\" + \"] return book (by: 2019-09-17 0900)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Deadline deadL \u003d new Deadline(\"return book\", ldt);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(assertD, deadL.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 38
    }
  },
  {
    "path": "src/test/java/Task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DateTimeHelper;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void eventTypeTest_Success() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"event sing song /at 2019-09-17 0900\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Event eve \u003d new Event(\"sing song\", ldt);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"[E]\", eve.getType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void eventGetDescription_Success() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"event sing song /at 2019-09-17 0900\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Event eve \u003d new Event(\"sing song\", ldt);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"sing song|\" + DateTimeHelper.formatOutput(ldt), eve.getDescription());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void eventToString_Success() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"event sing song /at 2019-09-17 0900\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String assertE \u003d \"[E]\" + \"[\" + \"\\u2718\" + \"] sing song (at: 2019-09-17 0900)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        LocalDateTime ldt \u003d DateTimeHelper.formatInput(\"2019-09-17 0900\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        Event eve \u003d new Event(\"sing song\", ldt);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(assertE, eve.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 37
    }
  },
  {
    "path": "src/test/java/Task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "package duke.test.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import duke.helper.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void todoTypeTest_Success() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ToDo td \u003d new ToDo(\"borrow book\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"[T]\", td.getType());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void todoGetDescription_Success() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ToDo td \u003d new ToDo(\"borrow book\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(\"borrow book\", td.getDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    public void todoToString_Success() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String d \u003d \"todo borrow book\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        String assertE \u003d \"[T]\" + \"[\" + \"\\u2718\" + \"] borrow book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        ToDo td \u003d new ToDo(\"borrow book\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Dandford"
        },
        "content": "        assertEquals(assertE, td.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Dandford"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Dandford": 31
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "list"
      }
    ],
    "authorContributionMap": {
      "Dandford": 4
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Dandford"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Dandford"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Dandford"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Dandford"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Dandford"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Dandford"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Dandford"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Dandford"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Dandford"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Dandford"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Dandford"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "Dandford": 21
    }
  }
]
