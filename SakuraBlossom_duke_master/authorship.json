[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "checkstyle{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "run{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027myduke.Duke\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    from {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "version \u00270.1.0\u0027"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 52
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.CommandParser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Main class of Duke."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String DATABASE_LOCATION \u003d System.getProperty(\"user.dir\") + \"/data/duke.csv\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Class Variables"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private StorageManager storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructor for the class Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Constructor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        storage \u003d new StorageManager(DATABASE_LOCATION, tasks, ui::log);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * To run Duke\u0027s program."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void spin() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        storage.tryLoadFromDataBase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.init();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.welcomeUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        boolean continueChat \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Get query from user"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            String userQuery \u003d ui.waitForQuery();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            //Find and give Response"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Command cmd \u003d CommandParser.create(userQuery);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                cmd.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                continueChat \u003d !cmd.shouldExit();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                ui.logError(ex.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } while (continueChat);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.sayGoodBye();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.shutdown();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        storage.tryWriteToFile();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Duke myObj \u003d new Duke();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        myObj.spin();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 62,
      "-": 4
    }
  },
  {
    "path": "src/main/java/myduke/command/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeIllegalArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.type.TaskType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Adds a task to a list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final TaskType type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public AddTaskCommand(TaskType type, String arguments) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, StorageManager storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Task newTask \u003d createTask();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.printResponse(\"Got it. I\u0027ve added this task:\", newTask, taskList.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Creates a task element."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return a task element."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException if type of task or their arguments are invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Task createTask() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Scanner in \u003d new Scanner(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case TASK_TODO:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return ToDo.parse(in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case TASK_DEADLINE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return Deadline.parse(in);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case TASK_EVENT:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return Event.parse(in);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeIllegalArgumentException(\"TaskType is not implemented\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 57
    }
  },
  {
    "path": "src/main/java/myduke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An Abstract class of commands that can be performed on a list of task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param taskList Task list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param ui       UI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param storage  Storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException If a checked error occurs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public abstract void execute(TaskList taskList, Ui ui, StorageManager storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Indicates if the program should exit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean indicating whether the exit condition has been met."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 31
    }
  },
  {
    "path": "src/main/java/myduke/command/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.type.TaskType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Parses a query into its respective command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Creates the relevant command based on the user\u0027s query."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param query The query of the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return The appropriate Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException if no commands matches the query."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Command create(String query) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String[] parts \u003d query.trim().split(\" \", 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (parts.length \u003d\u003d 0 || parts[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"Query should not be empty\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String arguments \u003d (parts.length \u003d\u003d 2) ? parts[1] : \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Try to parse User\u0027s query"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        switch (parts[0]) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new AddTaskCommand(TaskType.TASK_TODO, arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new AddTaskCommand(TaskType.TASK_DEADLINE, arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new AddTaskCommand(TaskType.TASK_EVENT, arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new MarkCompletedTaskCommand(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new DeleteCommand(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new FilterTasksCommand(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (parts.length !\u003d 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new DukeInvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (parts.length !\u003d 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                throw new DukeInvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return new TerminateSessionCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 66
    }
  },
  {
    "path": "src/main/java/myduke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Deletes a task from a list of tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DeleteCommand extends ModifyListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DeleteCommand(int itemIndex) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(itemIndex);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DeleteCommand(String itemIndex) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(itemIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, StorageManager storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Task deletedTask \u003d taskList.deleteTask(this.itemIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.printResponse(\"Noted. I\u0027ve removed this task:\", deletedTask, taskList.size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 26
    }
  },
  {
    "path": "src/main/java/myduke/command/FilterTasksCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Filters tasks based on a search term."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class FilterTasksCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public FilterTasksCommand(String keyword) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, StorageManager storage) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        TaskList filteredTaskList \u003d taskList.filterTasks(this.keyword);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.printResponse(\"Here are the matching tasks in your list:\", filteredTaskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 24
    }
  },
  {
    "path": "src/main/java/myduke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Lists the tasks present in a given task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, StorageManager storage) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.printResponse(\"Here are the tasks in your list:\", taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 16
    }
  },
  {
    "path": "src/main/java/myduke/command/MarkCompletedTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Marks a task as completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class MarkCompletedTaskCommand extends ModifyListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public MarkCompletedTaskCommand(int itemIndex) throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(itemIndex);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public MarkCompletedTaskCommand(String itemIndex) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(itemIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, StorageManager storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Task completedTask \u003d taskList.markTaskAsDone(this.itemIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        ui.printResponse(\"Nice! I\u0027ve marked this task as done:\", completedTask, -1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 26
    }
  },
  {
    "path": "src/main/java/myduke/command/ModifyListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An abstract class for commands that can modify a given list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class ModifyListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final int itemIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a modify List command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param itemIndex An item index."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException if the index is lesser than one."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ModifyListCommand(int itemIndex) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.itemIndex \u003d itemIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (this.itemIndex \u003c 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"Invalid task reference number; index starts from 1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructs a modify List Command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param itemIndex A String representing an item index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException if the string is not an integer or the index is lesser than one."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ModifyListCommand(String itemIndex) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.itemIndex \u003d Integer.parseInt(itemIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"Task reference number must be an integer\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (this.itemIndex \u003c 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"Invalid task reference number; index starts from 1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 43
    }
  },
  {
    "path": "src/main/java/myduke/command/TerminateSessionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.StorageManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.core.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Terminates the current session."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class TerminateSessionCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void execute(TaskList taskList, Ui ui, StorageManager storage) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 19
    }
  },
  {
    "path": "src/main/java/myduke/core/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.function.BiConsumer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.ToDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.type.LoggerMessageType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Manages the Storage of Data Base Files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String CsvDelimiter \u003d \"\\\\s\\\\|\\\\s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Class Variables"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private String dataBaseLocation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private BiConsumer\u003cString, LoggerMessageType\u003e loggerConsumer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Constructor of Storage Manager."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param fileLocation  Location of Database file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param taskList      A List of tasks to complete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param logger        A BiConsumer to perform logging."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public StorageManager(String fileLocation, List\u003cTask\u003e taskList, BiConsumer\u003cString, LoggerMessageType\u003e logger) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.dataBaseLocation \u003d fileLocation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.loggerConsumer \u003d logger;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Tries to load the list of task from the database File."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean indicating whether the list of task were successfully loaded from the database."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean tryLoadFromDataBase() throws NullPointerException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (taskList \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"taskList is a Null reference\", LoggerMessageType.LOGGER_MESSAGE_ERROR);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        boolean successfullyLoadedDb \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        taskList.clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            File db \u003d new File(this.dataBaseLocation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            Scanner in \u003d new Scanner(db);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            in.useDelimiter(CsvDelimiter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            while (in.hasNextLine() \u0026\u0026 in.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                String taskType \u003d in.next().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (taskType.equals(\"END\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    successfullyLoadedDb \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                Task newTask;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                boolean markDone \u003d (in.nextInt() !\u003d 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                String description \u003d in.next();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"T\": //Todo Task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    newTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"D\": //Deadline Task"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    newTask \u003d new Deadline(description, in.next());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                case \"E\": //Event Task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    newTask \u003d new Event(description, in.next());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    throw new IllegalStateException(\"Unexpected value: \" + taskType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                if (newTask !\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    if (markDone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"Successfully loaded DB File\", LoggerMessageType.LOGGER_MESSAGE_INFO);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"Could find DB File\", LoggerMessageType.LOGGER_MESSAGE_ERROR);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (IllegalStateException ex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"DB File is corrupt. \" + ex.getMessage(), LoggerMessageType.LOGGER_MESSAGE_ERROR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"DB File is corrupt. \" + ex.getMessage(), LoggerMessageType.LOGGER_MESSAGE_ERROR);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!successfullyLoadedDb) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            taskList.clear();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return successfullyLoadedDb;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Tries to save the given list of task to the database file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean indicating whether the list of task were successfully saved to the database."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean tryWriteToFile() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            File directory \u003d new File(dataBaseLocation).getParentFile();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            if (!directory.exists()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                directory.mkdir();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            BufferedWriter writer \u003d new BufferedWriter(new FileWriter(dataBaseLocation));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            for (Task myTask : taskList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                writer.write(myTask.getDataBaseFormat());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            writer.write(\"END\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"Saved DB File successfully\", LoggerMessageType.LOGGER_MESSAGE_INFO);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            loggerConsumer.accept(\"Could not save to DB File. \" + ex.getMessage(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    LoggerMessageType.LOGGER_MESSAGE_ERROR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 147
    }
  },
  {
    "path": "src/main/java/myduke/core/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.type.LoggerMessageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Handles all user interactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String MESSAGE_PADDING  \u003d \"     \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String MESSAGE_BOUNDARY \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final char MESSAGE_SAD_FACE \u003d 0x2639;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Class variables"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Scanner primaryScanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Initialises the scanner to read queries from the console."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (primaryScanner \u003d\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            primaryScanner \u003d new Scanner(System.in);  // Create a Scanner object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Waits for a user query."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return the user query."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String waitForQuery() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return primaryScanner.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Shuts down the scanner used to read queries from the console."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void shutdown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (primaryScanner !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            primaryScanner.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            primaryScanner \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a single response."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param responseHeader A message to the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void printResponse(String responseHeader) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(responseHeader);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a response and list the given tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param responseHeader    A message to the user."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param listOfTasks       The list of tasks to be displayed to the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void printResponse(String responseHeader, List\u003cTask\u003e listOfTasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(responseHeader);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (listOfTasks !\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            int indexOfTask \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            for (Task currentTask : listOfTasks) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                indexOfTask +\u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                System.out.print(String.format(\"%d.\", indexOfTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                System.out.println(currentTask);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a single response and list a specified task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param responseHeader    A message to the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param refTask           The task to be displayed to the user."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param numOfTasks        Displays the number of tasks left in the task list if value is greater or equal than 0."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void printResponse(String responseHeader, Task refTask, int numOfTasks) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(responseHeader);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.print(\"  \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(refTask);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (numOfTasks \u003e\u003d 0) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.print(MESSAGE_PADDING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            System.out.println(String.format("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    \"Now you have %d task%s in the list.\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    numOfTasks,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                    (numOfTasks \u003e 1) ? \"s\" : \"\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Print Boundary"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println(MESSAGE_BOUNDARY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Greets the user."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void welcomeUser() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        printResponse(\"Hello! I\u0027m Duke\\n\" + MESSAGE_PADDING + \"What can I do for you?\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Bids farewell to the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void sayGoodBye() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        printResponse(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints an informational-level message to the console."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param message an informational-level message."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void logInfo(String message) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        printResponse(\"[INFO]: \" + message);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints a warning-level message to the console."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param message a warning-level message."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void logWarn(String message) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        printResponse(\"[WARNING]: \" + message);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints an error-level message to the console."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param message an error-level message."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void logError(String message) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        printResponse(String.format(\"%c OOPS!!! %s\", MESSAGE_SAD_FACE, message));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Prints the message to the console."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param message a message."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param level severity of the message."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void log(String message, LoggerMessageType level) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        switch (level) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case LOGGER_MESSAGE_INFO:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logInfo(message);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case LOGGER_MESSAGE_WARNING:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logWarn(message);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        case LOGGER_MESSAGE_ERROR:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            logError(message);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 185
    }
  },
  {
    "path": "src/main/java/myduke/exception/DukeEmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An exception thrown when a non-optional field is empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeEmptyDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeEmptyDescriptionException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 10
    }
  },
  {
    "path": "src/main/java/myduke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An abstract class for exceptions in Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 10
    }
  },
  {
    "path": "src/main/java/myduke/exception/DukeIllegalArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An exception thrown upon receiving an illegal argument."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeIllegalArgumentException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeIllegalArgumentException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 10
    }
  },
  {
    "path": "src/main/java/myduke/exception/DukeInvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An exception thrown upon processing an illegal command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeInvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeInvalidCommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 10
    }
  },
  {
    "path": "src/main/java/myduke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.parameters.DukeDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A Task representing a Deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final DukeDateTime byDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.byDate \u003d new DukeDateTime(by);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses the query as a Deadline Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in A query from the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A Deadline task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Task parse(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String delimiter \u003d \"/by \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(delimiter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String description \u003d in.next().trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(\"\\\\z\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The end date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String by \u003d in.next().substring(delimiter.length()).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Deadline(description, by);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"D | %d | %s | %s |\\r\\n\", (isDone ? 1 : 0), description, byDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byDate + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 54
    }
  },
  {
    "path": "src/main/java/myduke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.parameters.DukeDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A Task representing an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final DukeDateTime at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.at \u003d new DukeDateTime(at);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses the query as a Event Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in A query from the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A Event task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Task parse(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String delimiter \u003d \"/at \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(delimiter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String description \u003d in.next().trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(\"\\\\z\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The duration of a event cannot be empty.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        String at \u003d in.next().substring(delimiter.length()).trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new Event(description, at);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"E | %d | %s | %s |\\r\\n\", (isDone ? 1 : 0), description, at);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 54
    }
  },
  {
    "path": "src/main/java/myduke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * An abstract class to represent a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Gets the status icon of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A Character representing the status of the current task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Marks the current task as completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Gets the database string format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A database string format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public abstract String getDataBaseFormat();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 42
    }
  },
  {
    "path": "src/main/java/myduke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Manages a list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class TaskList extends ArrayList\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Deletes the specified task from the list and returns it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param index The task based on an index which starts from 1."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return The task that was deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeInvalidCommandException If the task does not exist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Task deleteTask(int index) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (index \u003c\u003d 0 || this.size() \u003c index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"No such task was found\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.remove(index - 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Gets a task based on an index which starts from 1."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param index The task based on an index which starts from 1."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return The task based on index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeInvalidCommandException If the task does not exist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Task getTask(int index) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (index \u003c\u003d 0 || this.size() \u003c index) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeInvalidCommandException(\"No such task was found\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.get(index - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Marks a specified task as done."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param index The task based on an index which starts from 1."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return The task that was marked as done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeInvalidCommandException If the task does not exist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Task markTaskAsDone(int index) throws DukeInvalidCommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Task refTask \u003d getTask(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        refTask.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return refTask;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Filters the tasks which contains the keyword."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param keyword the key search term."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A list of filtered tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public TaskList filterTasks(String keyword) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        TaskList newList \u003d new TaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .filter(task -\u003e task.description.toLowerCase().contains(keyword.toLowerCase()))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                .collect(Collectors.toCollection(() -\u003e newList));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 70
    }
  },
  {
    "path": "src/main/java/myduke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeEmptyDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A Task representing a ToDo Task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Parses the query as a ToDo Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param in A query from the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A ToDo task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @throws DukeException representing any checked exceptions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public static Task parse(Scanner in) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        in.useDelimiter(\"\\\\z\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (!in.hasNext()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            throw new DukeEmptyDescriptionException(\"The description of a task cannot be empty.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return new ToDo(in.next().trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return String.format(\"T | %d | %s |\\r\\n\", (isDone ? 1 : 0), description);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 41
    }
  },
  {
    "path": "src/main/java/myduke/task/parameters/DukeDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.task.parameters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * A Wrapper class to represent a DateTime."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class DukeDateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Accepted Date Time format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String DATETIME_FORMAT \u003d \"dd/M/yy HHmm\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private static final String PRINT_DATETIME_FORMAT \u003d \"dd MMM yyyy hh:mm a\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    //Class variable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private String dateTimeString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private Date localDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private SimpleDateFormat localDateFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    private SimpleDateFormat localDatePrintFormatter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * A Wrapper class for DateTime Object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @param dateTimeString the date time object to parse"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public DukeDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.dateTimeString \u003d dateTimeString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.localDateFormatter \u003d new SimpleDateFormat(DATETIME_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.localDatePrintFormatter \u003d new SimpleDateFormat(PRINT_DATETIME_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        this.localDateTime \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            this.localDateTime \u003d this.localDateFormatter.parse(dateTimeString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } catch (ParseException ex2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                this.localDateTime \u003d this.localDatePrintFormatter.parse(dateTimeString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            } catch (ParseException ex1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "                this.localDateTime \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Determines whether the object is a valid DateTime Object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return A boolean determining whether the object is a valid DateTime Object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public boolean isValidDateTimeObject() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.localDateTime !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * Get the DateTime Object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     * @return a DateTime Object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public Date getLocalDateTime() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return this.localDateTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        if (isValidDateTimeObject()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return localDatePrintFormatter.format(localDateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "            return this.dateTimeString;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 71
    }
  },
  {
    "path": "src/main/java/myduke/type/LoggerMessageType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.type;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Types of logger messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public enum LoggerMessageType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** Information. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    LOGGER_MESSAGE_INFO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** Warning. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    LOGGER_MESSAGE_WARNING,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** Error. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    LOGGER_MESSAGE_ERROR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 15
    }
  },
  {
    "path": "src/main/java/myduke/type/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke.type;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " * Types of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** A todo task. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    TASK_TODO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** A deadline task. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    TASK_DEADLINE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    /** A event task. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    TASK_EVENT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 13
    }
  },
  {
    "path": "src/test/java/myduke/CommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.AddTaskCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.TerminateSessionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.MarkCompletedTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class CommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_EmptyOrInvalid() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"   \"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"Hello\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_Bye() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd \u003d CommandParser.create(\"bye\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd instanceof TerminateSessionCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd.shouldExit());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"bye 1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"bye hi\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_List() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd \u003d CommandParser.create(\"list\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd instanceof ListCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd.shouldExit());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"list 1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"list hi\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_Done() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command command \u003d CommandParser.create(\"done 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(command instanceof MarkCompletedTaskCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"done -2\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"done 0\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"done 0 A\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"done 0A\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"done\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_Delete() throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command command \u003d CommandParser.create(\"delete 1\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(command instanceof DeleteCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"delete -2\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"delete 0\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"delete 0 A\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"delete 0A\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e CommandParser.create(\"delete\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_Add_Todo() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd \u003d CommandParser.create(\"todo sleep eat sleep \u0026 sleep\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd.shouldExit());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_Add_Deadline() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd1 \u003d CommandParser.create(\"deadline finish project /by 31/08/19 2359\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd1 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd1.shouldExit());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd2 \u003d CommandParser.create(\"deadline\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd2 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd2.shouldExit());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd3 \u003d CommandParser.create(\"deadline finish project\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd3 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd3.shouldExit());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd4 \u003d CommandParser.create(\"deadline /by 31/08/19 2359\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd4 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd4.shouldExit());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd5 \u003d CommandParser.create(\"deadline finish project /at 31/08/19 2359\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd5 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd5.shouldExit());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testCommand_Add_Event() throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd1 \u003d CommandParser.create(\"event begin to panic!   /at 31/08/19 2300  \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd1 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd1.shouldExit());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd2 \u003d CommandParser.create(\"event begin to panic! 31/08/19 2300  \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd2 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd2.shouldExit());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd3 \u003d CommandParser.create(\"event begin to panic!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd3 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd3.shouldExit());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd4 \u003d CommandParser.create(\"event /at 31/08/19 2300  \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd4 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd4.shouldExit());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        Command cmd5 \u003d CommandParser.create(\"event begin to panic! /by 31/08/19 2300  \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertTrue(cmd5 instanceof AddTaskCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertFalse(cmd5.shouldExit());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 124
    }
  },
  {
    "path": "src/test/java/myduke/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.exception.DukeInvalidCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testTaskList_CreateAndDeleteSingleElement() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        tasks.add(new TaskStub());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        //Index starts at 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.deleteTask(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.deleteTask(-1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.deleteTask(2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        tasks.deleteTask(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.deleteTask(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.size(), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    void testTaskList_AddTodo() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        tasks.add(new TaskStub());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertEquals(tasks.getTask(1).toString(), \"Test Stub\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.getTask(-1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.getTask(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        assertThrows(DukeInvalidCommandException.class, () -\u003e tasks.getTask(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 49
    }
  },
  {
    "path": "src/test/java/myduke/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "package myduke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "import myduke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    TaskStub() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        super(\"\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String getDataBaseFormat() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "        return \"Test Stub\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 19
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✘] read book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 1 task in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     1.[T][✘] read book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✓] read book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✘] join sports club"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✓] join sports club"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [T][✘] borrow book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     2.[D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     3.[E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     4.[T][✓] join sports club"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     5.[T][✘] borrow book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "       [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 77
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 12
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.txt"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "diff ACTUAL.txt EXPECTED.txt"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 34
    }
  },
  {
    "path": "text-ui-test/test.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#Find bash file location"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "SCRIPTPATH\u003d\"$( cd \"$(dirname \"$0\")\" ; pwd -P )\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#Check if test files are available"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if [ -f FILENAME ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"Could not find any test files in: ${SCRIPTPATH}\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "then"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "exit 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "fi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "#Run test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "for f in $SCRIPTPATH/*.in"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "do"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   if [ -f ${f%.in}.out ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   then"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      echo \"Running: $(basename $f)\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      java -classpath ../bin Duke \u003c $f \u003e $(basename ${f%.in}).actual"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      # compare the output to the expected output"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      diff -u $(basename ${f%.in}).actual ${f%.in}.out"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "          echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "          echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      fi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   else"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "      echo \"Could not find output file for $(basename $f)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": "done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SakuraBlossom"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SakuraBlossom": 49
    }
  }
]
