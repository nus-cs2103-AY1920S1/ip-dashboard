[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    mainClassName \u003d \"run.Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 29,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.UpdateStateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Abstract class for a command that adds tasks into tasks list that extends Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Abstract method that adds information to current TaskList, updates the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * state of the TaskList through storage and interacts/updates the user through the ui."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return false boolean since command is not exit (\"bye\") command"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Updates state of save file to latest tasks from TaskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Catches IO exception and UpdateStateException that may be thrown while"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * updating state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void addCommandUpdateState() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            storage.updateState(tasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"IO exception caught while adding task!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (UpdateStateException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 49
    }
  },
  {
    "path": "src/main/java/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends Command class and is used to exit the application/created when when user enters \"bye\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Does not manipulate the TaskList or storage in any way, but uses show exit"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * procedure to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ui.exit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ui.closeScanner();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return true boolean since command is exit (\"bye\") command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 31
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Abstract class for commands that results from user input that may"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * modify or retrieve information from the task list in various ways."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Abstract method that adds, withdraws or removes information from current TaskList, updates the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * state of the TaskList through storage and interacts/updates the user through the ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /** Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return boolean that checks if this is exit (\"bye\") command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 26
    }
  },
  {
    "path": "src/main/java/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends AddCommand class and is used to create and manage a new deadline task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String rawString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a new DeadLineCommand that takes in the entire raw string the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * enters to be later parsed and separated into the the new deadline\u0027s relevant fields."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString complete unparsed user input of deadline creation request"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DeadlineCommand(String rawString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.rawString \u003d rawString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a new deadline task to current TaskList, adds this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * new deadline into storage and interacts/updates the user through the ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.ui \u003d ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String removeCommand \u003d rawString.replaceFirst(\"deadline \", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String[] splited \u003d removeCommand.split(\" /by \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Deadline currTask \u003d new Deadline(splited[0], splited[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.add(currTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.addCommandUpdateState();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 40
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DeleteParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.UpdateStateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends Command class and is used to delete an existing task from TaskList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String rawString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for delete command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString complete unparsed user input of delete creation request"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DeleteParameterException if user does not provide a valid int number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DeleteCommand(String rawString) throws DeleteParameterException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.rawString \u003d rawString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String[] splited \u003d rawString.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (splited[1].matches(\"^[0-9]*[1-9][0-9]*$\") \u0026\u0026 splited.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            taskNum \u003d Integer.parseInt(splited[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DeleteParameterException(\"Invalid parameter! Try the format: delete (task number)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Deletes task from current TaskList based on user task number input, updates the"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * state of the storage by deleting task as well and interacts/updates the user through the ui."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.delete(taskNum);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            storage.updateState(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"IO exception caught while deleting task!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (UpdateStateException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return false boolean since command is not exit (\"bye\") command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 58
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DoneParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.UpdateStateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends Command class and used to mark an exisiting task in TaskList as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String rawString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for done command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString complete unparsed user input of done creation request"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DoneParameterException if user does not provide a valid int number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DoneCommand(String rawString) throws DoneParameterException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.rawString \u003d rawString;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String[] splited \u003d rawString.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (splited[1].matches(\"^[0-9]*[1-9][0-9]*$\") \u0026\u0026 splited.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            taskNum \u003d Integer.parseInt(splited[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new DoneParameterException(\"Invalid parameter! Try the format: done (task number)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Tries to mark relevant task in TaskList as done, updates state in storage and interacts/updates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * the user through the ui. Catches IOException when accessing the storage state file and"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * UpdateStateException if exception faces while updating storage state file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.done(taskNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            storage.updateState(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"IO exception caught while marking task as done!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (UpdateStateException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return false boolean since command is not exit (\"bye\") command"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 59
    }
  },
  {
    "path": "src/main/java/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends AddCommand class and is used to create and manage a new event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String rawString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a new EventCommand that takes in the entire raw string the user"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * enters to be later parsed and separated into the the new event\u0027s relevant fields."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString complete unparsed user input of event creation request"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public EventCommand(String rawString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.rawString \u003d rawString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a new event task to current TaskList, adds this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * new event into storage and interacts/updates the user through the ui."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.tasks \u003d tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.ui \u003d ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.storage \u003d storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String removeCommand \u003d rawString.replaceFirst(\"event \", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String[] splited \u003d removeCommand.split(\" /at \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Event currTask \u003d new Event(splited[0], splited[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.add(currTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.addCommandUpdateState();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 40
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends the command class and used to search through tasks to find tasks with names that contain"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * the search parameter."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String rawString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String searchString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for find command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString complete unparsed user input of find creation request"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public FindCommand(String rawString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.rawString \u003d rawString;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.searchString \u003d rawString.replace(\"find \", \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Searches through list of current tasks from TaskList, filters these tasks into a seperate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * arraylist and passes to ui to print."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.find(this.searchString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return false boolean since command is not exit (\"bye\") command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 42
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends Command class and lists (prints) out current tasks in TaskList to user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Retrieves list of current tasks from TaskList and passes this to ui to iterate"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * through and print in the relevant format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.list();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if this command is an exit (\"bye\") command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return false boolean since command is not exit (\"bye\") command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 30
    }
  },
  {
    "path": "src/main/java/command/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.EmptyToDoDescriptionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends AddCommand class and is used to create and manage a new todo task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class ToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String rawString;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a new ToDoCommand that takes in the entire raw string the user"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * enters to be later parsed and separated into the the new todo\u0027s relevant fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString complete unparsed user input of todo creation request"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ToDoCommand(String rawString) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (rawString.equals(\"todo\") || rawString.equals(\"todo \")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new EmptyToDoDescriptionException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.rawString \u003d rawString;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a new todo task to current TaskList, adds this"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * new todo into storage and interacts/updates the user through the ui."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks current TaskList with all current tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param ui current user interface"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param storage current storage state"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.tasks \u003d tasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.ui \u003d ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ToDo currTask \u003d new ToDo(rawString.replaceFirst(\"todo \", \"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks.add(currTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super.addCommandUpdateState();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 43
    }
  },
  {
    "path": "src/main/java/data/state.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "D//CS2103T HW//true//27/8/2019 2359"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 1
    }
  },
  {
    "path": "src/main/java/data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "D//CS2103T project//false//2/12/1997 2359"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "E//McDonalds//true//1/12/2019 0050"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "T//fix code//false"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "T//go to school//true"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "E//formal dinner//false//2/12/1997 2359"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 6
    }
  },
  {
    "path": "src/main/java/exception/DeleteParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends DukeException and is an exception thrown when user does not enter an integer after"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * calling a delete command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DeleteParameterException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for DeleteParameterException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg informs the user what the correct format of a delete command should be and why"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *                     this exception was thrown"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DeleteParameterException(String exceptionMsg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 17
    }
  },
  {
    "path": "src/main/java/exception/DoneParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends DukeException and is an exception thrown when user does not enter an integer after"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * calling a done command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DoneParameterException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for DoneParameterException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg informs the user what the correct format of a done command should be and why"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *                     this exception was thrown"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DoneParameterException(String exceptionMsg) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 17
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * General exception for all Duke related exceptions that other exceptions should extend."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg Message that will likely be displayed to the user if exception is caught to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *                     explain what caused the issue"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public DukeException(String exceptionMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 16
    }
  },
  {
    "path": "src/main/java/exception/EmptyToDoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends DukeException and thrown when user types (\"todo\") therefore attempting to create a todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * with any description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class EmptyToDoDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for EmptyToDoDescriptionException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg informs the user what the correct format of creating a new todo should be and why"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *      *                     this exception was thrown"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public EmptyToDoDescriptionException(String exceptionMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 16
    }
  },
  {
    "path": "src/main/java/exception/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends DukeException and thrown to handle all other generic invalid commands that Duke can\u0027t handle."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for InvalidInputException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg informs the user of the various correct command options the user"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *                     can use and why this exception was thrown"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public InvalidInputException(String exceptionMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 16
    }
  },
  {
    "path": "src/main/java/exception/ParseFileException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends DukeException and thrown when there is an error reading contents of save .txt file into TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class ParseFileException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for ParseFileException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg informs the user that an error occurred while reading the contents of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *                     state file or while trying to write contents to TaskList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ParseFileException(String exceptionMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 16
    }
  },
  {
    "path": "src/main/java/exception/UpdateStateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends DukeException and is thrown when there is an error updating the state file after running a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class UpdateStateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for UpdateStateException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param exceptionMsg informs the user that there was an error while updating the state file"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *                     after running a command and informs them why this exception was thrown"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public UpdateStateException(String exceptionMsg) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(exceptionMsg);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 16
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.ToDoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.EventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.InvalidInputException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Parser for reading user input and understand which command user is trying to use."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Reads a single line of user input and creates the relevant command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param rawString user input to create a command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return command created if user input is successfully parsed"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws DukeException if user enters an invalid input and suggests available commands instead"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static Command parse(String rawString) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (rawString.equals(\"bye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.equals(\"list\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.startsWith(\"done \")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new DoneCommand(rawString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new ToDoCommand(rawString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.startsWith(\"deadline \")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new DeadlineCommand(rawString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.startsWith(\"event \")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new EventCommand(rawString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.startsWith(\"delete \")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new DeleteCommand(rawString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (rawString.startsWith(\"find \")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new FindCommand(rawString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new InvalidInputException(\"Invalid command! Try the commands: bye, list, done, todo, deadline, \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"event, find or delete and their respective formats!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 50
    }
  },
  {
    "path": "src/main/java/parser/StorageParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.ParseFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Parser for reading contents of state file and creating the relevant tasks to add into TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class StorageParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Reads a single String line (from the saved state file) to create the relevant task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param line the line in the state file that represents a task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return Task based on the task created by parsing the line in state file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws ParseFileException if there is an exception while trying to parse the line in the state file and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *     create the relevant task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Task parseLine(String line) throws ParseFileException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        String[] splited \u003d line.split(\"//\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (splited[0].equals(\"T\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            ToDo currTask \u003d new ToDo(splited[1], Boolean.parseBoolean(splited[2]));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return currTask;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (splited[0].equals(\"D\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Deadline currTask \u003d new Deadline(splited[1], Boolean.parseBoolean(splited[2]), splited[3]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return currTask;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else if (splited[0].equals(\"E\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Event currTask \u003d new Event(splited[1], Boolean.parseBoolean(splited[2]), splited[3]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return currTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw new ParseFileException(\"Exception while reading contents of state file!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 36
    }
  },
  {
    "path": "src/main/java/run/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package run;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Creates a new Duke interface task management system that has includes a task list, storage system and user"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param filePath to current save state file"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for Duke for JavaFx."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        storage \u003d new Storage(\"C:\\\\Users\\\\nisga\\\\OneDrive\\\\Desktop\\\\duke\\\\src\\\\main\\\\java\\\\data\\\\tasks.txt\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Runs introductory messages and begins awaiting user input."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ui.introduction();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ui.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                ui.showLine(); // show the divider line (\"---------\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\nisga\\\\OneDrive\\\\Desktop\\\\duke\\\\src\\\\main\\\\java\\\\data\\\\tasks.txt\").run();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 134,
      "-": 1
    }
  },
  {
    "path": "src/main/java/run/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package run;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 13
    }
  },
  {
    "path": "src/main/java/run/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package run;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.ParseFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.UpdateStateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import parser.StorageParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Storage system that writes to and from file in hard disk based on state on TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected String filepath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected File state;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected StorageParser sp \u003d new StorageParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param filepath filepath to state file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Initialises by checking if file is present in specified path and creates file if none present."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        state \u003d new File(filepath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (state.createNewFile()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Ui.showMessage(\"No file detected, state file created!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                Ui.showMessage(\"State file detected!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"IO exception encountered while initializing state file!\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Creates tasks from state file and stores them in an arraylist for later conversion into TaskList object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return An arraylist of tasks based on tasks created and loaded from state file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Scanner sc \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            sc \u003d new Scanner(state);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                String nextLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                if (nextLine.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    tasks.add(sp.parseLine(nextLine));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"IO exception caught while loading state file, initializing new empty Task List!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (ParseFileException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"Exception while reading contents of state file, initializing new empty Task List!\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (sc !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Rewrites state file based on current tasks in TaskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks all current tasks (the entire TaskList itself)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws IOException if exception when accessing file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @throws UpdateStateException if exception when writing contents to file"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void updateState(TaskList tasks) throws IOException, UpdateStateException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        FileWriter fw \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            fw \u003d new FileWriter(filepath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            StringBuilder textToAddSB \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            for (Task currTask : tasks.getTasksArrayList()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                if (currTask instanceof ToDo) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    textToAddSB.append(fileUpdateToDo((ToDo) currTask));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    textToAddSB.append(System.lineSeparator());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                } else if (currTask instanceof Deadline) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    textToAddSB.append(fileUpdateDeadline((Deadline) currTask));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    textToAddSB.append(System.lineSeparator());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                } else if (currTask instanceof Event) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    textToAddSB.append(fileUpdateEvent((Event) currTask));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    textToAddSB.append(System.lineSeparator());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    throw new UpdateStateException(\"Exception while updating state!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            fw.write(textToAddSB.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (fw !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts todo object into formatted String representation for storage on state file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param todo todo object to be written to state file"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String of todo formatted for sending for writing to state file"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String fileUpdateToDo(ToDo todo) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder stringBuilder \u003d  new StringBuilder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"T//\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(todo.getName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"//\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(todo.checkIsDone());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts deadline object into formatted String representation for storage on state file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param deadline deadline object to be written to state file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String of deadline formatted for sending for writing to state file"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String fileUpdateDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder stringBuilder \u003d  new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"D//\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(deadline.getName());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"//\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(deadline.checkIsDone());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"//\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(deadline.getStringBy());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Converts event object into formatted String representation for storage on state file."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param event event object to be written to state file"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String of event formatted for sending for writing to state file"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String fileUpdateEvent(Event event) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        StringBuilder stringBuilder \u003d  new StringBuilder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"E//\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(event.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"//\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(event.checkIsDone());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(\"//\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        stringBuilder.append(event.getStringAt());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 159
    }
  },
  {
    "path": "src/main/java/run/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package run;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * TaskList for storing all current tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks arraylist of tasks to be stored in this TaskList"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Get the arraylist of tasks stored in this TaskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return arraylist of tasks in this TaskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ArrayList\u003cTask\u003e getTasksArrayList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints all tasks currently stored in this TaskList through ui."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void list() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (this.tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showMessage(\"No tasks!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Ui.printList(this.tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Adds a task into this TaskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param task the task to be added in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Ui.printAdd(task, this.tasks.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Marks a task within this TaskList as done."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param taskNum int of task number that is to be marked as done (1-indexed)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void done(int taskNum) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (taskNum \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"No task at that number! (Marking as done unsuccessful)\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Task currTask \u003d this.tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        currTask.setDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Ui.printDone(currTask);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Deletes a task from within the TaskList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param taskNum int of task number that is to be deleted (1-indexed)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void delete(int taskNum) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (taskNum \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"No task at that number! (Deletion unsuccessful)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Task currTask \u003d this.tasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.tasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Ui.printDelete(currTask, this.tasks.size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Searches through tasks in this TaskList to find matching tasks."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param searchString String to be searched for within task names"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void find(String searchString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        ArrayList\u003cTask\u003e passedTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Task currTask \u003d this.tasks.get(i - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            if (currTask.getName().contains(searchString)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                passedTasks.add(currTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        Ui.printFind(passedTasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 91
    }
  },
  {
    "path": "src/main/java/run/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package run;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Handles all the interaction with the user (taking input and printing output)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected Scanner sc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints an error message to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param errorMessage the error message to be printed to the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void showError(String errorMessage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints a message to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param message the message to be printed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void showMessage(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Introduction that is printed when Duke is first accessed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void introduction() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Initialises a scanner (Used when Duke is first accessed)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void init() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints exit message (Used when Duke is exited)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Closes the scanner (Used when Duke is exited)."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void closeScanner() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.sc.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints line space for readability."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"---------------------------------------------------------------------\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Reads the line that user inputs."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return rawString of user input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints a list of tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks arraylist of tasks to be printed"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void printList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Task currTask \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            System.out.println(i + \".\" + currTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints messages for when task is added to TaskList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param task the task that was added"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param size current number of tasks in TaskList"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void printAdd(Task task, int size) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"  \" + task);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints message for when a task is marked as done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param task the task to be marked as done"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void printDone(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"  \" + task);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints messages for when a task is deleted from TaskList."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param task the task to be deleted"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param size new total number of tasks in TaskList"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void printDelete(Task task, int size) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"  \" + task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Prints tasks that were found and special message if not tasks were found to match search string."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param tasks arraylist of found tasks that contained previous search string"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public static void printFind(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            System.out.println(\"No tasks found containing your search!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Task currTask \u003d tasks.get(i - 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            System.out.println(i + \".\" + currTask);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 136
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends from Task, a task with a name and date and time for when the deadline is due by."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a deadline, defaults isDone as false (Marks the new deadline as undone)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param description this deadline\u0027s name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param by this deadline\u0027s date and time in the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            this.by \u003d parseDateTime(by);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"Invalid format! Try dd/mm/yyyy hhmm instead!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a deadline when reading from state file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param description this deadline\u0027s name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param isDone boolean true or false if this deadline is done or undone respectively"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param by this deadline\u0027s due date and time in the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.by \u003d parseDateTime(by);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private LocalDateTime parseDateTime(String by) throws DateTimeException, NumberFormatException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            String[] splited \u003d by.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            String[] dateFields \u003d splited[0].split(\"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            int hour \u003d Integer.parseInt(splited[1].substring(0, 2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            int minute \u003d Integer.parseInt(splited[1].substring(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return LocalDateTime.of(Integer.parseInt(dateFields[2]), Integer.parseInt(dateFields[1]),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    Integer.parseInt(dateFields[0]), hour, minute);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DateTimeException | NumberFormatException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Gets string of at field for this deadline (date and time of when this deadline is due by)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return this deadline\u0027s datetime in the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getStringBy() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return by.getDayOfMonth() + \"/\" + by.getMonthValue() + \"/\" + by.getYear() + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + String.format(\"%02d\", by.getHour()) + String.format(\"%02d\", by.getMinute());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns String representation of this deadline."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String in format [D] (super class Task\u0027s toString) at: (this deadline\u0027s datetime in the format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *     dd/mm/yyyy hhmm)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + getStringBy() + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 73
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import run.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends from Task, a task with a name and date and time for when the event will be held."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    protected LocalDateTime at;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for an event, defaults isDone as false (Marks the new event as undone)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param description this event\u0027s name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param at this event\u0027s date and time in the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            this.at \u003d parseDateTime(at);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(\"Invalid format! Try dd/mm/yyyy hhmm instead!\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DateTimeException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            Ui.showError(ex.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for an event when reading from state file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param description this event\u0027s name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param isDone boolean true or false if this event is done or undone respectively"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param at this event\u0027s date and time in the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Event(String description, boolean isDone, String at) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.at \u003d parseDateTime(at);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private LocalDateTime parseDateTime(String at) throws DateTimeException, NumberFormatException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            String[] splited \u003d at.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            String[] dateFields \u003d splited[0].split(\"/\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            int hour \u003d Integer.parseInt(splited[1].substring(0, 2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            int minute \u003d Integer.parseInt(splited[1].substring(2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            return LocalDateTime.of(Integer.parseInt(dateFields[2]), Integer.parseInt(dateFields[1]),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    Integer.parseInt(dateFields[0]), hour, minute);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DateTimeException | NumberFormatException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            throw ex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Gets string of at field for this event (date and time of when this event will be)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return this event\u0027s datetime in the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getStringAt() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return at.getDayOfMonth() + \"/\" + at.getMonthValue() + \"/\" + at.getYear() + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                + String.format(\"%02d\", at.getHour()) + String.format(\"%02d\", at.getMinute());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns String representation of this event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String in format [E] (super class Task\u0027s toString) at: (this event\u0027s datetime in the format"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     *     dd/mm/yyyy hhmm)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + getStringAt() + \")\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 73
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Generic task that other classes can extend from to be added into the TaskList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a task, defaults isDone to false (Marks the new task as undone)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param name this task\u0027s name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Task(String name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a task when reading from state file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param name this task\u0027s name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param isDone boolean true or false if this task is done or undone respectively"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public Task(String name, boolean isDone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Checks if isDone boolean of this task is true or false (If task is completed or not respectively)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return boolean of isDone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public boolean checkIsDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Gets the string of this task\u0027s name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String this task\u0027s name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Get tick or cross String icon based on if task is completed or incomplete respectively."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return tick or cross String icon"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return (isDone ? \"✓\" : \"✗\"); //return tick or X symbols"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Changes boolean value of isDone is task by marking it true (Task completed)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns String representation of task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String representation of task in format [(status icon)] (task name)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"]\" + \" \" + this.getName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 69
    }
  },
  {
    "path": "src/main/java/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " * Extends from Task, a task with only a name and no other special field."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a todo, defaults isDone to false (Marks the new todo as undone)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param description this todo\u0027s name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Constructor for a todo when reading from state file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param description this todo\u0027s name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @param isDone boolean true or false if this todo is done or undone respectively"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * Returns String representation of this todo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     * @return String in format [T] (super class Task\u0027s toString)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 33
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.ByeCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void parse_byeCommand_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertTrue(Parser.parse(\"bye\") instanceof ByeCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            System.out.println(\"Unexpected exception caught in parse_byeCommand_success:\" + ex.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void parse_invalidCommand_exceptionThrown() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertTrue(Parser.parse(\"this is an illegal command\") instanceof Command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertEquals(\"Invalid command! Try the commands: bye, list, done, todo, deadline, event, find or delete \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "                    + \"and their respective formats!\", ex.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 34
    }
  },
  {
    "path": "src/test/java/parser/StorageParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "public class StorageParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void parseLine_exampleDeadline_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            StorageParser sp \u003d new StorageParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertTrue(sp.parseLine(\"D//CS2103T HW//true//27/8/2019 2359\") instanceof Deadline);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            System.out.println(\"Unexpected exception caught in parseLine_exampleDeadline_success:\" + ex.getMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    public void parseLine_exampleInvalid_exceptionThrown() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            StorageParser sp \u003d new StorageParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertTrue(sp.parseLine(\"X//CS2103T HW//true//27/8/2019 2359\") instanceof Task);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "            assertEquals(\"Exception while reading contents of state file!\", ex.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sahilgat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sahilgat": 35
    }
  }
]
