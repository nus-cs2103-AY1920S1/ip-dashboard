[
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String dueDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Deadline(String description, String dueDate) throws InvalidTaskException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Validations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Description cannot be blank\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (dueDate.isBlank()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Due date cannot be blank\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(errorMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[D]\" + super.getInfo() + \"(by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 44
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.InputParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        respondToInput();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void greet() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Hello! My name is Duke!\\nHow may I help you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // TODO: Create input parser to handle all this!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void respondToInput() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // May require refactor if performance is undesirably poor due to many string concatenations (review at towards end of project)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        // Should refactor by extract method"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // TODO: if list is empty, print out a different message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    displayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"done \")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    // TODO: handle out of bounds exception (only 3 task but try to mark 4th as done)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    // TODO: handle invalid input exception (non-integer after \"done\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    Task task \u003d tasks.get(Integer.parseInt(userInput.substring(5)) - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    dukeReply(\"Successfully marked the following task as done:\\n\" + task.getInfo());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"todo \")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    // TODO: handle exception cause the add and displays will throw oob exception methinks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    addAndDisplayNewTodo(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"deadline \")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    // TODO: same here"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    addAndDisplayNewDeadline(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"event \")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    // TODO: and here"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    addAndDisplayNewEvent(userInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    dukeReply(\"I don\u0027t know what that means, sorry!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                dukeReply(\"Oops sorry you\u0027re missing some stuff!!\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                dukeReply(\"I didnt understand that, sorry!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            finally {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Till next time, goodbye!\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static boolean checkIsInputEquals(String input, String comparisonString) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (input.length() \u003c comparisonString.length()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return input.substring(0, comparisonString.length()).equals(comparisonString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void displayList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String finalOutput \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (!first) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                finalOutput +\u003d \"\\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            first \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            finalOutput +\u003d i + 1 + \". \" + tasks.get(i).getInfo();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Here are the tasks in your list:\\n\" + finalOutput);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void displayAddedTask(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Got it. I\u0027ve added this task:\\n  \" + task.getInfo() + \"\\nNow you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void addAndDisplayNewTodo(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Todo newTodo \u003d new Todo(userInput.substring(\"todo \".length()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(newTodo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayAddedTask(newTodo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void addAndDisplayNewDeadline(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] descriptionAndDate \u003d userInput.substring(\"deadline \".length()).split(\"/by \", 2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String description \u003d descriptionAndDate[0];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String dueDate \u003d descriptionAndDate[1];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(descriptionAndDate[0], descriptionAndDate[1]);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(newDeadline);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayAddedTask(newDeadline);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void addAndDisplayNewEvent(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] descriptionAndDateTimes \u003d userInput.substring(\"event \".length()).split(\"/at \", 2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] startAndEndDateTimes \u003d descriptionAndDateTimes[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Event newEvent \u003d new Event(descriptionAndDateTimes[0], startAndEndDateTimes[0], startAndEndDateTimes[1]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(newEvent);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayAddedTask(newEvent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void dukeReply(String reply) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String enclosingLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String indentedReply \u003d reply.replaceAll(\"\\n\", \"\\n     \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        System.out.println(enclosingLine + \"\\n     \" + indentedReply + \"\\n\" + enclosingLine);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 119,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // TODO: change to dateTime"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String startDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String endDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Event(String description, String startDateTime, String endDateTime) throws InvalidTaskException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Description cannot be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (startDateTime.isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Start time cannot be blank\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (endDateTime.isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"End time cannot be blank\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(errorMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // TODO: display \"date startTime-endTime\" if same day, else \"startDateTime - endDateTime\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[E]\" + super.getInfo() + \"(at: \" + startDateTime + \"-\" + endDateTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 46
    }
  },
  {
    "path": "src/main/java/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class InvalidTaskException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public InvalidTaskException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 7
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected abstract void validate() throws InvalidTaskException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getter/setters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 34
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Todo(String description) throws InvalidTaskException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(\"Description cannot be blank\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[T]\" + super.getInfo();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 27
    }
  }
]
