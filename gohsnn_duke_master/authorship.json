[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "run {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "run {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "test {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 40,
      "-": 11
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "T | 0 | submit GER quiz"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 1
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns the dialog box belonging to Duke, which is flipped in direction from that of the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param text response from Duke"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param img representing Duke on the chat bot"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return DialogBox belonging to Duke"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 66
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Initialises a new Duke object including new objects such as storage, ui and task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param filePath a String containing the file path of the input file where data is stored and loaded from"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Runs Duke object to start the chat bot. This method will call on other methods to load previously saved"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * information."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            } catch (IOException e2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                System.out.println(\"Something went wrong: \"  + e2.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        new Duke(\"../duke/data/duke.txt\").run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (DukeException | IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return ui.printLine(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gohsnn": 70,
      "-": 5
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Duke duke \u003d new Duke(\"../duke/data/duke.txt\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 28
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/CutePikachu.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/PatrickStar.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class represents a specific command of adding a task to Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DateException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String[] allDetails;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String processedDetails \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String deadlineErrorMsg \u003d \"Please write the deadline such as 29/2/2019 1800 and resubmit the command\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String eventErrorMsg \u003d \"Please write the event timing such as 29/2/2019 1800-2000 and resubmit the command\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private int clashingEvent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Loads the entire input command into the object for further processing of its details, such as"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * type of task added and other details (e.g. description and time)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param allDetails a String array containing all the details to create the appropriate task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public AddCommand(String[] allDetails) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.allDetails \u003d allDetails;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        for (int i \u003d 1; i \u003c allDetails.length; i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            processedDetails +\u003d allDetails[i] + \" \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Executes the command to generate the correct task to be added into memory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param tasks contains the data structure of Tasks stored in Duke"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param ui contains methods dealing with interaction with the user"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param storage contains methods to load and save information in the file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (allDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"Oops! The description of your Task cannot be empty.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return generateAddedTask();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Checks for the type of task that has been added and passes along processed String of information"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * containing details about the task for the task to be created."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return String containing the task that has been added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String generateAddedTask()  throws DukeException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String commandWord \u003d allDetails[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (commandWord.equals(\"todo\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return toDoTask();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (commandWord.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String[] details \u003d processedDetails.split(\"/by\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            checkDetailsPresent(details);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return deadlineTask(details);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String[] details \u003d processedDetails.split(\"/at\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            checkDetailsPresent(details);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return eventTask(details);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private void checkDetailsPresent(String[] details) throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (details.length \u003c 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(deadlineErrorMsg);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Creates a TD object and adds it into memory."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String toDoTask() throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ToDo newTodo \u003d new ToDo(processedDetails);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.tasks.addTask(newTodo);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return printAddedTask(newTodo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Creates a deadlineTask and adds it into memory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * If command does not include a deadline, then user is prompted to enter the command again."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String deadlineTask(String[] details) throws DukeException, IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] time \u003d details[1].trim().split(\" \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String formattedTime \u003d processDeadlineTime(time);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(details[0].trim(), formattedTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.tasks.addTask(newDeadline);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return printAddedTask(newDeadline);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Checks if there is sufficient information to create the time of the newly added deadline."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param deadlineTime containing the information about the date for the Deadline Task"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return String containing some details needed to create a Deadline task"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String processDeadlineTime(String[] deadlineTime) throws DukeException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (deadlineTime.length \u003c 2) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(deadlineErrorMsg);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return createDeadlineTime(deadlineTime);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Produces a formatted String that is used in creation of a Deadline Task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param deadlineTime containing the information about the date for the Deadline Task"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return String containing some details needed to create a Deadline task"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String createDeadlineTime(String[] deadlineTime) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return DateTime.getDate(deadlineTime[0]) + DateTime.getTime(deadlineTime[1]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (DateException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(e.getMessage() + deadlineErrorMsg);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Creates an Event object and adds it into memory."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * If command does not include a timing, then user is prompted to enter the command again."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String eventTask(String[] details) throws DukeException, IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] eventTime \u003d details[1].trim().split(\" \");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String formattedTime \u003d processEventTime(eventTime);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        detectAnomalies(formattedTime);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Event newEvent \u003d new Event(details[0].trim(), formattedTime);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.tasks.addTask(newEvent);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Storage.save(tasks);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return printAddedTask(newEvent);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Checks if there is sufficient information to create the time of the newly added Event."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param eventTime containing the information about the date for the Event Task"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return String containing some details needed to create a Event task"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String processEventTime(String[] eventTime) throws DukeException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (eventTime.length \u003c 2) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(eventErrorMsg);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String[] hoursMin \u003d eventTime[1].split(\"[-]\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            if (hoursMin.length \u003c 2) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                throw new DukeException(eventErrorMsg);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                return createEventTime(eventTime, hoursMin);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Produces a formatted String that is used in creation of an Event task."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param eventTime containing the information about the date for the Event task"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param hoursMin containing the information about the time for the Event task"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return String containing some details needed to create a Event task"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String createEventTime(String[] eventTime, String[] hoursMin) throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return DateTime.getDate(eventTime[0]) + DateTime.getTime(hoursMin[0]) + \"-\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    + DateTime.getTime(hoursMin[1]);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (DateException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(e.getMessage() + \" \" + eventErrorMsg);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Checks if the event clashes with another previously saved event and advises the user as such."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param formattedTime String containing information about the time of the event the user has just input"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown if there is a clashing event in memory"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private void detectAnomalies(String formattedTime) throws DukeException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] dateAndTime \u003d formattedTime.split(\"[,]\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String date \u003d dateAndTime[0].trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String timeToTime \u003d dateAndTime[1].trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        boolean isNotClashing \u003d noDateClashes(date, timeToTime);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (!isNotClashing) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"This event clashes with another in your list: \" + \"\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    + tasks.getTask(clashingEvent + 1).toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Checks first if the event the user entered has the same date as a previously saved event. If yes, another"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * method will be called to check if there is an overlap in the timings."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param date String containing the day of the new event"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param timeToTime String containing the time of the new event (in this format: 6.30pm-7pm)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return boolean that determines whether there are existing clashes"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private boolean noDateClashes(String date, String timeToTime) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d this.tasks.getAllTasks();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        boolean isNotClashing \u003d true;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        for (Task task : allTasks) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                String[] eventTimeArr \u003d ((Event) task).getEventTime().split(\"[,]\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                if (eventTimeArr[0].trim().equals(date)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    isNotClashing \u003d noTimeClashes(timeToTime, index);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    if (!isNotClashing) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return isNotClashing;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Checks if there is clash in the timings of the newly added event and existing events in memory."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param timeToTime String containing the time of the newly added event"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param index of first Event in the list that shares the same day as the newly added event"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return boolean that determines whether there are existing clashes"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private boolean noTimeClashes(String timeToTime, int index) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] newEventTime \u003d timeToTime.split(\"-\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        double newEventTime1 \u003d processTime(newEventTime[0]);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        double newEventTime2 \u003d processTime(newEventTime[1]);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Event targetEvent \u003d (Event) this.tasks.getAllTasks().get(index);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] targetEventTime \u003d targetEvent.getEventTime().split(\",\")[1].split(\"-\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        double targetTime1 \u003d processTime(targetEventTime[0]);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        double targetTime2 \u003d processTime(targetEventTime[1]);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (newEventTime1 \u003c\u003d targetTime1 \u0026\u0026 newEventTime2 \u003e targetTime1) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            clashingEvent \u003d index;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (newEventTime1 \u003e\u003d targetTime1 \u0026\u0026 newEventTime1 \u003c\u003d targetTime2) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            clashingEvent \u003d index;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Converts time descriptions saved in Duke (e.g. \"23rd of March 2019, 6pm-7pm\") into numbers for comparison to"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * check for clash in timings."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param time String containing the time saved in Duke"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return double containing the same time in military format"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private double processTime(String time) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int length \u003d time.length();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String suffix \u003d time.substring(length - 2, length);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        double timeNum \u003d Double.parseDouble(time.substring(0, length - 2));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (suffix.equals(\"am\") \u0026\u0026 timeNum \u003d\u003d 12) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (suffix.equals(\"pm\")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return timeNum + 12;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return timeNum;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Prints the task that was just added to the list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param task the Task to be printed after it has been added"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String printAddedTask(Task task) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int numTasks \u003d this.tasks.totalNumTasks();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return this.ui.printLine(\"Got it. I\u0027ve added this task:\" + \"\\n\" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                + \"Now you have \" + numTasks + \" tasks in the list.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 310
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This abstract class of Command contains the methods execute(...) and isExit() which are implemented in its child"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * classes, where each is a more specific command parsed from the inputs to Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 21
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class represents a specific command of deleting a task from Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private int taskToBeDeleted;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.taskToBeDeleted \u003d taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Removes the target task from the list and prompts the user the number of remaining tasks saved."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param tasks contains the data structure of Tasks stored in Duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param ui contains methods dealing with interaction with the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param storage contains methods to load and save information in the file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int maxNum \u003d tasks.totalNumTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (taskToBeDeleted \u003e maxNum) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"Oops! This task number does not exist.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Task deleted \u003d tasks.delTask(taskToBeDeleted);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            maxNum \u003d tasks.totalNumTasks();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Storage.save(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return ui.printLine(\"Noted. I\u0027ve removed this task:\" + \"\\n\" + deleted.toString() + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                            + \"Now you have \" + maxNum + \" tasks in the list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 49
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class represents a specific command of marking a task in Duke as done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private int taskToBeDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.taskToBeDone \u003d taskNum;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Marks the target task as done and prompts the user which task has been marked done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param tasks contains the data structure of Tasks stored in Duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param ui contains methods dealing with interaction with the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param storage contains methods to load and save information in the file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int maxNum \u003d tasks.totalNumTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (taskToBeDone \u003e maxNum) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"Oops! This task number does not exist.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Task targetTask \u003d tasks.getTask(taskToBeDone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            targetTask.markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Storage.save(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return ui.printLine(\"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + targetTask.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class represents a specific command of exiting from Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Prints the exit line from Duke and closes the chat bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param tasks contains the data structure of Tasks stored in Duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param ui contains methods dealing with interaction with the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param storage contains methods to load and save information in the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return ui.printLine(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 31
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class represents a specific command of finding a particular task in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Processes the keyword that has been input into Duke chat bot."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param keyword that the user has input to search all his tasks for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Executes command to search for tasks with that specific keyword and return all matching tasks to the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param tasks contains the data structure of Tasks stored in Duke"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param ui contains methods dealing with interaction with the user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param storage contains methods to load and save information in the file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        findAllMatches();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return printAllMatches();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Searches for tasks with that specific keyword."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void findAllMatches() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d tasks.getAllTasks();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        for (Task task : allTasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String taskDescription \u003d task.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String[] splitWords \u003d taskDescription.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            for (String word : splitWords) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                if (word.trim().equals(keyword)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    matchedTasks.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Prints all the tasks that match the keyword given by the user. If there are no matching tasks,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * the user will be advised as such."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String printAllMatches() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (matchedTasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String printedLines \u003d \"Here are the matching tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            int index \u003d 1;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            for (Task task : matchedTasks) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                printedLines +\u003d index + \".\" + task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return this.ui.printLine(printedLines.trim());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return this.ui.printLine(\"Oops, there are no tasks with that keyword!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 82
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class represents a specific command of listing tasks stored in Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Prints all the tasks that is stored in Duke at that point in time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param tasks contains the data structure of Tasks stored in Duke"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param ui contains methods dealing with interaction with the user"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param storage contains methods to load and save information in the file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String printedLines  \u003d \"Here are the tasks in your list:\" + \"\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int maxNum \u003d tasks.totalNumTasks();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d maxNum; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            printedLines +\u003d i + \".\" + tasks.getTask(i) + \"\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return ui.printLine(printedLines.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 35
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This exception is thrown when there is error in the input for dates and times regarding the Deadline and Event tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DateException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public DateException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This exception is thrown when there is any general error to the input commands to the Duke chat bot."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 11
    }
  },
  {
    "path": "src/main/java/duke/managers/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class contains methods to process Dates and Times entered into Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String[] daySuffix \u003d {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\", \"st\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    };"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String[] monthName \u003d {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \"January\", \"February\", \"March\", \"April\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \"May\", \"June\", \"July\", \"August\", \"September\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \"October\", \"November\", \"December\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public DateTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns the date in the desired convention."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param date a String containing the date that was in the command to Duke"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DateException if the month number is invalid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static String getDate(String date) throws DateException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] splitDate \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String dd \u003d addDaySuffix(splitDate[0]) + \" of \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String mm \u003d wordMonth(splitDate[1]) + \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String yy \u003d splitDate[2] + \", \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return dd + mm + yy;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Adds the suffix for the day in the date String. It is used in the getDate method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param day a String containing the day number"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String addDaySuffix(String day) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int dayNum \u003d Integer.parseInt(day);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return day + daySuffix[dayNum - 1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Changes the month number to its name in the date String. It is used in the getDate method."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param month a String containing the month number"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DateException if the month number is invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String wordMonth(String month) throws DateException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int monthNum \u003d Integer.parseInt(month);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (monthNum \u003e 12) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DateException(\"Invalid month entered!\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return monthName[monthNum - 1];"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns the time in the desired convention."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param time a String containing the time in military format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DateException if the month number is invalid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static String getTime(String time) throws DateException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        assert time.length() \u003d\u003d 4 : \"Time invalid\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String hours \u003d time.substring(0,2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String timeString \u003d getHours(hours) + getMinutes(time.substring(2,4));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (Integer.parseInt(hours) \u003c 12) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return timeString + \"am\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return timeString + \"pm\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns the hour component of time. It is used in the getTime method."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param hours a String containing the hour number"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DateException if the month number is invalid"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String getHours(String hours) throws DateException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int hourNum \u003d Integer.parseInt(hours);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (hourNum \u003e 24) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DateException(\"Invalid time entered!\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            hourNum \u003d hourNum % 12;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            if (hourNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                return \"12\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                return hourNum + \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns the minute component of time. It is used in the getTime method."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param minutes a String containing the minute number"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DateException if the month number is invalid"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String getMinutes(String minutes) throws DateException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int minNum \u003d Integer.parseInt(minutes);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (minNum \u003e 60) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DateException(\"Invalid time entered!\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (minNum \u003e 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return \".\" + minutes;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 118
    }
  },
  {
    "path": "src/main/java/duke/managers/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class deals with making sense of the user command. Commands are processed individually and specifically."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Generates and returns the corresponding command according to the entire String that has been taken"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * in."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param c a String containing the unprocessed input command to Duke"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static Command parse(String c) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] comm \u003d c.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String key \u003d comm[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        assert !c.isEmpty() : \"No command was given to Duke!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (key.equals(\"delete\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(comm[1]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (key.equals(\"find\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return new FindCommand(comm[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (key.equals(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            assert !comm[1].isEmpty() : \"No task number provided for deletion!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return new DoneCommand(Integer.parseInt(comm[1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (key.equals(\"list\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (key.equals(\"bye\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (comm[0].equals(\"todo\") || comm[0].equals(\"deadline\") || comm[0].equals(\"event\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return new AddCommand(comm);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"Oops! I\u0027m sorry, but I don\u0027t know what that means :(\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 51
    }
  },
  {
    "path": "src/main/java/duke/managers/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This method deals with loading tasks from the file and saving tasks in the file. It contains methods that process"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * the information to and from the hard disk to the existing memory of the Duke chat bot."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static ArrayList\u003cTask\u003e memory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Loads previously saved information on the hard disk when Duke starts."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception DukeException is thrown when there is an error with the location where the information was stored"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            Scanner s \u003d new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                Task newTask \u003d loadStringToTask(s.nextLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                memory.add(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"File not found. A new TaskList will be loaded.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return memory;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Converts the Task in the form it was saved into the hard drive to a Task object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param taskString a String read from the hard disk to be processed into a task"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static Task loadStringToTask(String taskString) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] allInfo \u003d taskString.split(\"[|]\", 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (taskString.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return remakeTodo(allInfo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else if (taskString.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            allInfo \u003d taskString.split(\"[|]\", 5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return remakeDeadline(allInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            allInfo \u003d taskString.split(\"[|]\", 7);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            return remakeEvent(allInfo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Generates the TD task that was loaded from the hard drive."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param info a String[] containing information to remake the task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static ToDo remakeTodo(String[] info) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        ToDo ret \u003d new ToDo(info[2].trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (info[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            ret.recordDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Generates the Deadline task that was loaded from the hard drive."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param info a String[] containing information to remake the task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static Deadline remakeDeadline(String[] info) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Deadline ret \u003d new Deadline(info[2].trim(), info[3].trim());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (info[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            ret.recordDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Generates the Event task that was loaded from the hard drive."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param info a String[] containing information to remake the task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static Event remakeEvent(String[] info) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Event ret \u003d new Event(info[2].trim(), info[3].trim());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (info[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            ret.recordDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Saves the updated list into the hard drive. If there is nothing in the memory, an empty string is added into"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * the hard disk."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static void save(TaskList allTasks) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        memory \u003d allTasks.getAllTasks();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (memory.size() \u003e 0) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            String text \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            for (Task task : memory) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    ToDo spec \u003d (ToDo) task;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    text \u003d spec.format();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    Deadline spec \u003d (Deadline) task;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    text \u003d spec.format();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    Event spec \u003d (Event) task;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                    text \u003d spec.format();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                text +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            writeToFile(filePath, text.trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            writeToFile(filePath, \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Overwrites the information from Duke to the hard disk. This is done to automatically update all"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * tasks in the hard disk."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param filePath a String containing the location of the saved file"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param textToAdd a String containing all information processed from the memory stored in Duke"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @exception IOException is thrown when there is an error saving the data in the hard disk"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static void writeToFile(String filePath, String textToAdd) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 149
    }
  },
  {
    "path": "src/main/java/duke/managers/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class contains the task list and methods to manipulate the list of tasks: generating the number of tasks in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * memory, adding tasks or deleting tasks."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private static ArrayList\u003cTask\u003e allTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Loads previously stored information in the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param loadedTasks a data structure containing the tasks stored"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @throws DukeException is thrown when there are no tasks to be loaded"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e loadedTasks) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (loadedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"No tasks to load. A new TaskList will be created.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            this.allTasks \u003d loadedTasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Generates an empty list of tasks in the case when there are no previously saved tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        allTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasks() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return allTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public int totalNumTasks() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return allTasks.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Task getTask(int taskNum) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return allTasks.get(taskNum - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Task delTask(int taskNum) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return allTasks.remove(taskNum - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        allTasks.add(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 57
    }
  },
  {
    "path": "src/main/java/duke/managers/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This class deals with the interactions with the user. It contains methods to return responses to the user when"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * the user gives an input."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.managers;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    static Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static void showLoadingError() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        System.out.println(\"No tasks to load. A new TaskList will be created.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static void showWelcome() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        System.out.println(\"Hello I\u0027m Duke.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static void showError(String errorMessage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        System.out.println(errorMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Prints formatted dotted line to differentiate between user input and responses generated from Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static void showLine() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String border \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        for (int i \u003d 0; i \u003c 80; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            border +\u003d \"-\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        System.out.println(border);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * This method takes in the entire line of command for Duke to process."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public static String readCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * This method prints the message for the user to read."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @param string containing the response to the user\u0027s input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String printLine(String string) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return string;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 56
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This child class of Task contains the same attributes as its parent class but with an additional field (the deadline"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * of that task, which is stored as \u0027by\u0027)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String formatted \u003d \"D | \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int binary \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (super.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            binary \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        formatted +\u003d binary + \" | \" + super.description + \" | \" + this.by;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return formatted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 32
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This child class of Task contains the same attributes as its parent class but with an additional field (the timing of"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * that event, which is stored as \u0027eventTime\u0027)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    private String eventTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Event(String description, String eventTime) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.eventTime \u003d eventTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + eventTime + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String formatted \u003d \"E | \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        int binary \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (super.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            binary \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        formatted +\u003d binary + \" | \" + super.description + \" | \" + this.eventTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return formatted;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String getEventTime() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return this.eventTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 35
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * A child class of Object which contains the description of the Task and whether the Task has been done."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns the corresponding icon to determine if a task is done or not."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * @return String that represents whether the task has been marked as done"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return (isDone ? \"Done\" : \"X\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * This method changes the task to be done when the task has yet to be done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void markAsDone() throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (this.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            throw new DukeException(\"This task has already been done!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * This method records the loaded task as done."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void recordDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * Returns an empty String as it will be overridden in its child classes for more specific format of"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     * each type of task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 67
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " * This child class of Task contains the same attributes as its parent class."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public String format() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String formatted \u003d \"T | \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String binary \u003d \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        if (super.isDone \u003d\u003d true) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            binary \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        formatted +\u003d binary + \" | \" + super.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        return formatted;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 28
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DateException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.DateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.managers.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    DateTime dt \u003d new DateTime();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    /* this is the naming convention for the features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void featureUnderTest_testScenario_expectedBehaviour() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void dateTimeFormatting_dateGiven_dateFormatReturned() throws DateException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        assertEquals(\"12th of December 2019, \", dt.getDate(\"12/12/2019\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    public void addCommand_commandGiven_taskAddedInRequiredFormat() throws IOException, DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String addInstruction \u003d \"todo return book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        String[] details \u003d addInstruction.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        AddCommand newAdd \u003d new AddCommand(details);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Storage storage \u003d new Storage(\"./tasks.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        newAdd.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        Task addedTask \u003d storage.load().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "        assertEquals(\"[T][X] return book \", addedTask.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 43
    }
  },
  {
    "path": "src/test/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "T | 0 | return book "
      }
    ],
    "authorContributionMap": {
      "gohsnn": 1
    }
  },
  {
    "path": "tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "T | 0 | return book "
      }
    ],
    "authorContributionMap": {
      "gohsnn": 1
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "Hello! Im Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "[T][?] return book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "1. [T][N] return book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "Bye. Hope to see you again soon!"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 8
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 3
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohsnn"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohsnn"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "gohsnn": 21
    }
  }
]
