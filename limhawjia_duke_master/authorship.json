[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    mainClassName \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveVersion \u003d \"1.0.0\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            srcDirs \u003d [\"src/test/java\"]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "test {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    failFast \u003d true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "run {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "task runconsole(type: JavaExec) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    classpath \u003d sourceSets.main.runtimeClasspath"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    main \u003d \"duke.Duke\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    args(\"console\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 62,
      "-": 14
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Welcome to Duke, a star wars themed task manager to help you keep on top of  your tasks. Duke utilizes a chatbot"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "interface to make your experience more immersive. Take on the role as young Anakin Skywalker and get help from the"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Jedi Master Yoda in completing your tasks. Be careful though, Darth Vader might appear if you have more than 10"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "uncompleted tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### Add various tasks"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The application hosts a wide range of tasks to suit your needs. "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. To-dos - non-urgent tasks with no deadlines"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "2. Events - tasks that occur at a specfic time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "3. Deadlines - urgent tasks that need to be completed by a specific time"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "4. Do-afters - tasks that can only be done after a specific time, like catching a soon to be released movie"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "5. Do-within - not-as-urgent tasks that can be done within a time frame."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### Natural language"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "This application allows you to key in your date and time arguments without having to follow a fixed format or with"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "flags. Type the task as how you would say it in your head. For example, \"event meet John for dinner mon 1930\" is a"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "valid command. Just remember to put your date time arguments at the back of your command. Experiment with what the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "application can understand!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Some recognized  date and time patterns:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. monday/mon"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "2. tuesday/tues/tue"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "3. wednesday/wed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "4. thursday/thurs/thur/thu"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "5. friday/fri"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "6. saturday/sat"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "7. sunday/sun"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "8. today/tomorrow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "9. [datetime] to [datetime]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "10. [datetime] [datetime]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "11. [date] [time]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "For more specific date and times, use the format [dd/mm/yyyy] [hhmm] e.g. ```12/02/2020 0900```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### Undoing commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The application lets you undo commands that you may have accidentally entered. Simply type ```undo``` and all the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "changes made by the previous command will instantly be reverted. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### Sorting tasks"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The application lets you sort your tasks according to two criterion ```date``` and ```time```. Sort by date to see"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "which of your tasks are more urgent and sort by name to find specific tasks more easily. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### Interactivity"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Fully immerse yourself in the star wars theme of our application by chatting to the likes of Master Yoda and Darth "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Vader. Endure Master Yoda\u0027s nagging as your uncompleted tasks start to pile up but be careful not to stray to far to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "the dark side."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### Other neat tricks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "You can delete all your tasks at once by entering the command ```delete all``` instead of deleting them one by one. You"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "can also search for specific tasks using the ```find [parameter]``` command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `help` - open guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Opens an in-app guide describing all the available commands."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `todo` - add todo"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Adds a to-do your current list of tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`todo [description]`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`todo bake a cake`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `deadline` - add deadline"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Adds a deadline to your current list of tasks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`deadline [description] [date] [time] (optional)`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`deadline final project 02/11/2019 2359`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `event` - add event"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Adds an event to your current list of tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`event [description] [date] [time] (optional)`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`event movie fri`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `after` - add do-after"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Adds a do-after task to your current list of tasks"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`after [description] [date] [time] (optional)`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`after visit pc fair thursday 0900`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `within` - add do-within"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Adds a do-within task to your current list of tasks"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`within [description] [date] [time] (optional) to (optional) [date] [time] (optional)`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`within do laundry tues 1500 tues 1800`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `list` - lists tasks"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Lists all your tasks"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `done` - mark task as done"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Marks a task as done based on the index  at which it was displayed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`done [index]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `delete` - delete task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Delete a task baed on the index at which it was displayed or delete all tasks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`delete [index]` `delete all`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `sort` - sort tasks"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Sort your tasks based on certain criteria"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`sort name` `sort date`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `undo` - undo"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Reverts changes made by your previous command"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "### `bye` - exit"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Exits the application"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limhawjia": 158,
      "-": 13
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 duke.command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@rem Get duke.command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@rem Slurp the duke.command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@rem Setup the duke.command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4,
      "-": 80
    }
  },
  {
    "path": "src/main/java/duke/CommandExecutor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class used by the program to execute commands. It keeps a history of UndoActions to revert any changes made"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * by the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandExecutor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Stack\u003cUndoAction\u003e undoActions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandExecutor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.undoActions \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Executes the command and adds its correpsonding UndoAction to memory if it exists."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param command the command to be executed by the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if the ui fails unexpectedly."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void executeCommand(Command command) throws UiException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        command.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        command.getUndoAction().ifPresent(undoActions::push);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the latest UndoAction to revert the latest changes made by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the latest UndoAction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UndoAction getLatestUndoAction() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.undoActions.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.undoActions.pop();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 41
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.bye.ByeCommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.creation.AddCommandFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.creation.MainCommandFactory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.creation.UndoCommandFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.delete.DeleteCommandProducer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.done.DoneCommandProducer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.find.FindCommandProducer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.help.HelpCommandProducer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.list.ListCommandProducer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.sort.SortCommandProducer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.DefaultTaskRepo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.ITaskRepo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandProducerRegisterException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiDriver;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.strings.ErrorMessageFormatter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Main driver class for Duke task manager program."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Duke implements UiDriver {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MainCommandFactory mainCommandFactory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Program entry point."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param args program arguments"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean isGuiEnabled;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            isGuiEnabled \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (args.length \u003d\u003d 1 \u0026\u0026 args[0].equals(\"-c\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            isGuiEnabled \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"Invalid program arguments.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DukeOptions options \u003d OptionsFactory.select(isGuiEnabled, true, duke);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            duke.configure(options);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Unable to configure application.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Starts the program."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(\"Program starting...\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui.initializeUi();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UiInitializationException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Failed to initialize ui.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Configures the main driver with a set of customizable options."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param options the program\u0027s runtime options"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void configure(DukeOptions options) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initialize UI component"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d options.getUiController();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initialize tasks and storage"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Storage storage \u003d options.getStorage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ITaskRepo model \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d new TasksController(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController.registerUi(this.ui.getUiOutputAccessor());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandExecutor \u003d new CommandExecutor();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Initialize command factory"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.mainCommandFactory \u003d intializeCommandFactory();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void receiveUserInput(String input) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Get command and execute"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Optional\u003cCommand\u003e command \u003d this.mainCommandFactory.getCommandFromUserInput(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (command.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.commandExecutor.executeCommand(command.get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ui.displayOutput(ErrorMessageFormatter.formatErrorMessage(\"Please enter a valid command.\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CommandCreationException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.handleCommandCreationExceptions(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UiException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Ui stopped working.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void handleCommandCreationExceptions(CommandCreationException error) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.ui.displayOutput(ErrorMessageFormatter.formatErrorMessage(error.getMessage()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UiException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Ui stopped working.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private MainCommandFactory intializeCommandFactory() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        MainCommandFactory mainFactory \u003d new MainCommandFactory();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // register CommandProducers"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new ByeCommandProducer(this.ui));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new DeleteCommandProducer(this.tasksController));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new ListCommandProducer(this.tasksController));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new SortCommandProducer(this.tasksController));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new DoneCommandProducer(this.tasksController));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new FindCommandProducer(this.tasksController));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainFactory.registerCommandProducer(new HelpCommandProducer(this.ui));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CommandProducerRegisterException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"FATAL: Unable to register command producer.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // create factories"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        AddCommandFactory addCommandFactory \u003d new AddCommandFactory(this.tasksController);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UndoCommandFactory undoCommandFactory \u003d new UndoCommandFactory(this.commandExecutor, this.ui);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // register factories"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mainFactory.registerCommandFactory(addCommandFactory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mainFactory.registerCommandFactory(undoCommandFactory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return mainFactory;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 161,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeOptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An interface to encapsulate potential runtime configurations for the Duke program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface DukeOptions {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a UiController that handles user input and displaying of the program output."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a UiController instance to handle I/O."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Ui getUiController();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a Storage instance that handles reading and writing of data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the Storage instance to be used for reading and writing data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Storage getStorage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "src/main/java/duke/OptionsFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.FileSystemStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.InMemStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiControllerFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiDriver;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * A factory class to generate duke runtime options. The DukeOptions instance created will encapsulate all the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * dependencies needed for the program to run."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OptionsFactory {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String getDefaultStorageFilePath() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return System.getProperty(\"user.home\") + \"/Duke/tasks.DAT\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Generates options based on custom parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param isGuiEnabled to enable JavaFx gui"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param isPersistentDataEnabled to enable changes to be stored in local memory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return DukeOptions object encompassing all the runtime configurations."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static DukeOptions select(boolean isGuiEnabled, boolean isPersistentDataEnabled, UiDriver driver) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Setup UiController"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (isGuiEnabled) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui \u003d UiControllerFactory.createUiController(driver, UiType.JAVAFX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ui \u003d UiControllerFactory.createUiController(driver, UiType.CLI);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Setup file storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (isPersistentDataEnabled) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage \u003d OptionsFactory.getPersistentStorage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return getOptions(ui, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Storage getPersistentStorage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Storage storage \u003d FileSystemStorage.getInstance(getDefaultStorageFilePath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"Storage file found.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"Unable to access storage file.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Starting the app without a persistent file storage.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return new InMemStorage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static DukeOptions getOptions(Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new DukeOptions() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public Ui getUiController() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return ui;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public Storage getStorage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return storage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 74,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface for commands to be executed by the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Carries out command execution logic."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if ui fails unexpectedly"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract void execute() throws UiException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a functional interface that undoes the actions carried out by this command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return optional of the functional interface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract Optional\u003cUndoAction\u003e getUndoAction() throws CommandNotExecutedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 24
    }
  },
  {
    "path": "src/main/java/duke/command/CommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An abstract class to encapsulate the process of parsing user input as arguments and producing a corresponding"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * command. Each CommandProducer is responsible for parsing the arguments in a way that is required by the Command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * class that it is trying to produce. Each CommandProducer MUST be registered as a dependency in CommandFactory"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * for it to be utilized by the program. The CommandFactory will compare the first word of each user input to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the list of CommandProducers to find the corresponding one to generate the corresponding command. Each"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * CommandProducer registered in the CommandFactory MUST have a unique keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class CommandProducer {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected CommandProducer(String keyword) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the keyword used to map user inputs to this CommandProducer. The first word of each user input will"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * be treated as the keyword."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the keyword used to map the user input to this CommandProducer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getKeyword() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses the arguments following the keyword according to the requirements of the Command it is trying to produce"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * and returns an instance of that command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param arguments the remainder of the user input after the first word."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a command instance to be executed by the program."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract Command generateCommand(String arguments) throws CommandCreationException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 36
    }
  },
  {
    "path": "src/main/java/duke/command/UndoAction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Undoes a command\u0027s action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface UndoAction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean undo() throws UiException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 11
    }
  },
  {
    "path": "src/main/java/duke/command/add/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to add a new task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isSuccessful;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor for add command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksController the controller that will be responsible for adding the task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AddCommand(Task task, TasksController tasksController) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isExecuted \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if ui fails unexpectedly"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isSuccessful \u003d tasksController.addTask(task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isExecuted \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns UndoAction to remove the added task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return Optional of UndoAction that is always present"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() throws CommandNotExecutedException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!isExecuted) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandNotExecutedException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isSuccessful) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(() -\u003e tasksController.deleteTaskByUuid(task.getUuid()) !\u003d null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 60
    }
  },
  {
    "path": "src/main/java/duke/command/bye/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.bye;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to exit the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ByeCommand(Ui ui) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Closes ui interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if ui fails unexpectedly"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui.stopUi();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Always returns empty optional."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return empty optional"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/duke/command/bye/ByeCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.bye;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ByeCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ByeCommandProducer(Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"bye\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(\"This command does not accept arguments.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ByeCommand(ui);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 24
    }
  },
  {
    "path": "src/main/java/duke/command/creation/AddCommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.add.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.creation.TaskFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.strings.CommandSplitter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class AddCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskFactory taskFactory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public AddCommandFactory(TasksController tasksController) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e getCommandFromUserInput(String input) throws CommandCreationException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String keyword \u003d CommandSplitter.getCommand(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String arguments \u003d CommandSplitter.getArguments(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTask\u003e task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            task \u003d this.taskFactory.getTask(keyword, arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }  catch (TaskCreationException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (task.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(new AddCommand(task.get(), tasksController));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 42
    }
  },
  {
    "path": "src/main/java/duke/command/creation/CommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An interface to represent a factory class that is in charge of producing corresponding commands for the program"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to execute based on user inputs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface CommandFactory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses user input to return an executable command instance for the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an executable command instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e getCommandFromUserInput(String input) throws CommandCreationException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 19
    }
  },
  {
    "path": "src/main/java/duke/command/creation/MainCommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandProducerRegisterException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.strings.CommandSplitter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory to generate commands to be executed by the program from user inputs. To enable a command to be generated,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * its corresponding CommandProducer MUST be registered in the factory using the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * registerCommandProducer(CommandProducer producer) method. The factory maps the first word of the user\u0027s input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to the keyword of the CommandProducer and invokes it to generate the corresponding Command instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class MainCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cCommandFactory\u003e commandFactories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private HashMap\u003cString, CommandProducer\u003e commandProducerHashMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public MainCommandFactory() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandFactories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandProducerHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Registers a CommandProducer instance with the factory. If user input\u0027s first word matches the CommandProducer,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the CommandProducer will be invoked to create the next Command instance to be executed by the program. Each"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * registerd CommandProducer MUST have a unique keyword."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param producer the CommandProducer instance to be registered."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void registerCommandProducer(CommandProducer producer) throws CommandProducerRegisterException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String keyword \u003d producer.getKeyword();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.commandProducerHashMap.containsKey(keyword)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandProducerRegisterException(\"Cannot register CommandProducer as its \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"keyword already exists.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandProducerHashMap.put(keyword, producer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Registers other CommandFactory instances that would be used to create commands before checking against the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * internal CommandProducer hashmap. This allows other commands with more complicated instantiation logic to be"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * produced in another factory but still be created by the program."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param factory the CommandFactory instance to be added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void registerCommandFactory(CommandFactory factory) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandFactories.add(factory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses a user\u0027s input and produces a corresponding Command instance to be executed. A user input\u0027s first word"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * would have to correspond to they keyword of a command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input the user input to be parsed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the command instance to be executed by the program."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CommandCreationException if user input is an invalid command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e getCommandFromUserInput(String input) throws CommandCreationException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cCommand\u003e command \u003d this.getCommandFromFactories(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (command.isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.getCommandFromCommandProducers(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Optional\u003cCommand\u003e getCommandFromFactories(String input) throws CommandCreationException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (CommandFactory factory : this.commandFactories) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Optional\u003cCommand\u003e command \u003d factory.getCommandFromUserInput(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (command.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Optional\u003cCommand\u003e getCommandFromCommandProducers(String input) throws CommandCreationException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String commandKeyword \u003d CommandSplitter.getCommand(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String arguments \u003d CommandSplitter.getArguments(input);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CommandProducer matchingProducer \u003d this.commandProducerHashMap.get(commandKeyword);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (matchingProducer \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(matchingProducer.generateCommand(arguments));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 100
    }
  },
  {
    "path": "src/main/java/duke/command/creation/UndoCommandFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.CommandExecutor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.strings.CommandSplitter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UndoCommandFactory implements CommandFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UndoCommandFactory(CommandExecutor commandExecutor, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cCommand\u003e getCommandFromUserInput(String input) throws CommandCreationException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!CommandSplitter.getCommand(input).equals(\"undo\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!CommandSplitter.getArguments(input).equals(\"\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(\"Undo command does not accept arguments.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UndoAction undoAction \u003d this.commandExecutor.getLatestUndoAction();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (undoAction \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(\"You have no actions to undo.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Command undoCommand \u003d new Command() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public void execute() throws UiException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                UndoCommandFactory.this.ui.displayOutput(\"Noted. I have undone your latest action.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                undoAction.undo();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            public Optional\u003cUndoAction\u003e getUndoAction() throws CommandNotExecutedException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.of(undoCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 55
    }
  },
  {
    "path": "src/main/java/duke/command/delete/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to delete a task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int deletedTaskIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean deleteAll;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Task deletedTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTask\u003e deletedTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DeleteCommand(int index, boolean deleteAll, TasksController tasksController) throws CommandCreationException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.deletedTaskIndex \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.deleteAll \u003d deleteAll;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isExecuted \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Attempts to delete the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if ui fails unexpectedly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.deleteAll) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.deletedTasks \u003d tasksController.deleteAllTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.isExecuted \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.deletedTask \u003d tasksController.deleteTask(deletedTaskIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isExecuted \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns UndoAction to add back the task if task was successfully deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return empty if task was not deleted successfully"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() throws CommandNotExecutedException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.isExecuted) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandNotExecutedException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.deleteAll \u0026\u0026 this.deletedTasks !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(() -\u003e tasksController.setNewTasks(deletedTasks));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.deleteAll \u0026\u0026 this.deletedTask !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(() -\u003e tasksController.addTaskToIndex(deletedTaskIndex, deletedTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 73
    }
  },
  {
    "path": "src/main/java/duke/command/delete/DeleteCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DeleteCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DeleteCommandProducer(TasksController tasksController) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"delete\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean deleteAll \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            index \u003d Integer.parseInt(arguments) - 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (arguments.equals(\"all\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                deleteAll \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new CommandCreationException(\"That is an invalid command for delete.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new DeleteCommand(index, deleteAll, tasksController);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "src/main/java/duke/command/done/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to mark tasks as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isSuccessful;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DoneCommand(int index, TasksController tasksController) throws CommandCreationException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets task to done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isSuccessful \u003d tasksController.setTaskToDone(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isExecuted \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns UndoAction to unmark task as done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return empty if task was not successfully marked"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() throws CommandNotExecutedException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.isExecuted) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandNotExecutedException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isSuccessful) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(() -\u003e tasksController.setTaskToUndone(index));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 52
    }
  },
  {
    "path": "src/main/java/duke/command/done/DoneCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.done;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DoneCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DoneCommandProducer(TasksController tasksController) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"done\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            index \u003d Integer.parseInt(arguments) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(\"Please enter a numerical argument.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new DoneCommand(index, tasksController);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 28
    }
  },
  {
    "path": "src/main/java/duke/command/find/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to find tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String parameter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    FindCommand(String parameter, TasksController tasksController) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.parameter \u003d parameter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Search for task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController.findTasks(this.parameter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Always returns empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return empty optional"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 40
    }
  },
  {
    "path": "src/main/java/duke/command/find/FindCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.find;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FindCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public FindCommandProducer(TasksController tasksController) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"find\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(\"Please enter a search parameter\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new FindCommand(arguments, this.tasksController);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 24
    }
  },
  {
    "path": "src/main/java/duke/command/help/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class HelpCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    HelpCommand(Ui ui) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.displayOutput(HelpDoc.HELP_DOC);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Always returns an empty optional."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an empty Optional."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 31
    }
  },
  {
    "path": "src/main/java/duke/command/help/HelpCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class HelpCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public HelpCommandProducer(Ui ui) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"help\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new HelpCommand(ui);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 20
    }
  },
  {
    "path": "src/main/java/duke/command/help/HelpDoc.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class HelpDoc {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static final String HELP_DOC \u003d \"Here is the full list of commands:\\n\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"Below are the commands to add various tasks. Feel free to use simple language\\n\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"like \u0027mon 2359\u0027 or \u0027thursday\u0027to specify the date. Adding a time is optional.\\n\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"If you require a more specific date or time, follow the format [dd/mm/yyyy hhmm].\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"1. todo [description] - adds a todo with no time restrictions\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"2. deadline [description] [datetime] - adds a deadline to be completed by a certain time\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"3. event [description] [datetime] - adds an event that occurs at a specific time\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"4. after [description] [datetime] - adds a doafter that is done after a certain time\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"5. within [description] [datetime] to [datetime] - adds a dowithin that is done within a timeframe\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"Below are other generic commands.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"1. bye - exits the program\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"2. delete [index] - deletes a task at a particular index\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"3. delete all - deletes all tasks\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"4. done [index] - marks a task as done at a particular index\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"5. list - lists all your tasks\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"6. sort date - sorts our tasks by date\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"7. sort name - sorts your tasks by name\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"8. undo - undo your previous action\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"May the force be with you.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 27
    }
  },
  {
    "path": "src/main/java/duke/command/list/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Command to list all tasks in memory."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TasksController tasksController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ListCommand(TasksController tasksController) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Display tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasksController.listTasks();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Always returns empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return empty optional"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/java/duke/command/list/ListCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ListCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ListCommandProducer(TasksController tasksController) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"list\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandCreationException(\"List does not accept arguments.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new ListCommand(tasksController);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 24
    }
  },
  {
    "path": "src/main/java/duke/command/sort/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.UndoAction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandNotExecutedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SortCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TaskSorts sortingMethod;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTask\u003e oldCopy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isExecuted;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SortCommand(TaskSorts sort, TasksController tasksController) throws CommandCreationException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.sortingMethod \u003d sort;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void execute() throws UiException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.oldCopy \u003d tasksController.sortTasks(sortingMethod);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isExecuted \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cUndoAction\u003e getUndoAction() throws CommandNotExecutedException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.isExecuted) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new CommandNotExecutedException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.oldCopy !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(() -\u003e tasksController.setNewTasks(oldCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 45
    }
  },
  {
    "path": "src/main/java/duke/command/sort/SortCommandProducer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.CommandProducer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TasksController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.command.CommandCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class SortCommandProducer extends CommandProducer {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController tasksController;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public SortCommandProducer(TasksController tasksController) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\"sort\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksController \u003d tasksController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Command generateCommand(String arguments) throws CommandCreationException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskSorts sortingMethod \u003d Arrays.stream(TaskSorts.values())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(sort -\u003e sort.keyword.equals(arguments))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .orElseThrow(() -\u003e new CommandCreationException(\"Please enter a valid argument.\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new SortCommand(sortingMethod, this.tasksController);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 27
    }
  },
  {
    "path": "src/main/java/duke/command/sort/TaskDateComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskDateComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return task1.getTaskTimeFrame().compareTo(task2.getTaskTimeFrame());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 12
    }
  },
  {
    "path": "src/main/java/duke/command/sort/TaskNameComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskNameComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return task1.getTaskDetails().compareTo(task2.getTaskDetails());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 12
    }
  },
  {
    "path": "src/main/java/duke/command/sort/TaskSorts.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.command.sort;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum TaskSorts {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    NAME(\"name\", new TaskNameComparator()),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DATE(\"date\", new TaskDateComparator());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final Comparator\u003cTask\u003e comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskSorts(String keyword, Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 18
    }
  },
  {
    "path": "src/main/java/duke/task/DefaultTaskRepo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskRepoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The default implementation of the TaskRepo required by the program to read and perform operations on the user\u0027s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * tasks. This default implementation reads and writes the user\u0027s tasks from a Storage instance. Each method call to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * retrieve task information by its clients will result in a read from the Storage instance. Each method call to update"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * task information will also result in a a direct write to the Storage instance."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DefaultTaskRepo implements ITaskRepo {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String INVALID_INDEX_MESSAGE \u003d \"Please enter a valid index\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DefaultTaskRepo(Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTask\u003e produceTaskListCopy(List\u003cTask\u003e originalList) throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e copy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (Task task : originalList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Task clone \u003d task.clone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            copy.add(clone);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getCurrentTasks() throws TaskRepoException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e storedTasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return produceTaskListCopy(storedTasks);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException | CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Failed to retrieve tasks.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setNewTasks(List\u003cTask\u003e tasks) throws TaskRepoException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasksToWrite \u003d this.produceTaskListCopy(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.writeTasks(tasksToWrite);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException | CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Failed to write tasks.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteAllTasks() throws TaskRepoException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            storage.writeTasks(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (StorageException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Failed to delete tasks.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public int getCurrentTasksCount() throws TaskRepoException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task getTaskFromListIndex(int index) throws TaskRepoException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return tasks.get(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e searchTasks(String parameter) throws TaskRepoException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String lowerCaseParameter \u003d parameter.toLowerCase();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(task -\u003e task.getTaskDetails().toLowerCase().contains(lowerCaseParameter))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteTask(int index) throws TaskRepoException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.setNewTasks(tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addTask(Task task) throws TaskRepoException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Task taskToAdd \u003d task.clone();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.add(taskToAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.setNewTasks(tasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Failed to add new task\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addTaskToIndex(int index, Task task) throws TaskRepoException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Task taskToAdd \u003d task.clone();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.add(index, taskToAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.setNewTasks(tasks);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Failed to add new task\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateTask(int index, Task task) throws TaskRepoException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Task taskToUpdate \u003d task.clone();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (task.getUniqueCharCode() !\u003d tasks.get(index).getUniqueCharCode()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new TaskRepoException(\"Incompatible task types.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.remove(index);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasks.add(index, taskToUpdate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.setNewTasks(tasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (CloneNotSupportedException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Failed to update task\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateTaskDoneStatus(int index, boolean isDone) throws TaskRepoException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.getCurrentTasks();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (tasks.get(index).isTaskDone() \u003d\u003d isDone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskRepoException(\"Task\u0027s done status is already set to \" + isDone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasks.get(index).setTaskAsDone(isDone);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.setNewTasks(tasks);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 169
    }
  },
  {
    "path": "src/main/java/duke/task/ITaskRepo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskRepoException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An interface to encapsulate the accessing of a user\u0027s tasks. It includes operations required by the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * program to read and modify these tasks accordingly."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface ITaskRepo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to simply read the user\u0027s current tasks. Tasks are currently represented"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * in the form of a list. The list returned by this method SHOULD be READ-ONLY, which means that any"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * changes to it should not affect the user\u0027s tasks in any way. The order of the tasks returned MUST be consistent"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * if no modifications is made to the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list containing the user\u0027s current tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if tasks cannot be retrieved."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getCurrentTasks() throws TaskRepoException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to retrieve the number of tasks that a user has."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the number of tasks that a user currently has."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if tasks cannot be read."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public int getCurrentTasksCount() throws TaskRepoException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to retrieve the task based on its index in the list of"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * tasks returned by the getCurrentTasks() method. The task returned MUST correspond to the task that is"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * found at the specified index."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index of the task whose UUID is to be retrieved."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the UUID of a task found at the specified index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if tasks cannot be retrieved or if the index provided is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task getTaskFromListIndex(int index) throws TaskRepoException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to search for tasks. Tasks are considered matching if a substring of its details"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * contains the parameter. A list of matching tasks is to be returned. The list returned by this method SHOULD be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * READ-ONLY, which means that any changes to it should not affect the user\u0027s tasks in any way."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param parameter substring to be used to search for matching tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list of the matching tasks."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if tasks cannot be retrieved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e searchTasks(String parameter) throws TaskRepoException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to delete a specific task. The task is identified based on its index in the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * of tasks returned by the getCurrentTasks() method. The task deleted MUST correspond to the task that is found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * at the specified index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index of the task to be deleted."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if the index specified is out of bounds or if the task is unable to be deleted.."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteTask(int index) throws TaskRepoException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to add a new Task to the user\u0027s existing Tasks. The Task being added SHOULD NOT be"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * modified in anyway before it is added."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if the task is unable to be added."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addTask(Task task) throws TaskRepoException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to add a new Task to the user\u0027s existing Tasks at a particular index. The index"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * corresponds to the the index in the list of tasks returned by the getCurrentTasks() method. The Task being added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * SHOULD NOT be modified in anyway before it is added."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index at which the new taks is to be added."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if the task is unable to be added."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addTaskToIndex(int index, Task task) throws TaskRepoException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to update a currently existing task\u0027s details field. The task to be updated is"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * identified by its index in the list of tasks returned by the getCurrentTasks() method. The model should only"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * update the task that corresponds to the task found at the specified index. The task to be updated SHOULD be of"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the same task type as the previous task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index of the task to be updated."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task new task to be updated."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if the index specified is out of bounds or if the task is unable to be updated."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateTask(int index, Task task) throws TaskRepoException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to update a currently existing task\u0027s done status. The task is identified by its index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * in the list of tasks returned by the getCurrentTasks() method. This method SHOULD check if the new done status"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * is opposite of the current done status of the task."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index of the taks to be updated"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param isDone the new done status of the task to be updated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if the index specified is out of bounds or if the new done status is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void updateTaskDoneStatus(int index, boolean isDone) throws TaskRepoException;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to completely update the user\u0027s existing tasks to a new list of tasks. The old task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * information will be erased."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks the list of new tasks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws  TaskRepoException if the rewrite fails."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setNewTasks(List\u003cTask\u003e tasks) throws TaskRepoException;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to delete ALL of the user\u0027s existing tasks. All of the old task information will be"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * erased."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskRepoException if the deletion fails."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void deleteAllTasks() throws TaskRepoException;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 111
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskModificationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Serializable abstract class to represent a task that is to be completed by the user. Its base attributes includes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 1. a UUID to uniquely identify each task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 2. a unique character code to represent each type of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 3. a details String to serve as a descriptor for each task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 4. a TimeFrame within which the task is to be completed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 5. a boolean flag to represent if the task is completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The constructors of all tasks MUST follow the following formats"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 1. Task(String details, LocalDateTime a, LocalDateTime b)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * 2. Task(String details, LocalDateTime a)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class Task implements Serializable, Cloneable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final long serialVersionUID \u003d 6529685098267757690L;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String TASK_IS_DONE_ICON \u003d \"✓\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static String TASK_NOT_DONE_ICON \u003d \"✘\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final UUID uuid;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final char uniqueCharCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TimeFrame timeFrame;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor for the Task abstract class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param uniqueCharCode a unique char assigned to each task for identification."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param details the details describing the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param timeFrame the timeframe in which the task is to be completed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskCreationException if timeframe is not compatible with the task type."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task(char uniqueCharCode, String details, TimeFrame timeFrame) throws TaskCreationException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.isTimeFrameCompatible(timeFrame)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskCreationException(\"The given time frame is not compatible.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.uuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.uniqueCharCode \u003d uniqueCharCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.timeFrame \u003d timeFrame;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final UUID getUuid() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.uuid;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final char getUniqueCharCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.uniqueCharCode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getTaskDetails() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TimeFrame getTaskTimeFrame() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.timeFrame;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isTaskDone() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setTaskAsDone(boolean done) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a nicely formatted description of the task that reflects all of its base attributes including:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * 1. its unique character code"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * 2. whether it is done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * 3. its details"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * 4. (optional) a description of its TimeFrame if it exists"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the nicely formatted description of the task as a string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String getTaskDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String taskDescription \u003d String.format(\"[%s][%s] %s\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.uniqueCharCode,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.isDone ? TASK_IS_DONE_ICON : TASK_NOT_DONE_ICON,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.details);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!this.timeFrame.hasDescription()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return taskDescription;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return String.format(\"%s (%s)\", taskDescription, timeFrame.getDescription());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if both tasks have all of the same fields.."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param o object to be compared to the Task instance."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the two tasks are the same."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (o instanceof Task) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return ((Task) o).getTaskDetails().equals(this.details)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 ((Task) o).getTaskTimeFrame().equals(this.timeFrame)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    \u0026\u0026 ((Task) o).getUniqueCharCode() \u003d\u003d this.uniqueCharCode;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a deep copy of the task instance other than its UUID which is immutable regardless."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a deep copy of the task instance."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws CloneNotSupportedException if cloning of the task instance fails."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task clone \u003d (Task) super.clone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        clone.timeFrame \u003d new TimeFrame(timeFrame.getStart(), timeFrame.getEnd());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return clone;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by task to check if a TimeFrame is compatible before any calls to setTimeFrame is carried out."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * A task\u0027s TimeFrame should always follow a fixed pattern. For instance, a task to be completed at a particular"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * time should have the same start and end times, a task to be completed after a certain time should have its start"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * time as null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param timeframe new TimeFrame instance to update the task with."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the TimeFrame instance is compatible."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract boolean isTimeFrameCompatible(TimeFrame timeframe);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 132
    }
  },
  {
    "path": "src/main/java/duke/task/TasksController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.sort.TaskSorts;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskRepoException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.UiOutputAccessor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.strings.ErrorMessageFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Controller task to help mediate the execution of commands that require the retrieval and update of data from the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * TasksModel. Each method execution will have a user feedback message that will be displayed to the list of registered."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * A Ui is registered by providing its UiOutputAccessor through the regsiterUi(UiOutputAccessor outputAccessor) method."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * The TasksController instance will use this accessor to display any necessary feedback in the corresponding Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TasksController {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksControllerFeedback feedbackFormatter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ITaskRepo tasksRepo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cUiOutputAccessor\u003e registeredUis;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor for a TasksController. A repo with from which the controller will write and read data is needed"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * as a dependency."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasksRepo the repo from which the controller will read and write data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TasksController(ITaskRepo tasksRepo) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.feedbackFormatter \u003d new TasksControllerFeedback();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasksRepo \u003d tasksRepo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.registeredUis \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to register any Uis to listen to any commands executed by the TasksController. Each"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * command executed by the TasksController will result in the display of a feedback message to all the registered"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Uis through its UiOutputAccessor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param uiOutputAccessor the uiOutputAccessor of the ui to be registered."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void registerUi(UiOutputAccessor uiOutputAccessor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.registeredUis.add(uiOutputAccessor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void displayFeedback(String feedbackMessage) throws UiException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (UiOutputAccessor outputChannel : registeredUis) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            outputChannel.displayOutput(feedbackMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void displayError(TaskRepoException e) throws UiException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(ErrorMessageFormatter.formatErrorMessage(e.getMessage()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void displayError(String e) throws UiException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(ErrorMessageFormatter.formatErrorMessage(e));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Displays a lists all of the user\u0027s tasks in the TasksModel in each of the registered Uis."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void listTasks() throws UiException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d tasksRepo.getCurrentTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String feedback \u003d this.feedbackFormatter.displayAllTasks(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds tasks and displays corresponding feedback in each of the registered Uis."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task the task to be added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the task was added successfully."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean addTask(Task task) throws UiException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.addTask(task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to get number of tasks after adding the task to the model"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cInteger\u003e numTasks;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.of(tasksRepo.getCurrentTasksCount());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Display feedback"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskAdded(task, numTasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a task to a particular index. The index is based on the list of tasks displayed by the listTasks() method."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index at which to add the new task."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param task the new task to be added."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the addition was successful."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if the ui fails unexpectedly."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean addTaskToIndex(int index, Task task) throws UiException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.addTaskToIndex(index, task);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to get number of tasks after adding the task to the model"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cInteger\u003e numTasks;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.of(tasksRepo.getCurrentTasksCount());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Display feedback"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskAdded(task, numTasks);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets a new list of tasks as the user\u0027s current tasks. The old task information will be lost."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks the new list of tasks."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the new tasks were successfully set."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if the ui fails unexpectedly."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean setNewTasks(List\u003cTask\u003e tasks) throws UiException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayAllTasks(tasks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets a task to done and prints corresponding feedback in each of the registered Uis."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index index of task to be set to done."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the task was modified successfully."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean setTaskToDone(int index) throws UiException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.updateTaskDoneStatus(index, true);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to get modified task"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTask\u003e modifiedTask;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            modifiedTask \u003d Optional.of(tasksRepo.getTaskFromListIndex(index));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            modifiedTask \u003d Optional.empty();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Prints corresponding feedback"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskSetToDone(modifiedTask);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sets a task to undone and prints corresponding feedback in each of the registered Uis."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index index of task to be set to done."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the task was modified successfully."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean setTaskToUndone(int index) throws UiException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.updateTaskDoneStatus(index, false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to get modified task"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTask\u003e modifiedTask;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            modifiedTask \u003d Optional.of(tasksRepo.getTaskFromListIndex(index));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            modifiedTask \u003d Optional.empty();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Prints corresponding feedback"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskSetToUndone(modifiedTask);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Deletes a task and displays the corresponding feedback in each of the registered Uis."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index index of task to be deleted."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the deleted task or null if it fails to be deleted."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task deleteTask(int index) throws UiException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task taskToBeDeleted;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try accessing and deleting task"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskToBeDeleted \u003d tasksRepo.getTaskFromListIndex(index);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.deleteTask(index);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try getting size of new list"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cInteger\u003e numTasks;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.of(tasksRepo.getCurrentTasksCount());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.empty();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskDeleted(taskToBeDeleted, numTasks);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return taskToBeDeleted;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Finds tasks containing a substring and displays corresponding feedback in all registered Uis."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param parameter substring to be searched."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void findTasks(String parameter) throws UiException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to find tasks"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e matchingTasks \u003d tasksRepo.searchTasks(parameter);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String feedback \u003d this.feedbackFormatter.displayMatchingTasks(matchingTasks);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sorts tasks according to the specified sorting method."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param sortingMethod method with which to sort the user\u0027s tasks."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return old tasks if successful or null if sort was unsuccessful"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if the ui fails unexpectedly"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e sortTasks(TaskSorts sortingMethod) throws UiException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try to sort tasks and print corresponding feedback"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            final List\u003cTask\u003e oldTasks \u003d tasksRepo.getCurrentTasks();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e sortedTasks \u003d tasksRepo.getCurrentTasks();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            sortedTasks.sort(sortingMethod.comparator);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.setNewTasks(sortedTasks);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String feedback \u003d this.feedbackFormatter.displayTasksSorted(sortingMethod);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return oldTasks;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Delete all of the user\u0027s task data."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the previous lists of tasks or null if it fails to delete."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if the ui fails unexpectedly."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e deleteAllTasks() throws UiException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        //Try to delete tasks and print corresponding feedback"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e oldTasks \u003d tasksRepo.getCurrentTasks();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            tasksRepo.deleteAllTasks();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String feedback \u003d this.feedbackFormatter.displayAllTasksDeleted();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return oldTasks;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Delete a particular task by its uuid."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param uuid the uuid of the task to be deleted."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the deleted task or null if it fails to be deleted.."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if the ui fails unexpectedly."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task deleteTaskByUuid(UUID uuid) throws UiException {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task taskToBeDeleted;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try accessing and deleting task"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Optional\u003cTask\u003e optionalTask \u003d tasksRepo.getCurrentTasks().stream()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .filter(task -\u003e task.getUuid().equals(uuid)).findFirst();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (optionalTask.isEmpty()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.displayError(\"Task is not found.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskToBeDeleted \u003d optionalTask.get();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e newTasks \u003d tasksRepo.getCurrentTasks().stream()"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .filter(task -\u003e !task.getUuid().equals(uuid))"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.tasksRepo.setNewTasks(newTasks);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(e);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // Try getting size of new list"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cInteger\u003e numTasks;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.of(tasksRepo.getCurrentTasksCount());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            numTasks \u003d Optional.empty();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskDeleted(taskToBeDeleted, numTasks);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return taskToBeDeleted;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Replaces the task at a particular index with a new task."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param index the index of the task to be replaced."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param newTask the task to be replaced with."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the old task if successful or null if not."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Task setTask(int index, Task newTask) throws UiException {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task taskToBeReplaced;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskToBeReplaced \u003d this.tasksRepo.getTaskFromListIndex(index);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.tasksRepo.updateTask(index, newTask);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskRepoException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayError(\"Unable to update task details.\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String feedback \u003d this.feedbackFormatter.displayTaskReplaced(newTask);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.displayFeedback(feedback);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return taskToBeReplaced;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 371
    }
  },
  {
    "path": "src/main/java/duke/task/TasksControllerFeedback.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.sort.TaskSorts;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.strings.OutputBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TasksControllerFeedback {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayAllTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Here are the tasks in your list:\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .appendTasks(tasks);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (tasks.stream().filter(task -\u003e !task.isTaskDone()).count() \u003e\u003d 10) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            builder.newLine()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .newLine()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"You have more than 10 undone tasks on your list.\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .newLine()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"Are you falling to the dark side?\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .newLine()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"/vader/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return builder.build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (tasks.stream().filter(task -\u003e !task.isTaskDone()).count() \u003e\u003d 5) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            builder.newLine()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .newLine()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"I sense more than 5 undone tasks on your list.\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .newLine()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"You seem to have gotten lazy padawan.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return builder.build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayMatchingTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Here are the matching tasks in your list:\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .appendTasks(tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayTaskAdded(Task task, Optional\u003cInteger\u003e numTasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Got it. I\u0027ve added this task:\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getTaskDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        numTasks.ifPresent(num -\u003e builder"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(String.format(\"Now you have %d tasks in the list\", num)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayTaskSetToDone(Optional\u003cTask\u003e modifiedTask) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Nice! I\u0027ve marked this task as done!\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        modifiedTask.ifPresent(task -\u003e builder"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getTaskDescription()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayTaskSetToUndone(Optional\u003cTask\u003e modifiedTask) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Noted! I\u0027ve marked this task as undone!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        modifiedTask.ifPresent(task -\u003e builder"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(task.getTaskDescription()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayTaskDeleted(Task deletedTask, Optional\u003cInteger\u003e numTasks) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Noted. I\u0027ve removed this task:\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(deletedTask.getTaskDescription());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        numTasks.ifPresent(num -\u003e builder"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(String.format(\"Now you have %d tasks in the list\", num)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayTasksSorted(TaskSorts sortingMethod) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Noted. I have sorted your tasks according to \" + sortingMethod.keyword);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String displayAllTasksDeleted() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Noted. I have deleted all your tasks.\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(\"Now you have 0 tasks in the list.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String displayTaskReplaced(Task modifiedTask) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        OutputBuilder builder \u003d new OutputBuilder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        builder.append(\"Noted. I\u0027ve updated this task:\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .newLine()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .indent()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .append(modifiedTask.getTaskDescription());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return builder.build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 129
    }
  },
  {
    "path": "src/main/java/duke/task/TimeFrame.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.time.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * A class to encapsulate the time frame within which a task is to be completed. Not all tasks have a start and end"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * time so these two fields may be null. TimeFrames with no start signifies that the task is to be completed by a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * certain time. TimeFrames with no end signifies that the task is to be done after a certain time. TimeFrames with"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the same start and end time signifies that the task is to be done at a particular time. TimeFrames with no start"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * or end times signify that the task as no restrictions with regards to when it must be done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TimeFrame implements Serializable, Comparable\u003cTimeFrame\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final long serialVersionUID \u003d 6529685098267111111L;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final LocalDateTime end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor for TimeFrame."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param start start of task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param end end of task"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TimeFrame(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public LocalDateTime getEnd() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * A TimeFrame with no start and end times has no description. Thus, this method will return true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * if the TimeFrame instance has no start and end time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the TimeFrame has no description."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean hasDescription() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return !(start \u003d\u003d null \u0026\u0026 end \u003d\u003d null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a description of the TimeFrame as a nicely formatted String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a nicely formatted description of the TimeFrame."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (start \u003d\u003d null \u0026\u0026 end \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // task has no timeframe"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (start \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // task done by a particular time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return String.format(\"by: %s\", DateTime.getString(end));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (end \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            //task done after a particular time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return String.format(\"after: %s\", DateTime.getString(start));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (start.equals(end)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            //  task done at a particular time"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return String.format(\"at: %s\", DateTime.getString(start));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // task is done between two times"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return String.format(\"from: %s to: %s\", DateTime.getString(start), DateTime.getString(end));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns a the start and end LocalDateTimes of the TimeFrame instance as a list. The LocalDateTimes are added in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * the order of start followed by end if they exist."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list of the LocalDateTimes of the TimeFrame."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cLocalDateTime\u003e getDateTimes() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cLocalDateTime\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (start !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            result.add(start);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (end !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            result.add(end);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compares two TimeFrames based on which is later. -1 is returned if the TimeFrame being compared is later,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * 1 is returned if the TimeFrame compared is earlier and 0 is returned if they are the same. TimeFrames are first"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * compared by their end time followed by their start time."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param timeFrame the TimeFrame instance to compare to."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return numerical value signifying which TimeFrame is later"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public int compareTo(TimeFrame timeFrame) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.end !\u003d null \u0026\u0026 timeFrame.end !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.end.compareTo(timeFrame.end);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (this.end !\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (timeFrame.end !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (this.start !\u003d null \u0026\u0026 timeFrame.start !\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return this.start.compareTo(timeFrame.start);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (this.start !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else if (timeFrame.start !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Compares an object to a TimeFrame instance to see if they are equal. Two time frames are equal if"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * they have the same start and end LocalDateTimes."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param obj object to be compared."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return true if the objects are equal."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (obj instanceof TimeFrame) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            boolean startEquals;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (this.start \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                startEquals \u003d ((TimeFrame) obj).getStart() \u003d\u003d null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                startEquals \u003d ((TimeFrame) obj).getStart() !\u003d null \u0026\u0026 this.start.equals(((TimeFrame) obj).getStart());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            boolean endEquals;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (this.end \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                endEquals \u003d ((TimeFrame) obj).getEnd() \u003d\u003d null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                endEquals \u003d ((TimeFrame) obj).getEnd() !\u003d null \u0026\u0026 this.end.equals(((TimeFrame) obj).getEnd());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return startEquals \u0026\u0026 endEquals;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 146
    }
  },
  {
    "path": "src/main/java/duke/task/creation/RecognizedDateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Container class for the regex used by the program to identify valid DateTime arguments in the user\u0027s input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class RecognizedDateTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static final String DATE_TIME_REGEX \u003d \"(\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"(\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"(\\\\s([0-9]{4}))?\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \")\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"|\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"(\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"(?i)\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"Today|Tomorrow|\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"Mon|Monday|Tue|Tues|Tuesday|Wed|Wednesday|Thu|Thurs|Thursday|Fri|Friday|Sat|Saturday|Sun|Sunday\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \")\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"(\\\\s([0-9]{4}))?\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \")\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 20
    }
  },
  {
    "path": "src/main/java/duke/task/creation/TaskArguments.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class encapsulating all the necessary information needed for task creation. It contains the details string of the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * task and a list of DateTimes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskArguments {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final List\u003cLocalDateTime\u003e dateTimes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskArguments(String details, List\u003cLocalDateTime\u003e dateTimes) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.dateTimes \u003d dateTimes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the details portion of the task arguments."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return details string of the task arguments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the datetime arguments of the task arguments."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return list of datetime arguments."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cLocalDateTime\u003e getDateTimes() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return dateTimes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "src/main/java/duke/task/creation/TaskArgumentsParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.datetime.UnknownDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.time.DateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class used to parse task arguments into its details and corresponding date times. To utilize this class,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * you have to instantiate a new TaskArgumentsParser with the arguments to be used and the number of dates that"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * should be extracted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskArgumentsParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String dateTimeRegex;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String dateTimeRegexWithToSeparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private final String dateTimeRegexWithSpaceSeparator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private int numDates;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskArgumentsParser(String arguments, int numDates) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.dateTimeRegex \u003d RecognizedDateTime.DATE_TIME_REGEX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.dateTimeRegexWithToSeparator \u003d \"(\" + dateTimeRegex + \"\\\\s?to\\\\s?\" + dateTimeRegex + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.dateTimeRegexWithSpaceSeparator \u003d \"(\" + dateTimeRegex + \"\\\\s\" + dateTimeRegex + \")\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.numDates \u003d numDates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses the arguments into a friendly TaskArgument class that contains the necessary fields required for Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * creation. The last instances of found matching DateTime String patterns is returned as the DateTime arguments"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * while the String before that is returned as the task details. Any input following the DateTime arguments will"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * be discarded."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a TaskArguments instance"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UnknownDateTimeException if unable to extract the necessary DateTimes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskArguments parse() throws UnknownDateTimeException, TaskArgumentsException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cLocalDateTime\u003e extractedLocalDateTimes \u003d this.extractLocalDateTime();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new TaskArguments(arguments, extractedLocalDateTimes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cLocalDateTime\u003e extractLocalDateTime() throws UnknownDateTimeException, TaskArgumentsException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cLocalDateTime\u003e foundDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cString\u003e foundPatterns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (numDates \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return foundDateTimes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (numDates \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            foundPatterns \u003d findMatchingPatterns(arguments, dateTimeRegex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (foundPatterns.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // chooses last matching datetime as the datetime argument"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String lastDateTimePattern \u003d foundPatterns.get(foundPatterns.size() - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            foundDateTimes.add(DateTime.parse(lastDateTimePattern));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (numDates \u003d\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String doubleDateTimeRegex \u003d \"(\" + dateTimeRegexWithToSeparator + \"|\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + dateTimeRegexWithSpaceSeparator + \")\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            foundPatterns \u003d findMatchingPatterns(arguments, doubleDateTimeRegex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (foundPatterns.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String lastDateTimePattern \u003d foundPatterns.get(foundPatterns.size() - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            for (String dateTimePattern : this.splitDoubleDateTimePattern(lastDateTimePattern)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                foundDateTimes.add(DateTime.parse(dateTimePattern));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (numDates \u003e 2) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskArgumentsException(\"A task cannot have more than 2 date time arguments.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        arguments \u003d trimFromMatchOnwards(arguments, foundPatterns.get(foundPatterns.size() - 1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return foundDateTimes;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cString\u003e findMatchingPatterns(String arguments, String regex) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cString\u003e matchingPatterns \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // find all substrings that match regex pattern"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            matchingPatterns.add(matcher.group(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return matchingPatterns;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String[] splitDoubleDateTimePattern(String doubleDateTimePattern) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (doubleDateTimePattern.contains(\"to\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return doubleDateTimePattern.split(\"\\\\s?to\\\\s?\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cString\u003e separatePatterns \u003d findMatchingPatterns(doubleDateTimePattern, dateTimeRegex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return separatePatterns.toArray(String[]::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String trimFromMatchOnwards(String original, String pattern) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return original.replaceAll(pattern + \".*$\", \"\").trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 116
    }
  },
  {
    "path": "src/main/java/duke/task/creation/TaskBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.lang.reflect.Constructor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class to build tasks according to the TaskType enum and arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Uses Java reflection to parse the arguments according to the specifications of the TaskType and return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * an instance of the corresponding task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param type TaskType corresponding to the type of task to be created."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param arguments arguments to be used in the creating of the task instance."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a task instance matching the TaskType."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskCreationException if task fails to be created."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static Task buildTask(TaskType type, TaskArguments arguments) throws TaskCreationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // get constructor and parameters type of particular task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Class\u003c?\u003e task \u003d type.task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Constructor\u003c?\u003e constructor \u003d task.getConstructors()[0];"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Class\u003c?\u003e[] parameters \u003d constructor.getParameterTypes();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // get arguments array"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Object[] argumentArray \u003d getArgumentArray(arguments);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return invokeTaskConstructor(constructor, argumentArray);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Object[] getArgumentArray(TaskArguments taskArguments) throws TaskCreationException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (taskArguments.getDetails().equals(\"\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskCreationException(\"Please enter some task details.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cObject\u003e argsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        argsList.add(taskArguments.getDetails());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        argsList.addAll(taskArguments.getDateTimes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return argsList.toArray();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Task invokeTaskConstructor(Constructor\u003c?\u003e constructor, Object[] arguments)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throws TaskCreationException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return (Task) constructor.newInstance(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskCreationException(\"Unable to create task\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 56
    }
  },
  {
    "path": "src/main/java/duke/task/creation/TaskFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.datetime.UnknownDateTimeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskArgumentsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory to produce tasks according to user inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskFactory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses user input to create corresponding task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param keyword keyword of the user\u0027s input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param arguments remaining of user\u0027s input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return Optional of task if it is a valid keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws TaskCreationException if arguments are invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Optional\u003cTask\u003e getTask(String keyword, String arguments) throws TaskCreationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        // scans task types to find corresponding keyword"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTaskType\u003e taskTypeOptional \u003d Arrays.stream(TaskType.values())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(t -\u003e t.keyword.equals(keyword))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (taskTypeOptional.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            TaskArguments taskArguments \u003d new TaskArgumentsParser(arguments, taskTypeOptional.get().numDates).parse();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return Optional.of(TaskBuilder.buildTask(taskTypeOptional.get(), taskArguments));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (TaskArgumentsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskCreationException(\"Something unexpected happened.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UnknownDateTimeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new TaskCreationException(\"Please enter a valid date and time.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 43
    }
  },
  {
    "path": "src/main/java/duke/task/creation/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoWithin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Enum used by the TaskFactory to generate the corresponding tasks. A task MUST be registered in this enum before"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * it will be produced by the TaskFactory. Each task is mapped to a keyword in the enum. This keyword is used"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * by the TaskFactory to determine what type of task to create."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TODO(\"todo\",  0, ToDo.class),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    EVENT(\"event\",  1, Event.class),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DEADLINE(\"deadline\",  1, Deadline.class),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DO_WITHIN(\"within\",  2, DoWithin.class),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    DO_AFTER(\"after\",  1, DoAfter.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final String keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final int numDates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final Class\u003c? extends Task\u003e task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    TaskType(String keyword, int numDates, Class\u003c? extends Task\u003e task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.numDates \u003d numDates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 33
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that needs to be completed by a specified time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Deadline(String details, LocalDateTime by) throws TaskCreationException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\u0027D\u0027, details, new TimeFrame(null, by));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isTimeFrameCompatible(TimeFrame timeframe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return timeframe.getStart() \u003d\u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 22
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/DoAfter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that needs to be done after a specific time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DoAfter extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DoAfter(String details, LocalDateTime after) throws TaskCreationException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\u0027A\u0027, details, new TimeFrame(after, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isTimeFrameCompatible(TimeFrame timeframe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return timeframe.getEnd() \u003d\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/DoWithin.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that needs to be done within a specific time period."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DoWithin extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DoWithin(String description, LocalDateTime from, LocalDateTime to) throws TaskCreationException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\u0027W\u0027, description, new TimeFrame(from, to));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isTimeFrameCompatible(TimeFrame timeframe) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return timeframe.getStart() !\u003d null \u0026\u0026 timeframe.getEnd() !\u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that needs to be done at a specified time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Event(String details, LocalDateTime at) throws TaskCreationException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\u0027E\u0027, details, new TimeFrame(at, at));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isTimeFrameCompatible(TimeFrame timeframe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return timeframe.getStart().equals(timeframe.getEnd());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 22
    }
  },
  {
    "path": "src/main/java/duke/task/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Task that has no time constraints."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ToDo(String details) throws TaskCreationException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(\u0027T\u0027, details, new TimeFrame(null, null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isTimeFrameCompatible(TimeFrame timeframe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return timeframe.getStart() \u003d\u003d null \u0026\u0026 timeframe.getEnd() \u003d\u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 20
    }
  },
  {
    "path": "src/main/java/error/command/CommandCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandCreationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandCreationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/command/CommandNotExecutedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandNotExecutedException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4
    }
  },
  {
    "path": "src/main/java/error/command/CommandProducerRegisterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandProducerRegisterException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public CommandProducerRegisterException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/command/OperationUnsupportedException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OperationUnsupportedException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4
    }
  },
  {
    "path": "src/main/java/error/config/ConfigurationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.config;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ConfigurationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ConfigurationException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/datetime/UnknownDateTimeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UnknownDateTimeException extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 6
    }
  },
  {
    "path": "src/main/java/error/datetime/UnmatchedTimeFrameException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UnmatchedTimeFrameException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 4
    }
  },
  {
    "path": "src/main/java/error/storage/StorageException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StorageException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StorageException(String error) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(error);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/task/TaskArgumentsException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskArgumentsException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TaskArgumentsException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/task/TaskCreationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskCreationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TaskCreationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/task/TaskModificationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskModificationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TaskModificationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/task/TaskRepoException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class TaskRepoException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TaskRepoException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/ui/UiException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UiException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UiException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/error/ui/UiInitializationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package error.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UiInitializationException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UiInitializationException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 7
    }
  },
  {
    "path": "src/main/java/storage/FileSystemStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Storage class that handles the reading and writing of tasks to a storage file found in the local machine\u0027s file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * system. This class will create a new storage file in the file system of the local machine if it does not already"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * exist. If not, it will read and write to the file corresponding to specified path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FileSystemStorage implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private String storageFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private FileSystemStorage(String storageFilePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.storageFilePath \u003d storageFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an instance of a FileSystemStorage that reads and writes to a file path. A new file is created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * at the file path if it does not already exist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param storageFilePath file path to read and write tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return FileSystemStorage instance"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if unable to read file path"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FileSystemStorage getInstance(String storageFilePath) throws StorageException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FileSystemStorage storage \u003d new FileSystemStorage(storageFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.setup();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void setup() throws StorageException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            // Create new file if it doesn\u0027t exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (!fileExists(storageFilePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                File file \u003d new File(storageFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                FileOutputStream outputStream \u003d new FileOutputStream(storageFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                ObjectOutputStream taskWriter \u003d new ObjectOutputStream(outputStream);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                System.out.println(\"Creating new storage file...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                taskWriter.writeObject(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                taskWriter.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new StorageException(\"Unable to set up storage\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean fileExists(String filePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new File(filePath).exists();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Gets stored tasks."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return list of tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if unable to read from file path"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws StorageException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FileInputStream inputStream \u003d new FileInputStream(storageFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ObjectInputStream taskReader \u003d new ObjectInputStream(inputStream);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            List\u003cTask\u003e tasks \u003d (List\u003cTask\u003e) taskReader.readObject();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskReader.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new StorageException(\"Unable to read tasks\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Writes tasks to storage file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks list of task to be written"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if unable to write to file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void writeTasks(List\u003cTask\u003e tasks) throws StorageException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FileOutputStream outputStream \u003d new FileOutputStream(storageFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            ObjectOutputStream taskWriter \u003d new ObjectOutputStream(outputStream);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskWriter.writeObject(tasks);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            taskWriter.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new StorageException(\"Unable to save tasks\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 105,
      "-": 3
    }
  },
  {
    "path": "src/main/java/storage/InMemStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An in-memory storage which is used to represent a temporary Storage with no ability to persist data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class InMemStorage implements Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public InMemStorage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to read current list of tasks from storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list of the tasks that have been put in storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if something goes wrong while accessing the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws StorageException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to write new tasks to storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks the list of tasks to be written to storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if something goes wrong while accessing the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void writeTasks(List\u003cTask\u003e tasks) throws StorageException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 40
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An interface to encapsulate a class that handles reading and writing of tasks to storage."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to read current list of tasks from storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a list of the tasks that have been put in storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if something goes wrong while accessing the storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cTask\u003e getTasks() throws StorageException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the program to write new tasks to storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks the list of tasks to be written to storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws StorageException if something goes wrong while accessing the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void writeTasks(List\u003cTask\u003e tasks) throws StorageException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 25
    }
  },
  {
    "path": "src/main/java/ui/DukeInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An abstract class to encapsulate a user input channel. It uses the observer pattern to notify all its listeners"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * of any user input that it receives. Any input received after the method start() is called SHOULD BE forwarded to all"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * its listeners using the updateAllListeners(String input) method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class DukeInput {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cDukeInputListener\u003e listeners;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isBlocking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected DukeInput(boolean isBlocking) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isBlocking \u003d isBlocking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void updateAllListeners(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners.forEach(listener -\u003e listener.receiveInput(input));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if this input channel is blocking."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return information about whether the input channel is blocking."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isBlocking() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.isBlocking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a listener to the input channel. This listener will be notified of any user input received by the input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * channel through its receiveInput(String input) method."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param listener the listener to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void addListener(DukeInputListener listener) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.listeners.add(listener);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Starts listening to user input. Any input received SHOULD BE forwarded to its listeners by passing the input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * into the updateAllListeners(String input) method. In the event that the input channel is blocking, it SHOULD"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start the dukeOutput channels first."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dukeOutputs output channels to be opened before the input channel."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected abstract void startInputChannel(DukeOutput... dukeOutputs) throws UiInitializationException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Stops listening to user input. Any input received afterwards SHOULD NOT BE forwarded to the controller anymore."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected abstract void stopInputChannel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 55
    }
  },
  {
    "path": "src/main/java/ui/DukeInputListener.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to encapsulate a listener for DukeInput\u0027s input channel. The listener is responsible for"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * parsing and responding to the input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface DukeInputListener {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method with which DukeInput notifies the listener of any user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input user input from input channel"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void receiveInput(String input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 13
    }
  },
  {
    "path": "src/main/java/ui/DukeOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An abstract class to encapsulate an output channel for the application\u0027s Ui. It provides a method for the application"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * to display any messages to the corresponding output channel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public abstract class DukeOutput {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Displays output message in a corresponding output channel. Any calls to displayOutput(String message) before"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start() is called all after stop() is called SHOULD THROW a UiException."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message output to be displayed in the output channel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException when implemented output channel fails to display the output."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract void displayOutput(String message) throws UiException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Opens the output channel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract void startOutputChannel() throws UiInitializationException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Closes the output channel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public abstract void stopOutputChannel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 28
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An abstract class to encapsulate a controller for the UI component of the Duke chatbox. It acts as a mediator between"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the direct Ui components and the main program driver. It contains 2 inner components, DukeInput.java and DukeOutput."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * These two components serve as direct handlers for getting user input and printing output messages respectively."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * DukeUi helps to orchestrate the Ui\u0027s behavior by forwarding any input to the main program driver and by providing a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * method for the main program driver to display any messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class Ui implements DukeInputListener {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private DukeInput inputChannel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private DukeOutput outputChannel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private UiDriver driver;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isUiInitialized;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor for a Ui class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dukeInput the input channel for the ui."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dukeOutput the output channel for the ui."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param driver the main driver to receive inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public Ui(DukeInput dukeInput, DukeOutput dukeOutput, UiDriver driver) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.inputChannel \u003d dukeInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.inputChannel.addListener(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.outputChannel \u003d dukeOutput;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.driver \u003d driver;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isUiInitialized \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by DukeInput to notify the controller of any user input received. Input is then forwarded to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * main program driver through its receiveUserInput(String input) method for handling. This method SHOULD NOT be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * used by any other classes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input the user input received by DukeInput\u0027s input channel."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void receiveInput(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.driver.receiveUserInput(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Displays output through internal DukeOutput component. Output CAN ONLY be displayed after initializeUi() has been"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * called to open the output channel."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param output output message to be displayed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException if message fails to be displayed by the output channel or if ui has not been initialized."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayOutput(String output) throws UiException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!isUiInitialized) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UiException(\"Ui has not been initialized.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.outputChannel.displayOutput(output);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Initializes Ui by opening the corresponding input and output channels of DukeInput and DukeOutput instances. Ui"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * must be initialized before controller can start receiving inputs and it can display any output."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void initializeUi() throws UiInitializationException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isUiInitialized \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (inputChannel.isBlocking()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.inputChannel.startInputChannel(this.outputChannel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.inputChannel.startInputChannel();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.outputChannel.startOutputChannel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Stops the ui properly by closing the corresponding input and output channels of the DukeInput and DukeOutput"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * instances."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopUi() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            outputChannel.displayOutput(\"Bye! Hope to see you again!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UiException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"Ui closed unexpectedly.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            CompletableFuture.delayedExecutor(1, TimeUnit.SECONDS).execute(() -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.inputChannel.stopInputChannel();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.outputChannel.stopOutputChannel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                this.isUiInitialized \u003d false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if ui has been initialized."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return boolean based on whether Ui has been initialized."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public boolean isUiInitialized() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.isUiInitialized;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns an UiOutputAccessor instance to be used by clients to display output to the corresponding ui of"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * this UiController. This allows clients to not be exposed to the other responsibilities and implementations"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * of the UiController class. Clients will simply call the displayOutput(String output) method of the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * UiOutputAccessor instance to display messages on the ui."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return an UiOutputAccessor instance that acts as an access point for clients to display messages on the ui."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public UiOutputAccessor getUiOutputAccessor() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return Ui.this::displayOutput;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 116
    }
  },
  {
    "path": "src/main/java/ui/UiControllerFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Factory to create instances of UiControllers based on the set of available configurations specified in the UiType"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * enum. This allows other components using the Ui controller to not have to be concerned about its implementation and"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * instantiating the necessary dependencies."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UiControllerFactory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates an instance of a UiController based on the type specified by the client."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param driver the driver component that wishes to utilize the ui controller."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param type the type of Ui to be created."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return a UiController instance for the corresponding Ui type that is selected."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static Ui createUiController(UiDriver driver, UiType type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new Ui(type.input.get(), type.output.get(), driver);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 18
    }
  },
  {
    "path": "src/main/java/ui/UiDriver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * An interface to encapsulate a host of Duke\u0027s Ui interfaces. It will be in charge of parsing and responding to"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * user inputs received by the Ui and also sending display messages back to the Ui."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface UiDriver {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by UiController to notify the driver of any user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input input from the UiController."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void receiveUserInput(String input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 13
    }
  },
  {
    "path": "src/main/java/ui/UiOutputAccessor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Interface to expose the DukeOutput output channel of a UiController to external clients without exposing the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * implementation of the UiController. If a client wishes to display something to an existing ui, it would obtain"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * a UiOutputAccessor from the corresponding UiController through its getUiOutputAccessor() method and use this"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * accessor to display output."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public interface UiOutputAccessor {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayOutput(String output) throws UiException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 13
    }
  },
  {
    "path": "src/main/java/ui/UiType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.cli.ClInput;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.cli.ClOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.fx.FxDukeInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.fx.FxDukeOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Enum used by UiController factory to configure which Input and Output channels to create for the program. This"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * allows clients of the UiController to not be concerned about its implementation details and not have to instantiate"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * the necessary dependencies of the UiController class themselves."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public enum UiType {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    CLI(ClInput::new, ClOutput::new),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    JAVAFX(FxDukeInput::new, FxDukeOutput::new);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final Supplier\u003cDukeInput\u003e input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public final Supplier\u003cDukeOutput\u003e output;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    UiType(Supplier\u003cDukeInput\u003e input, Supplier\u003cDukeOutput\u003e output) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.output \u003d output;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 26
    }
  },
  {
    "path": "src/main/java/ui/cli/ClInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.DukeInput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.DukeOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Encapsulates the command line as a DukeInput input channel for the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClInput extends DukeInput {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static boolean isActive;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public ClInput() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Starts listening to user input. Any input received SHOULD BE forwarded to its listeners by passing the input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * into the updateAllListeners(String input) method. In the event that the input channel is blocking, it SHOULD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start the dukeOutput channels first."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dukeOutputs output channels to be opened before the input channel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void startInputChannel(DukeOutput... dukeOutputs) throws UiInitializationException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (DukeOutput outputChannel: dukeOutputs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            outputChannel.startOutputChannel();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (ClInput.scanner \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!ClInput.isActive) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            isActive \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        while (ClInput.isActive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            updateAllListeners(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Stops listening to user input. Any input received afterwards SHOULD NOT BE forwarded to the controller anymore."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void stopInputChannel() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ClInput.isActive \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 55
    }
  },
  {
    "path": "src/main/java/ui/cli/ClOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.cli;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.DukeOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Encapsulates the command line as a DukeOutput output channel for the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ClOutput extends DukeOutput {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String DUKE_LOGO \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String GREETING \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DUKE_LOGO + \"\\n\" + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"Hello! I\u0027m duke.Duke\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    + \"What can I do for you?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isOpen;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Displays output message in a corresponding output channel. Any calls to displayOutput(String message) before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start() is called all after stop() is called SHOULD THROW a UiException."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message output to be displayed in the output channel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException when implemented output channel fails to display the output."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayOutput(String message) throws UiException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (isOpen) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String messageWithIndent \u003d message.replaceAll(\"(?m)^\", \"     \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String horizontalDivider \u003d \"____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            String output \u003d builder.append(horizontalDivider)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(messageWithIndent)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\"\\n\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(horizontalDivider)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(output);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Opens the output channel."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void startOutputChannel() throws UiInitializationException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.displayOutput(GREETING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (UiException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UiInitializationException(\"Something went wrong with the output channel.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Closes the output channel."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopOutputChannel() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 72
    }
  },
  {
    "path": "src/main/java/ui/fx/DukeMainWindowController.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Main window for JavaFx Ui."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DukeMainWindowController {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Image anakinImage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Image yodaImage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Image vaderImage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cFxDukeInput\u003e fxDukeInputs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor for MainWindow component of the JavaFx application."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public DukeMainWindowController() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.anakinImage \u003d new Image(getClass().getResourceAsStream(\"/images/anakin.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.yodaImage \u003d new Image(getClass().getResourceAsStream(\"/images/yoda.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.vaderImage \u003d new Image(getClass().getResourceAsStream(\"/images/vader.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.fxDukeInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!input.equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            printUserMessage(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!input.equals(\"\") \u0026\u0026 this.fxDukeInputs.size() \u003e 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            this.fxDukeInputs.forEach(fxDukeInput -\u003e fxDukeInput.receiveInput(input));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Sends user input to listeners on Enter key press."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param keyEvent user key press"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void onKeyPressed(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (keyEvent.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints message from Duke\u0027s perspective."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message message to be printed"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void printDukeMessage(String message) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (message.contains(\"\\n/vader/\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            message \u003d message.replace(\"\\n/vader/\", \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            dialogContainer.getChildren().addAll(FxDialogBox.getDukeDialog(message, vaderImage));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dialogContainer.getChildren().addAll(FxDialogBox.getDukeDialog(message, yodaImage));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Prints message from user\u0027s perspective."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message message to be printed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void printUserMessage(String message) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                FxDialogBox.getUserDialog(message, anakinImage)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds a fxDukeInput instance to the list of listeners. This fxDukeInput will be notified through its"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * receiveInput(String input) method each time the user enters a input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param fxDukeInput fxDukeInput to be added as a listener."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addInputListener(FxDukeInput fxDukeInput) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.fxDukeInputs.add(fxDukeInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Removes a fxDukeInput instance from the list of listeners. This fxDukeInput instance will no longer be notified"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * of any user inputs."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param fxDukeInput fxDukeInput to be removed as a listener."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void removeInputListener(FxDukeInput fxDukeInput) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.fxDukeInputs.remove(fxDukeInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limhawjia": 119
    }
  },
  {
    "path": "src/main/java/ui/fx/FxDialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Dialog box for JavaFx ui."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FxDialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private FxDialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(DukeMainWindowController.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns dialog box flushed to the left."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param text text to be displayed in dialog box"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param img image for dialog box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return dialog box instance"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FxDialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return new FxDialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns dialog box flushed to the right."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param text text to be displayed in dialog box"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param img image for dialog box"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return dialog box instance"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static FxDialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FxDialogBox db \u003d new FxDialogBox(text, img);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 71
    }
  },
  {
    "path": "src/main/java/ui/fx/FxDukeInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.DukeInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.DukeOutput;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class to encapsulate a JavaFX application as a DukeInput for the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FxDukeInput extends DukeInput {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public FxDukeInput() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Starts listening to user input. Any input received SHOULD BE forwarded to its listeners by passing the input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * into the updateAllListeners(String input) method. In the event that the input channel is blocking, it SHOULD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start the dukeOutput channels first."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dukeOutputs output channels to be opened before the input channel."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void startInputChannel(DukeOutput... dukeOutputs) throws UiInitializationException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (DukeOutput outputChannel: dukeOutputs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            outputChannel.startOutputChannel();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FxMain.addListeners(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!FxMain.isIsApplicationStarted()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Application.launch(FxMain.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Stops listening to user input. Any input received afterwards SHOULD NOT BE forwarded to the controller anymore."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void stopInputChannel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method used by the MainWindowController instance to notify FxDukeInput of received user inputs. FxDukeInput then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * forwards the input to its listeners."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input input received from mainWindowController."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void receiveInput(String input) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        updateAllListeners(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 55
    }
  },
  {
    "path": "src/main/java/ui/fx/FxDukeOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.DukeOutput;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Class to encapsulate a JavaFX application as a DukeOutput for the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FxDukeOutput extends DukeOutput {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean isOpen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Displays output message in a corresponding output channel. Any calls to displayOutput(String message) before"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start() is called all after stop() is called SHOULD THROW a UiException."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message output to be displayed in the output channel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayOutput(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (this.isOpen \u0026\u0026 FxMain.getActiveMainWindowController() !\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FxMain.getActiveMainWindowController().printDukeMessage(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Opens the output channel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void startOutputChannel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Closes the output channel."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopOutputChannel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 40
    }
  },
  {
    "path": "src/main/java/ui/fx/FxMain.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui.fx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Main driver for JavaFx ui. It is a subclass of the JavaFx Application class. Because only one javaFx application can"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * be running at each time, there will be a DukeMainWindowController that corresponds to the main window of the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * currently active javaFx application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class FxMain extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static DukeMainWindowController mainWindowController;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static boolean isApplicationStarted;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static List\u003cFxDukeInput\u003e listeners \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (FxMain.isApplicationStarted) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"An instance of this javaFx application is already running.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            System.out.println(\"Starting javaFx application...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(FxMain.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            VBox vb \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Scene scene \u003d new Scene(vb);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FxMain.mainWindowController \u003d fxmlLoader.getController();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FxMain.listeners.forEach(listener -\u003e mainWindowController.addInputListener(listener));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FxMain.isApplicationStarted \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainWindowController.printDukeMessage(\"Hello young padawan. How may I help you today?\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        System.out.println(\"Closing javaFx application...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FxMain.mainWindowController \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FxMain.isApplicationStarted \u003d false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method to add listeners input listeners to the javaFx application. Listeners MUST be added before the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * application is launched or listeners as javaFX applications are blocking."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param listeners listeners to be added before application is launched."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static void addListeners(FxDukeInput... listeners) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FxMain.listeners.addAll(List.of(listeners));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Method to remove input listeners from the javaFx application. Listeners will be removed from BOTH the FxMain"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * class and the DukeMainWindowController instance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param listeners listeners to be removed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static void removeListeners(FxDukeInput... listeners) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Stream.of(listeners).forEach(listener -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            FxMain.listeners.remove(listener);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            mainWindowController.removeInputListener(listener);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns true if application has already been started."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return boolean corresponding to if the application has already been started."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static boolean isIsApplicationStarted() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return isApplicationStarted;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns the main window instance of the current running javaFx application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return main window instance of the current javaFx application."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    static DukeMainWindowController getActiveMainWindowController() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return FxMain.mainWindowController;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 103
    }
  },
  {
    "path": "src/main/java/util/strings/CommandSplitter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util.strings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class to help split user input into the command keyword and the remaining arguments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class CommandSplitter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Isolates the first word of the user input and returns it as a the command keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the command keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getCommand(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return input.split(\" \")[0];"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Removes the first word and returns the rest of the String as the arguments for the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param input the user\u0027s input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the command\u0027s arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getArguments(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] inputArray \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (inputArray.length \u003c 2) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return inputArray[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 30
    }
  },
  {
    "path": "src/main/java/util/strings/ErrorMessageFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util.strings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class to format error messages in a friendly manner."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class ErrorMessageFormatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Formats an error message in a friendly manner."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message the original error message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return the formatted message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String formatErrorMessage(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return \"I\u0027m sorry, I do not understand. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 16
    }
  },
  {
    "path": "src/main/java/util/strings/OutputBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util.strings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class that formats messages to be printed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class OutputBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StringBuilder message;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message \u003d new StringBuilder();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Constructor with message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message string to be formatted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder(String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.message \u003d new StringBuilder(message);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds string to end of current message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param text string to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder append(String text) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(text);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds int to end of current message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param i int to be added."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder append(int i) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(String.valueOf(i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds another message to end of current message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param outputBuilder message to be added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder append(OutputBuilder outputBuilder) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(outputBuilder.build());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds new line to current message."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified message."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder newLine() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(\"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Adds indent to current message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified message."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder indent() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        message.append(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Returns formatted message."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return message."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public String build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return message.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Appends task descriptions to the back of message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param tasks tasks to be appended."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return modified message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public OutputBuilder appendTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (!tasks.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            message.append(\"1.\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(tasks.get(0).getTaskDescription());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            message.append(\"\\n\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(i + 1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(\".\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .append(tasks.get(i).getTaskDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 101
    }
  },
  {
    "path": "src/main/java/util/time/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.datetime.UnknownDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.time.DayParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class to handle date and time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String dateRegex \u003d \"((([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"([0-9]{4}|[0-9]{2})(\\\\s([0-9]{4}))?))\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String dayRegex \u003d \"((?i)(Today|Tomorrow|Mon|Monday|Tue|Tues|Tuesday|Wed|Wednesday|\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            + \"Thu|Thursday|Fri|Friday|Sat|Saturday|Sun|Sunday)(\\\\s([0-9]{4}))?)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parses a string into a LocalDateTime object. E.g. 24/02/2022 0315."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dateTimeString string to be parsed, must be in the form dd/mm/yyyy HHmm."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return LocalDateTime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UnknownDateTimeException if date and time is not in the correct format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static LocalDateTime parse(String dateTimeString) throws UnknownDateTimeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (dateTimeString.matches(dateRegex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return parseAsDate(dateTimeString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            if (dateTimeString.matches(dayRegex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                return parseAsDay(dateTimeString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static LocalDateTime parseAsDate(String dateTimeString) throws UnknownDateTimeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] dateTimeStrings \u003d dateTimeString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (dateTimeStrings.length \u003e 2) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String date \u003d dateTimeStrings[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] dayMonthYear \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (dayMonthYear.length !\u003d 3) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int day \u003d Integer.parseInt(dayMonthYear[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int month \u003d Integer.parseInt(dayMonthYear[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        int year \u003d Integer.parseInt(dayMonthYear[2]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String time \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (dateTimeStrings.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            time \u003d dateTimeStrings[1];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (time !\u003d null \u0026\u0026 time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.of(year, month, day, hour, minute);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.of(year, month, day, 0, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static LocalDateTime parseAsDay(String dateTimeString) throws UnknownDateTimeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String[] dayTimeStrings \u003d dateTimeString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String day \u003d dayTimeStrings[0];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        LocalDateTime dateTime \u003d DayParser.parse(day);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String time \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (dayTimeStrings.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            time \u003d dayTimeStrings[1];"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (time !\u003d null \u0026\u0026 time.length() !\u003d 4) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (time !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int hour \u003d Integer.parseInt(time.substring(0, 2));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            int minute \u003d Integer.parseInt(time.substring(2, 4));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            dateTime \u003d dateTime.withHour(hour);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            dateTime \u003d dateTime.withMinute(minute);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return dateTime;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Formats LocalDateTime object into string."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dateTime LocalDateTime to be formatted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return formatted string."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static String getString(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, E, HH:mma\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return formatter.format(dateTime);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 118
    }
  },
  {
    "path": "src/main/java/util/time/DayParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package util.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.datetime.UnknownDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.temporal.TemporalAdjuster;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " * Utility class to parse strings representing days into the upcoming LocalDateTime."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class DayParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Parse string representing days into corresponding LocalDateTime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param day string representing day of the week"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @return corresponding LocalDateTime"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UnknownDateTimeException if string is invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public static LocalDateTime parse(String day) throws UnknownDateTimeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String lowerCaseDay \u003d day.toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        switch (lowerCaseDay) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"today\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"tomorrow\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .plus(1, ChronoUnit.DAYS)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"mon\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"monday\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.MONDAY))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"tue\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"tues\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"tuesday\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.TUESDAY))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"wed\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"wednesday\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"thu\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"thur\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"thurs\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"thursday\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.THURSDAY))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"fri\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"friday\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.FRIDAY))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"sat\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"saturday\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.SATURDAY))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"sun\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        case \"sunday\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            return LocalDateTime.now().with(TemporalAdjusters.next(DayOfWeek.SUNDAY))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withHour(0)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withMinute(0)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withSecond(0)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                    .withNano(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            throw new UnknownDateTimeException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 101
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cStackPane style\u003d\"-fx-background-color: cornflowerblue; -fx-background-radius: 10 10 10 10;\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" textFill\u003d\"white\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cDropShadow blurType\u003d\"THREE_PASS_BOX\" color\u003d\"lightgray\" offsetX\u003d\"5.0\" offsetY\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cStackPane alignment\u003d\"BOTTOM_RIGHT\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cInsets top\u003d\"10.0\" bottom\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003cVBox fx:id\u003d\"mainContainer\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      fx:controller\u003d\"ui.fx.DukeMainWindowController\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "      style\u003d\"-fx-background-color: whitesmoke\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                vvalue\u003d\"1.0\" fitToWidth\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" minHeight\u003d\"41.0\" prefHeight\u003d\"41.0\" HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                   onKeyPressed\u003d\"#onKeyPressed\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" minHeight\u003d\"41.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                prefHeight\u003d\"41.0\" minWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "src/test/java/duke/task/DefaultTaskRepoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoAfter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskRepoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.InMemStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class DefaultTaskRepoTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTask\u003e generateMockTasks() throws TaskCreationException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ToDo mockTaskA \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Event mockTaskB \u003d new Event(\"hello\", LocalDateTime.now());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Deadline mockTaskC \u003d new Deadline(\"hello\", LocalDateTime.now());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskB);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskC);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return mockTasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testGetCurrentTasks() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e returnedTasks \u003d repo.getCurrentTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 0; i \u003c mockTasks.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(mockTasks.get(i), returnedTasks.get(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testGetCurrentTasksCount() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTasks.size(), repo.getCurrentTasksCount());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setNewTasks() throws TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.setNewTasks(mockTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e returnedTasks \u003d repo.getCurrentTasks();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 0; i \u003c mockTasks.size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(mockTasks.get(i), returnedTasks.get(i));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteALlTasks() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.deleteAllTasks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(repo.getCurrentTasks().size(), 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getTaskFromListIndex() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e returnedTasks \u003d repo.getCurrentTasks();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(returnedTasks.get(0), repo.getTaskFromListIndex(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(returnedTasks.get(1), repo.getTaskFromListIndex(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(returnedTasks.get(2), repo.getTaskFromListIndex(2));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void searchTasks() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new ToDo(\"A\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new Event(\"b\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new Deadline(\"aa23\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new DoAfter(\"Aloha\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e returnedTasksA \u003d repo.searchTasks(\"A\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (Task task : returnedTasksA) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertTrue(task.getTaskDetails().toLowerCase().contains(\"a\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e returnedTasksB \u003d repo.searchTasks(\"12345\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(returnedTasksB.size(), 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteTask() throws TaskRepoException, TaskCreationException, StorageException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new Event(\"b\", LocalDateTime.now());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new ToDo(\"A\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new Deadline(\"aa23\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(new DoAfter(\"Aloha\", LocalDateTime.now()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.deleteTask(1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertFalse(repo.getCurrentTasks().contains(mockTaskA));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addTask() throws TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new Event(\"b\", LocalDateTime.now());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.addTask(mockTaskA);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Optional\u003cTask\u003e taskA \u003d repo.getCurrentTasks().stream().filter(task -\u003e task.equals(mockTaskA)).findFirst();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(taskA.isPresent());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void updateTask() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new Event(\"b\", LocalDateTime.now());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskB \u003d new Event(\"c\", LocalDateTime.now());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.updateTask(0, mockTaskB);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTaskB, repo.getTaskFromListIndex(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskC \u003d new DoAfter(\"d\", LocalDateTime.now());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(TaskRepoException.class, () -\u003e repo.updateTask(0, mockTaskC));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void updateTaskDoneStatus() throws StorageException, TaskRepoException, TaskCreationException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new Event(\"b\", LocalDateTime.now());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.updateTaskDoneStatus(0, true);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(repo.getTaskFromListIndex(0).isTaskDone());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(TaskRepoException.class, () -\u003e repo.updateTaskDoneStatus(0, true));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addTaskToIndex() throws TaskCreationException, TaskRepoException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final DefaultTaskRepo repo \u003d new DefaultTaskRepo(storage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final List\u003cTask\u003e mockTasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new Event(\"b\", LocalDateTime.now());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        repo.addTaskToIndex(0, mockTaskA);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task taskA \u003d repo.getCurrentTasks().get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTaskA, taskA);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 199
    }
  },
  {
    "path": "src/test/java/duke/task/TasksControllerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.command.sort.TaskSorts;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskRepoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import storage.InMemStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.StubInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.StubOutput;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TasksControllerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StubOutput output;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private ITaskRepo repo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private TasksController controller;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private void generateMocks() throws UiInitializationException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.output \u003d new StubOutput();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui \u003d new Ui(new StubInput(null), output, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo \u003d new DefaultTaskRepo(new InMemStorage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller \u003d new TasksController(this.repo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.ui.initializeUi();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.registerUi(this.ui.getUiOutputAccessor());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cTask\u003e generateMockTasks() throws TaskCreationException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ToDo mockTaskA \u003d new ToDo(\"helloc\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Event mockTaskB \u003d new Event(\"hellob\", LocalDateTime.now());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Deadline mockTaskC \u003d new Deadline(\"helloa\", LocalDateTime.now());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskB);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskC);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return mockTasks;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void registerUi() throws UiException, UiInitializationException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        controller.deleteAllTasks();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String message \u003d output.getReceivedOutputs().get(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expectedMessage \u003d new TasksControllerFeedback().displayAllTasksDeleted();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(message, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void listTasks() throws UiException, TaskRepoException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        controller.listTasks();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String message \u003d output.getReceivedOutputs().get(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expectedMessage \u003d new TasksControllerFeedback().displayAllTasks(tasks);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(message, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void addTask() throws UiException, TaskRepoException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.addTask(mockTaskA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(repo.getCurrentTasks().contains(mockTaskA));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setTaskToDone() throws TaskRepoException, UiException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.addTask(mockTaskA);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.setTaskToDone(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(repo.getTaskFromListIndex(0).isTaskDone());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteTask() throws TaskRepoException, UiException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.addTask(mockTaskA);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.deleteTask(0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertFalse(repo.getCurrentTasks().contains(mockTaskA));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void findTasks() throws UiException, TaskRepoException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        controller.findTasks(\"a\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String message \u003d output.getReceivedOutputs().get(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e expectedTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .filter(task -\u003e task.getTaskDetails().toLowerCase().contains(\"a\"))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String expectedMessage \u003d new TasksControllerFeedback().displayMatchingTasks(expectedTasks);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(message, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void sortTasks() throws TaskRepoException, UiException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.sortTasks(TaskSorts.NAME);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        tasks.sort(TaskSorts.NAME.comparator);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e sortedTasks \u003d this.repo.getCurrentTasks();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedTasks.size(); i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(tasks.get(i), sortedTasks.get(i));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteAllTasks() throws TaskRepoException, UiException, TaskCreationException, UiInitializationException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.deleteAllTasks();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(this.repo.getCurrentTasks().size(), 0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void deleteTaskByUuid() throws TaskCreationException, TaskRepoException, UiInitializationException, UiException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task taskToBeDeleted \u003d tasks.get(1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.deleteTaskByUuid(taskToBeDeleted.getUuid());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertFalse(this.repo.getCurrentTasks().stream()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .anyMatch(task -\u003e task.getUuid().equals(taskToBeDeleted.getUuid())));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setNewTasks() throws UiInitializationException, TaskCreationException, UiException, TaskRepoException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.setNewTasks(tasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d this.repo.getCurrentTasks();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(tasks.get(i), storedTasks.get(i));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void setTask() throws TaskCreationException, TaskRepoException, UiInitializationException, UiException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.generateMocks();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e tasks \u003d this.generateMockTasks();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.repo.setNewTasks(tasks);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task mockTaskA \u003d new ToDo(\"Lubababadubdub\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.controller.setTask(0, mockTaskA);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(this.repo.getCurrentTasks().size(), tasks.size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(this.repo.getTaskFromListIndex(0), mockTaskA);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 196
    }
  },
  {
    "path": "src/test/java/duke/task/creation/TaskArgumentsParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.datetime.UnknownDateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskArgumentsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.time.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskArgumentsParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void parse() throws TaskArgumentsException, UnknownDateTimeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArgumentsParser parserA \u003d new TaskArgumentsParser(\"hello12345 mon to thur java\", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments argumentsA \u003d parserA.parse();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(argumentsA.getDetails(), \"hello12345\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(argumentsA.getDateTimes().size(), 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        LocalDateTime firstDateTime \u003d argumentsA.getDateTimes().get(0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        LocalDateTime secondDateTime \u003d argumentsA.getDateTimes().get(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(firstDateTime, LocalDateTime.now()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .with(TemporalAdjusters.next(DayOfWeek.MONDAY))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withHour(0)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withMinute(0)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withSecond(0)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withNano(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(secondDateTime, LocalDateTime.now()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .with(TemporalAdjusters.next(DayOfWeek.THURSDAY))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withHour(0)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withMinute(0)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withSecond(0)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                .withNano(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArgumentsParser parserB \u003d new TaskArgumentsParser(\"hello12345 23/02/2020 0900\", 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments argumentsB \u003d parserB.parse();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(argumentsB.getDetails(), \"hello12345\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(argumentsB.getDateTimes().size(), 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(argumentsB.getDateTimes().get(0), DateTime.parse(\"23/02/2020 0900\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArgumentsParser parserC \u003d new TaskArgumentsParser(\"abcde\", 3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(TaskArgumentsException.class, parserC::parse);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArgumentsParser parserD \u003d new TaskArgumentsParser(\"abcde\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(UnknownDateTimeException.class, parserD::parse);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 54
    }
  },
  {
    "path": "src/test/java/duke/task/creation/TaskBuilderTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.creation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoAfter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoWithin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.datetime.UnknownDateTimeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.time.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskBuilderTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDeadline() throws TaskCreationException, UnknownDateTimeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments arguments \u003d new TaskArguments(\"hello everyone\", List.of(DateTime.parse(\"02/01/2020 0210\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d TaskBuilder.buildTask(TaskType.DEADLINE, arguments);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), Deadline.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[D][✘] hello everyone (by: Jan 02 2020, Thu, 02:10AM)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateToDo() throws TaskCreationException, UnknownDateTimeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments arguments \u003d new TaskArguments(\"hello everyone\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d TaskBuilder.buildTask(TaskType.TODO, arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), ToDo.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(), \"[T][✘] hello everyone\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateEvent() throws TaskCreationException, UnknownDateTimeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments arguments \u003d new TaskArguments(\"hello everyone\", List.of(DateTime.parse(\"02/01/2020 0210\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d TaskBuilder.buildTask(TaskType.EVENT, arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), Event.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(), \"[E][✘] hello everyone (at: Jan 02 2020, Thu, 02:10AM)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDoAfter() throws TaskCreationException, UnknownDateTimeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments arguments \u003d new TaskArguments(\"hello everyone\", List.of(DateTime.parse(\"02/01/2020 0210\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d TaskBuilder.buildTask(TaskType.DO_AFTER, arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), DoAfter.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[A][✘] hello everyone (after: Jan 02 2020, Thu, 02:10AM)\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDoWithin() throws TaskCreationException, UnknownDateTimeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TaskArguments arguments \u003d new TaskArguments(\"hello everyone\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                List.of(DateTime.parse(\"02/01/2020 0210\"), DateTime.parse(\"03/02/2021 0900\")));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d TaskBuilder.buildTask(TaskType.DO_WITHIN, arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), DoWithin.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[W][✘] hello everyone (from: Jan 02 2020, Thu, 02:10AM to: Feb 03 2021, Wed, 09:00AM)\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 69
    }
  },
  {
    "path": "src/test/java/duke/task/factory/TaskFactoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.factory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.creation.TaskFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoAfter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.DoWithin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TaskFactoryTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public TaskFactory taskFactory \u003d new TaskFactory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDeadline() throws TaskCreationException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d taskFactory.getTask(\"deadline\", \"hello everyone 02/01/2020 0210\").get();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), Deadline.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[D][✘] hello everyone (by: Jan 02 2020, Thu, 02:10AM)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateToDo() throws TaskCreationException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d taskFactory.getTask(\"todo\",  \"hello everyone\").get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), ToDo.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(), \"[T][✘] hello everyone\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateEvent() throws TaskCreationException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d taskFactory.getTask(\"event\", \"hello everyone 02/01/2020 0210\").get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), Event.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[E][✘] hello everyone (at: Jan 02 2020, Thu, 02:10AM)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDoAfter() throws TaskCreationException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d taskFactory.getTask(\"after\", \"hello everyone 02/01/2020 0210\").get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), DoAfter.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[A][✘] hello everyone (after: Jan 02 2020, Thu, 02:10AM)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDoWithin() throws TaskCreationException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d taskFactory.getTask(\"within\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"hello everyone 02/01/2020 0210 to 03/02/2021 0900\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), DoWithin.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[W][✘] hello everyone (from: Jan 02 2020, Thu, 02:10AM to: Feb 03 2021, Wed, 09:00AM)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testCreateDoWithin2() throws TaskCreationException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Task task \u003d taskFactory.getTask(\"within\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"hello everyone 02/01/2020 0210 03/02/2021 0900\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getClass(), DoWithin.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(task.getTaskDescription(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                \"[W][✘] hello everyone (from: Jan 02 2020, Thu, 02:10AM to: Feb 03 2021, Wed, 09:00AM)\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 71
    }
  },
  {
    "path": "src/test/java/duke/task/tasks/entities/TimeFrameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package duke.task.tasks.entities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.TimeFrame;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import util.time.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class TimeFrameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void hasDescription() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TimeFrame mockTimeFrameA \u003d new TimeFrame(null, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertFalse(mockTimeFrameA.hasDescription());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TimeFrame mockTimeFrameB \u003d new TimeFrame(LocalDateTime.now(), null);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(mockTimeFrameB.hasDescription());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TimeFrame mockTimeFrameC \u003d new TimeFrame(null, LocalDateTime.now());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(mockTimeFrameC.hasDescription());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        TimeFrame mockTimeFrameD \u003d new TimeFrame(LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(mockTimeFrameD.hasDescription());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeA \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeB \u003d LocalDateTime.now().plusMinutes(5);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameA \u003d new TimeFrame(null, null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertNull(mockTimeFrameA.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameB \u003d new TimeFrame(timeA, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameB.getDescription(), \"after: \" + DateTime.getString(timeA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameC \u003d new TimeFrame(null, timeA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameC.getDescription(), \"by: \" + DateTime.getString(timeA));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameD \u003d new TimeFrame(timeA, timeA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameD.getDescription(), \"at: \" + DateTime.getString(timeA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameE \u003d new TimeFrame(timeA, timeB);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameE.getDescription(), \"from: \" + DateTime.getString(timeA)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                + \" to: \" + DateTime.getString(timeB));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getDateTimes() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeA \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeB \u003d LocalDateTime.now().plusMinutes(5);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameA \u003d new TimeFrame(null, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(0, mockTimeFrameA.getDateTimes().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameB \u003d new TimeFrame(timeA, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(1, mockTimeFrameB.getDateTimes().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(timeA, mockTimeFrameB.getDateTimes().get(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameC \u003d new TimeFrame(null, timeA);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(1, mockTimeFrameC.getDateTimes().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(timeA, mockTimeFrameC.getDateTimes().get(0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameD \u003d new TimeFrame(timeA, timeB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(2, mockTimeFrameD.getDateTimes().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(timeA, mockTimeFrameD.getDateTimes().get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(timeB, mockTimeFrameD.getDateTimes().get(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void compareTo() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeA \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeB \u003d LocalDateTime.now().plusMinutes(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameA \u003d new TimeFrame(null, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameB \u003d new TimeFrame(timeA, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameC \u003d new TimeFrame(null, timeA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameD \u003d new TimeFrame(timeA, timeA);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameE \u003d new TimeFrame(timeA, timeB);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameA.compareTo(mockTimeFrameA), 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameA.compareTo(mockTimeFrameB), -1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameA.compareTo(mockTimeFrameC), 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameA.compareTo(mockTimeFrameD), 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameA.compareTo(mockTimeFrameE), 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameB.compareTo(mockTimeFrameC), 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameC.compareTo(mockTimeFrameB), -1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameC.compareTo(mockTimeFrameD), 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameC.compareTo(mockTimeFrameE), -1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameC.compareTo(mockTimeFrameE), -1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeA \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final LocalDateTime timeB \u003d LocalDateTime.now().plusMinutes(5);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameA \u003d new TimeFrame(timeA, timeB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameB \u003d new TimeFrame(timeA, timeB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        final TimeFrame mockTimeFrameC \u003d new TimeFrame(timeA, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTimeFrameA, mockTimeFrameB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertNotEquals(mockTimeFrameA, mockTimeFrameC);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 107
    }
  },
  {
    "path": "src/test/java/storage/FileSystemStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class FileSystemStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private static final String rootTestDirectory \u003d System.getProperty(\"user.home\") + \"/DukeTests\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void getInstance() throws StorageException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String storagePath \u003d rootTestDirectory + \"/Tasks.DAT\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FileSystemStorage storage \u003d FileSystemStorage.getInstance(storagePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        boolean isStorageFileCreated \u003d new File(storagePath).exists();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(isStorageFileCreated);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(deleteDirectory(new File(rootTestDirectory)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void readAndWriteTasks() throws StorageException, TaskCreationException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        String storagePath \u003d rootTestDirectory + \"/Tasks.DAT\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        FileSystemStorage storage \u003d FileSystemStorage.getInstance(storagePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ToDo mockTaskA \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Event mockTaskB \u003d new Event(\"hello\", LocalDateTime.now());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskB);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTaskA, storedTasks.get(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTaskB, storedTasks.get(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(deleteDirectory(new File(rootTestDirectory)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private boolean deleteDirectory(File directoryToBeDeleted) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        File[] allContents \u003d directoryToBeDeleted.listFiles();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (allContents !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            for (File file : allContents) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "                deleteDirectory(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return directoryToBeDeleted.delete();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 59
    }
  },
  {
    "path": "src/test/java/storage/InMemStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import duke.task.tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.storage.StorageException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.task.TaskCreationException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class InMemStorageTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void readAndWriteTasks() throws StorageException, TaskCreationException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        InMemStorage storage \u003d new InMemStorage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e mockTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ToDo mockTaskA \u003d new ToDo(\"hello\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Event mockTaskB \u003d new Event(\"hello\", LocalDateTime.now());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskA);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        mockTasks.add(mockTaskB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        storage.writeTasks(mockTasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        List\u003cTask\u003e storedTasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTasks, storedTasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTaskA, storedTasks.get(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(mockTaskB, storedTasks.get(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "src/test/java/ui/StubInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StubInput extends DukeInput {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    boolean isOpen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public StubInput(String input) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        super(false);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Starts listening to user input. Any input received SHOULD BE forwarded to its listeners by passing the input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * into the updateAllListeners(String input) method. In the event that the input channel is blocking, it SHOULD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start the dukeOutput channels first."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param dukeOutputs output channels to be opened before the input channel."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void startInputChannel(DukeOutput... dukeOutputs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (input !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            updateAllListeners(input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Stops listening to user input. Any input received afterwards SHOULD NOT BE forwarded to the controller anymore."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    protected void stopInputChannel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 34
    }
  },
  {
    "path": "src/test/java/ui/StubOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StubOutput extends DukeOutput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private List\u003cString\u003e receivedOutputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    boolean isOpen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Displays output message in a corresponding output channel. Any calls to displayOutput(String message) before"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * start() is called all after stop() is called SHOULD THROW a UiException."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @param message output to be displayed in the output channel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * @throws UiException when implemented output channel fails to display the output."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void displayOutput(String message) throws UiException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        receivedOutputs.add(message);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Opens the output channel."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void startOutputChannel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     * Closes the output channel."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void stopOutputChannel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.isOpen \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public List\u003cString\u003e getReceivedOutputs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        return this.receivedOutputs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 43
    }
  },
  {
    "path": "src/test/java/ui/StubUiDriver.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class StubUiDriver implements UiDriver {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    String expectedInput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void setExpectedInput(String input) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        this.expectedInput \u003d input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    public void receiveUserInput(String input) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        if (expectedInput !\u003d null) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            assertEquals(input, expectedInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 18
    }
  },
  {
    "path": "src/test/java/ui/UiFactoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "public class UiFactoryTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void testUiControllerFactory() throws NoSuchFieldException, IllegalAccessException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StubUiDriver driver \u003d new StubUiDriver();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        for (UiType type : UiType.values()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Ui controller \u003d UiControllerFactory.createUiController(driver, type);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Field dukeInputField \u003d controller.getClass().getDeclaredField(\"inputChannel\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Field dukeOutputField \u003d controller.getClass().getDeclaredField(\"outputChannel\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            dukeInputField.setAccessible(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            dukeOutputField.setAccessible(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DukeInput createdInput \u003d (DukeInput) dukeInputField.get(controller);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            DukeOutput createdOutput \u003d (DukeOutput) dukeOutputField.get(controller);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(type.input.get().getClass(), createdInput.getClass());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertEquals(type.output.get().getClass(), createdOutput.getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 30
    }
  },
  {
    "path": "src/test/java/ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import error.ui.UiInitializationException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.CompletableFuture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "class UiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    private StubUiDriver stubUiDriver \u003d new StubUiDriver();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void controllerShouldNotDisplayMessageIfUninitialized() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Ui ui \u003d new Ui(new StubInput(null), new StubOutput(), stubUiDriver);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UiOutputAccessor outputAccessor \u003d ui.getUiOutputAccessor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertThrows(UiException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            outputAccessor.displayOutput(\"hello\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void receiveInput() throws UiInitializationException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        stubUiDriver.setExpectedInput(\"ABCDE12345\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Ui ui \u003d new Ui(new StubInput(\"ABCDE12345\"), new StubOutput(), stubUiDriver);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.initializeUi();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void displayOutput() throws UiException, UiInitializationException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StubOutput output \u003d new StubOutput();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Ui ui \u003d new Ui(new StubInput(null), output, stubUiDriver);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        UiOutputAccessor outputAccessor \u003d ui.getUiOutputAccessor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.initializeUi();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        outputAccessor.displayOutput(\"1\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        outputAccessor.displayOutput(\"2\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        outputAccessor.displayOutput(\"3\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(output.getReceivedOutputs().get(0), \"1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(output.getReceivedOutputs().get(1), \"2\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertEquals(output.getReceivedOutputs().get(2), \"3\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void initializeUi() throws UiInitializationException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StubInput input \u003d new StubInput(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StubOutput output \u003d new StubOutput();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Ui ui \u003d new Ui(input, output, stubUiDriver);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.initializeUi();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(ui.isUiInitialized());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(input.isOpen);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Assertions.assertTrue(output.isOpen);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    void stopUi() throws UiInitializationException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StubInput input \u003d new StubInput(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        StubOutput output \u003d new StubOutput();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        Ui ui \u003d new Ui(input, output, stubUiDriver);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.initializeUi();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        ui.stopUi();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        CompletableFuture.delayedExecutor(1, TimeUnit.SECONDS).execute(() -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertFalse(input.isOpen);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "            Assertions.assertFalse(output.isOpen);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 74
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "event project meeting /at 24th aug 7pm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # delete output from previous run if exists"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   # compare the output to the expected output and deletes output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "   "
      }
    ],
    "authorContributionMap": {
      "limhawjia": 38
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the duke.task `clean` simply deletes the project build directory. Tasks can be composed of other duke.task.tasks or be dependent on another duke.task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* **Properties** change the behavior of duke.task.tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the duke.command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":bulb: Simply run the duke.command `gradlew {taskName}` in the terminal and Gradle will run the duke.task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "* `gradlew duke.task.tasks` (or `gradlew duke.task.tasks --all`): shows a list of duke.task.tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limhawjia"
        },
        "content": ":bulb: Some plugins may add more helpful duke.task.tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle duke.task.tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle duke.task.tasks without needing to type a `gradlew` duke.command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build duke.task.tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the duke.command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Now you can run the duke.command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the duke.command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "│     └─seedu/duke/duke.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "Now that you have a general idea of how to accomplish basic duke.task.tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 15,
      "-": 155
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective error.handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limhawjia"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these duke.task.tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "limhawjia": 2,
      "-": 241
    }
  }
]
