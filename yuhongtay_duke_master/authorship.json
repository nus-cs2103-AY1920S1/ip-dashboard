[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "run {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 36,
      "-": 15
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] training"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[E][?] testEvent (at: 20/9/2010 0500-0530)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] sleep"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] hi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 2"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 3"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 4"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 5"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 6"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 7"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 8"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 9"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 10"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 11"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 12"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 12"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 13"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 14"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 15"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 16"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 17"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 18"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 19"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 20"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] 22"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[E][?] 15 (at: 20/11/2019 1500-1530)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] a"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "[T][?] b"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 125
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Duke extends Application{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Duke with no params."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Required to for javaFx application to function."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Duke(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String filePath \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param filePath String indicating filepath to txt file for storing and loading of  Task List."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Method which is called to properly start the program."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ui.showLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showGoodbye();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Duke(\"data/tasks.txt\").run();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer \u003d new VBox(20);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String welcomeText \u003d displayWelcome();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.getChildren().add("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getUserDialog(welcomeText, duke));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String displayWelcome(){"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return outContent.toString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String dukeText \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getUserDialog(userText, user),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        );"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (dukeText.replace(\" \",\"\").substring(0,3).equals(\"Bye\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                PauseTransition pause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                pause.setOnFinished(event -\u003e Platform.exit());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                pause.play();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (c.isExit()){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                ui.showGoodbye();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return outContent.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 206,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 12
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 49
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to add a new Task to Task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String specifics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for AddCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskType type of task (e.g. deadline, event etc.)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param specifics includes the task name as well as the date and time in the case of DEADLINE and EVENT."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public AddCommand(FullCommand taskType, String specifics) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d taskType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.specifics \u003d specifics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is an AddCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * adds task corresponding to command type and specifics to TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList to add the task to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList stored in storage.filepath."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Creating new Deadline and Event throws exception if not written in correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case TODO:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Todo(specifics);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Deadline(specifics);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            newTask \u003d new Event(specifics);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        tasks.addTask(newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readTask(newTask, tasks.taskNum);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (tasks.isFirst) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            tasks.isFirst \u003d !tasks.isFirst;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage.writeToFile(System.lineSeparator());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        storage.writeToFile(newTask.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 66
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Abstract class which all other command classes extend. (AddCommand etc...) with the exception of FulLCommand enum."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    FullCommand type;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Checks to see if type equals FullCommand.BYE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean value whether this is an Exit command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return type.getName().equals(\"bye\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Carries out the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException subclass of Command may throw DukeException when executed with invalid specification."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 30
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to remove Task from Task List."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for DeleteCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index the index of the task to delete n the Task List."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.DELETE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is a DeleteCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Removes the current (index)th task from the task list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks Current TaskList object used in this instance of Duke. Removes specified task from tasks.schedule."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage Updates data record of TaskList in storage.filepath."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task removedTask \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.readDelete(removedTask, tasks.taskNum);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage.editFile(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer for index of task to delete.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 50
    }
  },
  {
    "path": "src/main/java/command/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    int index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for EditCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index index of Task in TaskList to mark as done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public EditCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.DONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used tp check if command is an ExitCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false as command is an EditCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Marks the (index)th task in TaskList as done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when index \u003d\u003d 0, or when index is larger than number of Task(s) in TaskList,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *                       or when index of Task to markAsComplete is not properly presented."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Task completedTask \u003d tasks.complete(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            ui.readDone(completedTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            storage.editFile(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Index out of bounds.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Please enter a single integer index of task to delete.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 51
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to end program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.type \u003d FullCommand.BYE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /** Used by Duke class method run to check for exit command and terminate program if exit command is found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return true as command is ExitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Closes FileWriter used by storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke. Not needed here."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user. Not needed here."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage closes FileWriter of storage. Changes to Task List are recorded in storage.filepath."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException if invalid filepath. (Directory tampered with when program is running)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        storage.closeWriter();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 34
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to list all tasks containing keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param keyword when executed, will search for all tasks with keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.FIND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * FindCommand is not a ExitCommand."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates a TaskList shortlist containing only tasks with the keyword."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Passes TaskList as an argument for ui.showMatches to display to user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList containing all Tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException should not be thrown for this Command subclass."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ArrayList\u003cTask\u003e shortlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (Task task: tasks.getList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (task.findWord(keyword)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                shortlist.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.showMatches(new TaskList(shortlist));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 55
    }
  },
  {
    "path": "src/main/java/command/FullCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Enum detailing all the valid commands Duke understands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Used by Parser to generate Command Object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Easy way to check if user types invalid command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public enum FullCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    LIST(\"list\"), DONE(\"done\"), DELETE(\"delete\"), TODO(\"todo\"), DEADLINE(\"deadline\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        EVENT(\"event\"), BYE(\"bye\"), FIND(\"find\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private FullCommand(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Generates FullCommand based on String user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param keyword Specifies the type of FullCommand)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return return FullCommand to be parsed by parser."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException Thrown when user enters invalid command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static FullCommand getByName(String keyword) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (FullCommand command : values()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (command.getName().equals(keyword)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return command;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        throw new DukeException(\"no such command\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 40
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Command to display the full list of recorded tasks to user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor of ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.type \u003d FullCommand.LIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to check if command is an ExitCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return ConstructorCommand is not ExitCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Passes TaskList as an argument for ui.readList to display to user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks current TaskList object used in this instance of Duke.."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param ui Instance of user interface to print feedback to user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage updates data record of TaskList in storage.filepath if needed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException should not be thrown for this Command subclass."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ui.readList(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 39
    }
  },
  {
    "path": "src/main/java/datetime/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Wrapper of LocalDateTime. Stores date and time for Task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private LocalTime endTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private String display;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static DateTimeFormatter getStart \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static DateTimeFormatter getTime \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Deadline object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from user input and gets date and time of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/M/yyyy HHmm)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Deadline object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown if date_time is not presented in the correct form."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime setDeadline(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime deadline \u003d new DateTime();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            deadline.start \u003d LocalDateTime.parse(dateTime, getStart);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            deadline.display \u003d deadline.start.format(getStart);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Deadline date/time format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in date(d/M/yyyy) time(HHmm)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Deadline object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from text file and gets date and time of the task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/M/yyyy HHmm)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Deadline object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime readDeadLine(String dateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime deadline \u003d new DateTime();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        deadline.start \u003d LocalDateTime.parse(dateTime, getStart);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        deadline.display \u003d deadline.start.format(getStart);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Event object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from user input and gets date, start time and end time of task."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/MM/yyyy HHmm-HHmm)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Event object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown if missing end time or if date_time is not presented in the correct form."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime setEventTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime event \u003d new DateTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            int divider \u003d dateTime.indexOf(\"-\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (divider \u003d\u003d -1 || (divider \u003d\u003d dateTime.length() - 1)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Need to have end time.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String end \u003d dateTime.substring(divider + 1, dateTime.length());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.start \u003d LocalDateTime.parse(dateTime.substring(0, divider), getStart);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            event.display \u003d event.start.format(getStart) + \"-\" + event.endTime.format(getTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Event date/time format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in date(d/M/yyyy) start_time(HHmm)-end_time(HHmm)\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction of Event object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads substring from text file and gets date, start time and end time of task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dateTime Must be in the form (d/M/yyyy HHmm-HHmm)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return DateTime object as dateTime parameter of Event object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown if missing end time. This should not happen unless text file was tempered with."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static DateTime readEventTime(String dateTime) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime event \u003d new DateTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d dateTime.indexOf(\"-\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d dateTime.length() - 1)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            || dateTime.substring(divider + 1).replace(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Need to have end time.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String end \u003d dateTime.substring(divider + 1, dateTime.length());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.start \u003d LocalDateTime.parse(dateTime.substring(0, divider), getStart);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.endTime \u003d LocalTime.parse(end, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        event.display \u003d event.start.format(getStart) + \"-\" + event.endTime.format(getTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Originally used to add suffix to date of month."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param dd day of month as a 2 digit number."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return 1 or 2 digit number with appropriate suffix."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private static String getDayOfMonth(String dd) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (dd.substring(0,1).equals(\"0\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            dd \u003d dd.substring(1, dd.length());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int day \u003d Integer.parseInt(dd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (day \u003e\u003d 11 \u0026\u0026 day \u003c\u003d 13) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return day + \"th\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (day % 10) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return day + \"st\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return day + \"nd\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return day + \"rd\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return day + \"th\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 126
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Wraps exception. Helps to check if exception has been accounted for."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Catches exception and throws DukeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/java/filewriter/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package filewriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Class used to store and read from text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    FileWriter fw;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    boolean willAppend \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor of Storage object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param filepath filepath to text file to be read from and edited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException When CreateWriter throws DukeException."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Storage(String filepath) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.filePath \u003d filepath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.createWriter();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Creates FileWriter member fw."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException when invalid filepath."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void createWriter() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fw \u003d new FileWriter(filePath, willAppend);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"invalid filepath\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Wrapper to close FileWriter fw."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used in Execute method of ExitCommand object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException when invalid filepath."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void closeWriter() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"invalid filepath\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds Task to TaskList data stored in txt file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during execute method of addCommand object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param textToAdd (Command Object).to String();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when IOException is caught."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void writeToFile(String textToAdd) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            checkAppend(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fw.write(textToAdd + \"\\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            //System.out.println(textToAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"failed to write to file\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Rewrites data in txt file with editions made."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when Execute command of DeleteCommand or EditCommand object modifies TaskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param schedule Modified contents of TaskList."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when IOException is caught."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void editFile(TaskList schedule) throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            checkAppend(false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (Task task: schedule.getList()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                fw.write(task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"failed to write to file\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toggles willAppend boolean, which determines if FileWriter fw will append to txt file or overwrite it."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param toAppend new boolean value of toAppend."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when createWriter throws DukeException."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private void checkAppend(boolean toAppend) throws DukeException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        closeWriter();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        willAppend \u003d toAppend;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        createWriter();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Method to interpret each line in txt file and add corresponding Task to TaskList."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param line every line in the txt file represents a task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return Task object with type, task name, date and timing as described in String."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when Task is not stored in the correct format in txt file."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    private Task read(String line) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task output;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        switch (line.charAt(line.indexOf(\"[\") + 1)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \u0027T\u0027:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output \u003d new Todo(line.substring(7, line.length()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        case \u0027D\u0027:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                int divider \u003d line.indexOf(\"(by:\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String input \u003d line.substring(7, divider);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                input +\u003d \"/by \" + DateTime.readDeadLine(line.substring(divider + 5, line.length() - 1)).toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output \u003d new Deadline(input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Deadline task not stored properly.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                int divider \u003d line.indexOf(\"(at:\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String input \u003d line.substring(7, divider);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                input +\u003d \"/at \" + DateTime.readEventTime(line.substring(divider + 5, line.length() - 1)).toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output \u003d new Event(input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return output;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                throw new DukeException(\"Event task not stored properly.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Reads txt file and updates TaskList accordingly."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Calls read method line by line, and gets corresponding Task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Check each line to check if Task should markAsDone."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return object with updated ArrayList taskList used in construction of TaskList object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException when read throws DukeException."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Storage load() throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            File f \u003d new File(filePath); // create a File for the given file path"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (! line.equals(\"\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    Task newTask \u003d read(line.replace(\"\\n\", \"\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    if (line.substring(4,5).equals(\"\\u2713\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                        newTask.markAsDone();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    taskList.add(newTask);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"File not found!\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Unforseen load errors: \" + e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called during construction method of TaskList."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return ArrayList of Task"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ArrayList\u003cTask\u003e getSchedule() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 178
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.FullCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Used to parse String user input/ text file to get corresponding Command object to execute."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Process user input/ line from txt file and gets appropriate command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param instruction String from user input/ text file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return Corresponding Task to be executed in run method of Duke class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException When there are no matching command. i.e user input or line from txt file is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public static Command parse(String instruction) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String[] wordArr \u003d instruction.split(\" \", 2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        FullCommand command \u003d FullCommand.getByName(wordArr[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new EditCommand(Integer.parseInt(wordArr[1]) - 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new DeleteCommand(Integer.parseInt(wordArr[1]) - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new FindCommand(wordArr[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                if (wordArr[1].equals(\"\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    throw new DukeException(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                return new AddCommand(command, wordArr[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (IndexOutOfBoundsException | DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Give instructions in the format: (instruction type) (details)\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"\u0027done\u0027 and \u0027delete\u0027 must be followed by an integer index.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 51
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Deadline task object. Has an task name, date and time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    DateTime dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Deadline object. Called when generating TaskList based on user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description includes task name, date and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when description format is incorrect. or when setDeadline throws DukeException."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Deadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d description.indexOf(\"/by\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || description.substring(divider + 4).replace(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Deadline format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Deadline (taskname) /by date(d/MM/yyyy) time(HHmm)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dateTime \u003d DateTime.setDeadline(description.substring(divider + 4, description.length()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.description \u003d super.description.substring(0, divider);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toString method of DeadLine."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return String denoting task name, status date and time of Deadline task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[D][\" + super.getStatusIcon() + \"]\" + \" \" + super.description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"(by: \" + dateTime.toString() + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 40
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import datetime.DateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Event task object. Has an task name, date, starting time and ending time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    DateTime dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Event object. Called when generating TaskList based on user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description contains task name, date, starting time and ending time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws DukeException thrown when description format is incorrect. or when setEventTime throws DukeException."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Event(String description) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        int divider \u003d description.indexOf(\"/at\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (divider \u003d\u003d -1 || (divider \u003d\u003d description.length() - 3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                || description.substring(divider + 4).replace(\" \", \"\").equals(\"\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throw new DukeException(\"Incorrect Event format\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Event (taskname) /by date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        dateTime \u003d DateTime.setEventTime(description.substring(divider + 4, description.length()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.description \u003d super.description.substring(0, divider);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toString method of Event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return String denoting task name, status, date, and starting and ending time of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[E][\" + super.getStatusIcon() + \"]\" + \" \" + super.description + \"(at: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + dateTime.toString() + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 40
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Abstract class which all other Task classes extend. (Event etc...)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    protected boolean deleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *Constructor method of Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param description contains information of Task. Includes task name and may include date and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.deleted \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of findCommand is called."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Checks to see if description of task contains keyword."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param keyword word/phrase to find in description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return boolean value indicating if word/phrase can be found in description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean findWord(String keyword) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (description.indexOf(keyword) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called in toString method. Indicates status of completion of task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return tick if task is completed, and cross otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * sets isDone value to true."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 54
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import filewriter.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Object containing data structure to store Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    ArrayList\u003cTask\u003e schedule \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public int taskNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public boolean isFirst;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Task List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when generating Task List from txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param storage contains ArrayList of Task specified from txt file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            this.schedule \u003d storage.getSchedule();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            taskNum \u003d schedule.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            if (taskNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isFirst \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                isFirst \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Task List."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.schedule \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum \u003d schedule.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Constructor for Task List."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param schedule ArrayList of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e schedule) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum \u003d schedule.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            isFirst \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Gets Task corresponding to specified index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index indicates which task in the task list to return."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return Task as specified by index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return schedule.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Marks a Task in task list as done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index Specifies which task to mark as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return completed Task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NullPointerException thrown if schedule.get(index) attempts to reference an object with a null value."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IndexOutOfBoundsException thrown when index is greater than number of Task(s) in schedule."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NumberFormatException thrown if index is not of type int."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task complete(int index)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throws NullPointerException, IndexOutOfBoundsException, NumberFormatException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task completedTask \u003d schedule.get(index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        completedTask.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return completedTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Adds new Task to TaskList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param task Task to add."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule.add(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Deletes Task from TaskList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param index Specifies which task to delete."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return deleted Task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NullPointerException thrown if schedule.get(index) attempts to reference an object with a null value."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws IndexOutOfBoundsException thrown when index is greater than number of Task(s) in schedule."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @throws NumberFormatException thrown if index is not of type int."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Task remove(int index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            throws NullPointerException, IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task removedTask \u003d schedule.get(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        schedule.remove(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used to get ArrayList schedule from TaskList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of FindCommand is called."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return ArrayList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * toString method of TaskList."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return contents of TaskList. i.e. tasks."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        if (taskNum !\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            for (int index \u003d 0; index \u003c taskNum; index++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                Task task \u003d schedule.get(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                output +\u003d (\"     \" + (index + 1) + \".\" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output.substring(0, output.length() - 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 138
    }
  },
  {
    "path": "src/main/java/task/TaskStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Used for testing purposes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class TaskStub extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public TaskStub(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super.isDone \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 23
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Extends Task. Has a task name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public Todo(String description) throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"[T][\" + super.getStatusIcon() + \"]\" + \" \" + super.description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 19
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " * Determines what is displayed to user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called at the start of program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String logo \u003d \"     ____        _        \\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    |  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    | | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    | |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    |____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"    Hello! I\u0027m \\n\" + logo + \"\\n    What can I do for you?\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of ExitCommand is called."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showGoodbye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"    Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Used for printing border."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showLine() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String output \u003d \"    \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        for (int n \u003d 0; n \u003c 50; n++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            output +\u003d \"_\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * reads user input."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @return String to be parsed by parser."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when a task is entered by user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute of AddTask is called."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param newTask task entered."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskNum  number of tasks in Task List."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readTask(Task newTask, int taskNum) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + newTask.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Now you have \" + taskNum + \" tasks in the list.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays delete message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute of DeleteCommand is called."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param removedTask Task being removed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param taskNum      Number of Task(s) left in the Task List."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDelete(Task removedTask, int taskNum) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + removedTask.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Now you have \" + taskNum + \" tasks in the list.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays message when a user finishes a task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Calls when execute of EditCommand is called."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param completedTask Task which has been marked as done."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDone(Task completedTask) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"       \" + completedTask.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays contents of Task List."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute of ListCommand is called."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readList(TaskList tasks) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Here are the task(s) in your list: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(tasks);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Displays matching Tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when execute method of FindCommand is called."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param tasks TaskList of tasks with keyword."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showMatches(TaskList tasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     Here are the matching task(s) in your list: \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(tasks);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Display message when DukeException is caught."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * @param errorMsg DukeException e.getMessage()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showError(String errorMsg) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! \" + errorMsg);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called when Duke Exception is thrown when instantiating Task List and/ or Storage Objects."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     * Called by run method in Duke class."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.out.println(\"     ☹ OOPS!!! Loading Error\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        showLine();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 146
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cFont name\u003d\"System Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" textFill\u003d\"#239281\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cFont name\u003d\"System Bold Italic\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 26
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 10
    }
  },
  {
    "path": "src/test/java/Ui/UiTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import task.TaskStub;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class UiTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readTaskTest(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Task Message\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readTask(test, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Got it. I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"       Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"     Now you have 1 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                               + System.lineSeparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDeleteTest(){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Task Message\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readDelete(test, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Noted. I\u0027ve removed this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"       Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"     Now you have 0 tasks in the list.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDone(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        Task test \u003d new TaskStub(\"Completed Task Message\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        System.setOut(new PrintStream(outContent));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        new Ui().readDone(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        String expectedMessage \u003d \"     Nice! I\u0027ve marked this task as done:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"       Completed Task Message\" + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + \"    ________________________________________________________________________________\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                + System.lineSeparator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(expectedMessage, outContent.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 53
    }
  },
  {
    "path": "src/test/java/datetime/DateTimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package datetime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DateTimeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setDeadLine_incorrectFormat_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setDeadline(\"30.11.2019 05:00\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Incorrect Deadline date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/M/yyyy) time(HHmm)\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readDeadLineTest(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        DateTime deadline \u003d DateTime.readDeadLine(\"30/11/2019 0500\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        assertEquals(\"30/11/2019 0500\", deadline.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEventTime_noEndTime_exceptionThrown(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setEventTime(\"30/11/2019 0500-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Need to have end time.\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void setEventTime_incorrectFormat_exceptionThrown(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime.setEventTime(\"30.11.2019 05:00-05:30\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Incorrect Event date/time format.\" + System.lineSeparator() +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    \"    Please key in date(d/M/yyyy) start_time(HHmm)-end_time(HHmm)\", e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readEventTimeTest(){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2019 0500-0600\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"30/11/2019 0500-0600\", eventTime.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    public void readEventTime_noEndTime_exceptionThrown(){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            DateTime eventTime \u003d DateTime.readEventTime(\"30/11/2019 0500-\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(\"Need to have end time.\", e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 63
    }
  },
  {
    "path": "src/test/java/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void constructor_noDate_exceptionThrown(){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"Generate Exception /by    \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String expectedOutput \u003d \"Incorrect Deadline format.\" + System.lineSeparator()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Deadline (taskname) /by date(d/MM/yyyy) time(HHmm)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(expectedOutput, e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 24
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    void constructor_noDate_exceptionThrown(){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            Event event \u003d new Event(\"Generate Exception\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }catch (DukeException e){"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            String expectedOutput \u003d \"Incorrect Event format\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "                    + \"    Please key in Event (taskname) /by date(d/MM/yyyy) start_time(HHmm)-end_time(HHmm)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "            assertEquals(expectedOutput, e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 20
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 5
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuhongtay"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "yuhongtay": 21
    }
  }
]
