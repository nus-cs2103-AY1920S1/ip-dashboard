[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a DialogBox with the specified text and image."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param text specified text for the dialog box."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param img specified image for the dialog box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Circle clip \u003d new Circle(50, 35, 50);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Gets dialog box for the user with the specified text and image."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param text specified text that was input by user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param img specified image for the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return DialogBox for user with the specified text and image."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Gets dialog box for Duke with the specified text and image."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param text specified text with Duke\u0027s response to the user\u0027s input."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param img specified image for Duke."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return Dialogbox for user with the specified text and image."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 83
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents Duke, a personal chatbot assistant."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        storage \u003d new Storage(\"src/main/java/tasklists.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Starts the Duke program."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui.hello();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ui.takeInUserInput();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Gets the appropriate response with the specified input/command given by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param input given by the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return String the appropriate response to the user\u0027s input.hello"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assert(input !\u003d null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                storage.overwriteTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            return ui.getByeResponse();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.readUserInput(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getHello() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getHelloMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 57,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.setRoot(mainWindow);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            mainWindow \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Scene scene \u003d new Scene(mainWindow);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // set up hello message on start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String hello \u003d duke.getHello();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            VBox dialogContainer \u003d (VBox) scene.lookup(\"#dialogContainer\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            DialogBox helloDialog \u003d DialogBox.getDukeDialog("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    hello,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    new Image(this.getClass().getResourceAsStream(\"/images/shocked_cat.jpg\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            dialogContainer.getChildren().addAll(helloDialog);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 41
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/looking_out_window_cat.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/shocked_cat.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            timer.schedule(new TimerTask() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }, 1000);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 66
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Parser object that deals with making sense of the user command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor for a Parser object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Executes the specified command by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command The specified command given by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws InvalidCommandException if an invalid or recognisable command is given by the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException if there are missing inputs when creating a Deadline or Event task, such as the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     deadline or event time and day."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingDescriptionException if a description is missing for the task that the user is trying to create."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String executeCommand(String command) throws InvalidCommandException, MissingInputException,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            MissingDescriptionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String[] commandWords \u003d command.trim().split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String commandType \u003d commandWords[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            //.printList(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d ui.getListResponse(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d taskList.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            int taskNumber2 \u003d Integer.parseInt(commandWords[1]);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d taskList.deleteTask(taskNumber2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d taskList.findMatchingTasks(commandWords[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d addTask(command, commandType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d this.ui.getByeResponse();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new InvalidCommandException(\"\\t☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command The specified command given by the user."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskType The type of the task that the user wants to add to the tasks list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingDescriptionException if a description is missing for the task that the user is trying to create."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws MissingInputException if there are missing inputs when creating a Deadline or Event task, such as the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     deadline or event time and day."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private String addTask(String command, String taskType) throws MissingDescriptionException, MissingInputException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String desc \u003d command.substring(taskType.length()).trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task task \u003d new Task();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        if (desc.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            throw new MissingDescriptionException(\"☹ OOPS!!! The description of \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case (\"todo\"):"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d new Todo(desc);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case (\"deadline\"):"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (!desc.contains(\"/by\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException(\"☹ OOPS!!! The deadline cannot be found because /by is missing\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String[] splitDeadlineDesc \u003d desc.split(\"/by\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            desc \u003d splitDeadlineDesc[0].trim(); // first element in string array is solely the task description"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // second element in string array is the deadline of the task, unless it is not found"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String deadline;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                deadline \u003d splitDeadlineDesc[1].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // above exception will be thrown when the splitDeadlineDesc only has one element"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // this means that there is nothing after /by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException(\"☹ OOPS!!! The deadline cannot be found after /by\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d new Deadline(desc, deadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        case (\"event\"):"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (!desc.contains(\"/at\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        \"☹ OOPS!!! The event date and time cannot be found because /at is missing\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                );"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String[] splitEventDesc \u003d desc.split(\"/at\"); // first element is simply the string description"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            // second element would be the event time/day, unless it is not found"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            desc \u003d splitEventDesc[0].trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String when;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                when \u003d splitEventDesc[1].trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // above exception will be thrown when the splitEventDesc only has one element"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // this means that there is nothing after /at"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                throw new MissingInputException(\"☹ OOPS!!! The event date and time cannot be found after /at\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            task \u003d new Event(desc, when);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return taskList.addTask(task);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 145
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Storage object that deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * The path to the file that contains the tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor that creates a Storage object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Storage object with the specified file path."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param filePath The path to the file that contains the tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Storage.filePath \u003d filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Loads the tasks from the file and stores it in an ArrayList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return The list of tasks that was read from the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws FileNotFoundException if the file cannot be found in the specified path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String line \u003d sc.nextLine(); // eg. T,0,read book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String[] taskDetails \u003d line.split(\",\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            int booleanInt \u003d Integer.parseInt(taskDetails[1]); // 0 or 1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Todo todo \u003d new Todo(taskDetails[2], booleanInt \u003d\u003d 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(todo);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Deadline deadline \u003d new Deadline(taskDetails[2], booleanInt \u003d\u003d 0, taskDetails[3]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(deadline);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                Event event \u003d new Event(taskDetails[2], booleanInt \u003d\u003d 0, taskDetails[3]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                list.add(event);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Saves the tasks in the file by overwriting them."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @throws IOException if an I/O error occurs."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void overwriteTasks() throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String fileContent \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                fileContent +\u003d \"T,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                // format the task in the way it was read from the file"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                fileContent +\u003d \"D,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc() + \",\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        // format the date and time back to how it was read from the file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        + ((Deadline)task).getDeadline().format(formatter);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                fileContent +\u003d \"E,\" + (task.isDone() ? 0 : 1) + \",\" + task.getDesc() + \",\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                        + ((Event)task).getWhen().format(formatter);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fileContent +\u003d System.lineSeparator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fw.write(fileContent);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 106
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents and contains the tasks list and operations surrounding the tasks list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor to create the TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates the TaskList object with the specified taskList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskList The specified ArrayList of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList.tasks \u003d taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        TaskList.tasks \u003d tasks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Adds the specified task to the tasks list and prints the necessary output."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task The specified task to be added."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getAddTaskResponse(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Marks the task with the specified task number as done and prints the necessary output."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskNo The specified number of the task that is to be marked as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String markAsDone(int taskNo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task taskDone \u003d tasks.get(taskNo - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        taskDone.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getDoneTaskResponse(taskDone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Deletes the task with the specified task number from the tasks list and prints the necessary output."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param taskNumber The specified number of the task to be deleted from the tasks list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Task task \u003d tasks.remove(taskNumber - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getDeleteTaskResponse(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Find the matching tasks in the task list with the specified keyword."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param keyword The specified keyword that the matching tasks will contain."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String findMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String desc;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (Task task : TaskList.tasks) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            desc \u003d task.getDesc();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            if (desc.contains(keyword)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return ui.getFindTaskResponse(matchingTasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 87
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents the UI and deals with interactions with the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor that creates the Ui object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the hello message at the start of the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void hello() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String openingMessage \u003d \"\\tHello! I\u0027m Duke\\n\\tWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(openingMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getHelloMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"\\tHello! I\u0027m Duke\\n\\tWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Takes in user input and passes it on to a Parser object to deal with the input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void takeInUserInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            String command \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            command \u003d command.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                parser.executeCommand(command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            } catch (InvalidCommandException | MissingInputException | MissingDescriptionException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Reads input given by the user and passes it to a Parser class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param command the input given by the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response to user\u0027s input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String readUserInput(String command) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output \u003d parser.executeCommand(command.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (InvalidCommandException | MissingInputException | MissingDescriptionException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output +\u003d e.getMessage();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assert(output !\u003d null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the necessary output when a specific task is added to the tasks list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task The specified task that was added to the task list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void printAddedTask(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tGot it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int size \u003d (new TaskList()).getSize();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the response that Duke gives when a task is added to the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specifed task that is added to the task list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response that Duke gives to inform the user that the specified task is added to the list and the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     current number of tasks in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getAddTaskResponse(Task task) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output \u003d \"\\tGot it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        output +\u003d (\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int size \u003d (new TaskList()).getSize();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        output +\u003d String.format(\"\\tNow you have %d tasks in the list.\", size);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void printMarkAsDone(Task task) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tNice! I\u0027ve marked this task as done:\\n\\t\\t\" + task.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the response that Duke gives when the specified task is marked as done."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specified task that is marked as done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response that Duke gives to inform the user that the specified task is marked as done."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDoneTaskResponse(Task task) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"\\tNice! I\u0027ve marked this task as done:\\n\\t\\t\" + task.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the necessary output when a specific task is deleted from the tasks list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task The specified task that was deleted from the task list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void printDeletedTask(Task task) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tNoted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int size \u003d (new TaskList()).getSize();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(String.format(\"\\tNow you have %d tasks in the list.\", size));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the response that Duke gives when a task is deleted from the task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param task the specified task that is deleted from the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives to let the user know that the corresponding task has been"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     *     deleted."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDeleteTaskResponse(Task task) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        String output \u003d \"\\tNoted. I\u0027ve removed this task:\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        output +\u003d \"\\t  \" + task.toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        int size \u003d (new TaskList()).getSize();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        output +\u003d String.format(\"\\tNow you have %d tasks in the list.\", size);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the specified matching tasks one by one."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param matchingTasks the specified list of matching tasks."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void printMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tHere are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(String.format(\"\\t%d.%s\", i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the appropriate response that Duke gives when the user wants to find certain tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param matchingTasks the list of matching tasks that are found for the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the response that Duke gives for the user to view the matching tasks."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getFindTaskResponse(ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"\\tHere are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output.append(String.format(\"\\t%d.%s\", i + 1, matchingTasks.get(i)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the entire list task by task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tHere are the tasks in your list:\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(String.format(\"\\t%d.%s\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the appropriate response that Duke gives when the user wants to view the task list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param tasks the current list of tasks."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives for the user to view the task list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getListResponse(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        StringBuilder output \u003d new StringBuilder(\"\\tHere are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            output.append(String.format(\"\\t%d.%s\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Prints the exit message when user exits the program. Overwrites the tasks in the stored tasks file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.out.println(\"\\tBye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        Storage storage \u003d new Storage();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            storage.overwriteTasks();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Retrieves the appropriate response when the user enters \"bye\", i.e. wants to exit the program."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return the appropriate response that Duke gives when the user enters \"bye\"."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getByeResponse() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return \"\\tBye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 203
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class to represent exceptions specific to Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String errorMessage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 18
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when an invalid command is given to Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public InvalidCommandException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when a task is missing its description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MissingDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public MissingDescriptionException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 17
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a custom exceptions class that extends from DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * This exception is thrown when there are missing inputs such as the deadline or event time/day."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class MissingInputException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Constructs a new exception with the specified detail message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param errorMessage the detail message. It is saved for later retrieval by the Throwable.getMessage() method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public MissingInputException(String errorMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 17
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Deadline task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Deadline task with the specified description and deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the deadline."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param deadline Deadline that the task is due by."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Deadline(String desc, String deadline) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.deadline \u003d convertStringToDateTime(deadline);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Deadline task with the specified description, isDone status and deadline."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Deadline that the task is due by."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the Deadline task is done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param deadline Deadline that the task is due by."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Deadline(String desc, boolean isDone, String deadline) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.deadline \u003d convertStringToDateTime(deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public LocalDateTime getDeadline() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDeadline(String deadline) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.deadline \u003d convertStringToDateTime(deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts the specified string to a LocalDateTime object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param deadline The specified deadline to be converted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return The LocalDateTime of the specified deadline."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime convertStringToDateTime(String deadline) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \"[%s][%s] %s (by: %s)\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \"D\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                super.getDoneSymbol(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                this.desc,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                this.deadline.format(formatter));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 63
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents an Event task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime when;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates an Event task with the associated description and event day and time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param when The event day and time."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Event(String desc, String when) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d convertStringToDateTime(when);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates an Event task with the specified description, isDone status and event day and time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the Event task is done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param when The event day and time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Event(String desc, boolean isDone, String when) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d convertStringToDateTime(when);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public LocalDateTime getWhen() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.when;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setWhen(String when) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.when \u003d convertStringToDateTime(when);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Converts the specified string to a LocalDateTime object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param when The specified event date and time to be converted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @return The LocalDateTime of the specified event date and time."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    private LocalDateTime convertStringToDateTime(String when) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return LocalDateTime.parse(when, formatter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy Hmm\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \"[%s][%s] %s (at: %s)\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \"E\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                super.getDoneSymbol(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                this.desc,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                this.when.format(formatter));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 62
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Task in the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String desc;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String doneSymbol;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * An empty constructor that creates a Task object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Task object with the specified description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task(String desc) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Task object with the specified description and isDone status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the task is done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Task(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String getDesc() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.desc;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDesc(String desc) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void setDone(boolean isDone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected String getDoneSymbol() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return this.isDone ? \"\\u2713\" : \"x\"; // returns check mark or cross"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    protected void setDoneSymbol() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.doneSymbol \u003d isDone ? \"\\u2713\" : \"x\"; // returns check mark or cross"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Marks a task as done, and changes the doneSymbol to a check mark."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        setDoneSymbol();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 72
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " * Represents a Todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Todo with the associated description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the Todo task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Todo(String desc) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * Creates a Todo with the associated description."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param desc Description of the Todo task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     * @param isDone if true, the Todo task is done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public Todo(String desc, boolean isDone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        super(desc, isDone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        return String.format(\"[%s][%s] %s\", \"T\", super.getDoneSymbol(), this.desc);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 30
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"20.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" ellipsisString\u003d\"\" lineSpacing\u003d\"5.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" style\u003d\"-fx-background-color: #add8e6; -fx-fill: #add8e6;\" text\u003d\"Label\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cFont name\u003d\"Garamond\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 27
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"send\" textFill\u003d\"#1c06df\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003cFont name\u003d\"Calibri Light\" size\u003d\"19.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #808080;\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 23
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        //Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 11
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingDescriptionException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.exception.MissingInputException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void executeCommand_InvalidCommand_ExceptionThrown() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            parser.executeCommand(\"listtt\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        } catch (MissingDescriptionException | MissingInputException e) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 23
    }
  },
  {
    "path": "src/test/java/duke/test/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void testStringConversion1() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(\"[D][x] homework (by: 29/12/2019 2359)\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                (new Deadline(\"homework\", \"29/12/2019 2359\")).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void testStringConversion2() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(\"[D][x] homework (by: 1/01/2019 0000)\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "                (new Deadline(\"homework\", \"1/01/2019 0000\")).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jessicax941": 20
    }
  },
  {
    "path": "src/test/java/duke/test/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "package duke.test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "        assertEquals(\"[T][x] read book\", (new Todo(\"read book\")).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jessicax941"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jessicax941"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jessicax941": 16
    }
  }
]
