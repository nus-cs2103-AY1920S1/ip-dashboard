[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 2,
      "-": 37
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    archiveVersion \u003d \"v.1.3\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // It tells the runtime the entry point of your application"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 29,
      "-": 15
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "This is the guide to a product called Duke, a personal assistant chatbot which helps you manage and record your "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "daily tasks!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "## 2. Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003e Notes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003e * Words in UPPER_CASE are details that need to be given by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.1 Add a task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Three types of tasks that can be added into Duke\u0027s tasks list, namely *ToDo, Deadline, and Event*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `[TYPE OF TASK] [DESCRIPTION]`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "The **date and time** given to a **Deadline** or **Event** needs to follow the following format:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Format: `DD/MM/YYYY HHMM`, where time is in 24-Hour format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `15/09/2019 1300`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "#### 2.1.1 Add ToDo"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `todo [TITLE]`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `todo buy grocery`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "#### 2.1.2 Add Deadline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `deadline [TITLE] /by [DATE AND TIME]`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `deadline math quiz /by 18/09/2019 1400`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "#### 2.1.3 Add Event"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `event [TITLE] /at [DATE AND TIME]`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `event workout /at 20/09/2019 1700`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.2 Tentative Schedule "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "An **event** can be given **tentative dates** which can be confirmed later."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `event title /at [DATE AND TIME 1], [DATE AND TIME 2], ...`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `event running /at 18/09/2019 1700, 20/09/2019 0800, 21/09/2019 0900`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "#### 2.2.1 Confirm the date of an event "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Confirm the date of an event, **provided** that it was given tentative dates."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `event setDate [INDEX OF EVENT] [INDEX OF DATE]`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* `event running /at 18/09/2019 1700, 20/09/2019 0800, 21/09/2019 0900`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "* `event setDate 2 3`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "INDEX OF EVENT refers to the index of the event in the tasks list, whereas INDEX OF DATE refers to the index of the date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "in the tentative dates of the event. In the example above, the event is the 2nd task in the tasks list, and the "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "confirmed date it\u0027s the 3rd date in the tentative dates of the event. Thus, the confirmed date of the event is"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "`21/09/2019 0900`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.3 Mark a task as done"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Mark a task in the tasks list as done using the given INDEX of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `done [INDEX]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `done 1`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Condition: "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Index **must be a positive integer** and within the range of 1~N (inclusive), where N is the current total "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "number of tasks in the tasks list. "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.4 Delete a task "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Delete a task from the tasks list using the given INDEX of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `delete [INDEX]`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `delete 3`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Condition: "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Index **must be a positive integer** and within the range of 1~N (inclusive), where N is the current total "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "number of tasks in the tasks list. "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.5 List all tasks "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "List all the tasks in the tasks list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `list`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.6 Find tasks "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Find tasks that contain the KEYWORD given in their description and list them out."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `find [KEYWORD]`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Example: `find quiz`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "### 2.7 Exit "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "---"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Exit the program."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Command: `bye`"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 97,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.ui.controllers.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/views/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke); // To attach duke to the MainWindow"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 32
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a product named duke.Duke, a personal assistant chat bot that helps a person to keep track of various"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * tasks to do. It can add, delete, and list task entries and mark them as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private DukeDatabase database;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private TaskList tasksList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates a Duke chat bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Initialise the essential components of duke bot."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        database \u003d DukeDatabase.getDukeDatabaseInstance();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasksList \u003d database.getAllTasks();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the response relevant to the input after processing it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input input given by user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return response relevant to the input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String response \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Command command \u003d parser.parse(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            response \u003d command.execute(database, tasksList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 45
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command that adds a task into the tasks list of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public AddCommand(Task t) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        task \u003d t;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes the adding command accordingly."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database the database of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList the tasks list of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is incorrect."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasksList.addTask(task);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"Got it I\u0027ve added this task:\\n%s\\nNow you have %s in the list.\\n\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                task.toString(), getTaskPhrase(tasksList.size()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 30
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command to be executed by duke.Duke bot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes the command that this object encapsulates."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param t the taskList of duke.Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param d the database of duke.Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException depending on the actual Command type of the object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public abstract String execute(DukeDatabase d, TaskList t) throws DukeException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the phrase \"N word\" or \"N words\" (singular or plural)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * N is the the number of tasks in the taskList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected String getTaskPhrase(int size) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return size \u003e 1 ? size + \" tasks\" : size + \" task\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 27
    }
  },
  {
    "path": "src/main/java/duke/command/CommandGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A generator which can generate Command objects based on the given user\u0027s input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class CommandGenerator {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an AddCommand which adds a To Do object to Duke\u0027s tasksList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input which is used to generate a To Do object which is then given to the AddCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return an AddCommand which adds a To Do object to Duke\u0027s tasksList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is invalid (e.g. does not follow the syntax required to create a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     To Do object)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public AddCommand getAddCommandForToDo(String input) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String topic \u003d input.substring(4).trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (topic.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ToDo toDo \u003d new ToDo(topic);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new AddCommand(toDo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an AddCommand which adds a Deadline object to Duke\u0027s tasksList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input which is used to generate a Deadline object which is then given to the AddCommand."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return an AddCommand which adds a Deadline object to Duke\u0027s tasksList."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is invalid (e.g. does not follow the syntax required to create a"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     Deadline object)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public AddCommand getAddCommandForDeadline(String input) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] details \u003d input.substring(8).trim().split(\"/by\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isInvalidInput \u003d isInSufficientDetails(details);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (isInvalidInput) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The description and deadline of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Deadline deadline \u003d getDeadline(details);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new AddCommand(deadline);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an AddCommand which adds an Event object to Duke\u0027s tasksList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input which is used to generate an Event object which is then given to the AddCommand."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return an AddCommand which adds an Event object to Duke\u0027s tasksList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is invalid (e.g. does not follow the syntax required to create an"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     Event object)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public AddCommand getAddCommandForEvent(String input) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] details \u003d input.substring(5).trim().split(\"/at\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isInvalidInput \u003d isInSufficientDetails(details);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (isInvalidInput) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The description and date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Event event \u003d getEvent(details);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new AddCommand(event);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a ListCommand which lists all the tasks in the tasks list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a ListCommand which lists all the tasks in the tasks list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ListCommand getListCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a FindCommand which finds a task based on keyword."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input from the UI which consists of the keyword used to find tasks that contains the keyword."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a FindCommand which finds a task based on keyword."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public FindCommand getFindCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String keyword \u003d input.substring(4).trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (keyword.isEmpty()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Keyword cannot be empty!\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a DoneCommand which marks a task in the tasks list as done."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input from the UI which consists of the index used to find the task to be marked as done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a DoneCommand which marks a task in the tasks list as done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the index given by user is invalid(e.g. out of bound)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DoneCommand getDoneCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(4).trim());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new DoneCommand(index - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"There can only be an integer after the word \\\"done\\\"!\", e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a ConfirmEventDateCommand used to confirm the date of an event which previously has tentative dates."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input from the ui which contains the indices used to find the event and the date of the event"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *              to confirm."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a ConfirmEventDateCommand used to confirm the date of an event which previously has tentative dates."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the syntax or input given by the user is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ConfirmEventDateCommand getConfirmEventDateCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"\\\\d\\\\s+\\\\d\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(input);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isValidInput \u003d matcher.find();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!isValidInput) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Syntax of input is invalid\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String[] indicesAsString \u003d matcher.group().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int taskIndex \u003d Integer.parseInt(indicesAsString[0]) - 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int dateIndex \u003d Integer.parseInt(indicesAsString[1]) - 1;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new ConfirmEventDateCommand(taskIndex, dateIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Syntax of input for index is invalid\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a DeleteCommand which deletes a task from the tasks list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input user\u0027s input from the UI which contains the index of the task to be deleted."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a DeleteCommand which deletes a task from Duke\u0027s tasks list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the index given by user is invalid(e.g. out of bound)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DeleteCommand getDeleteCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            int index \u003d Integer.parseInt(input.substring(6).trim());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"There can only be an integer after the word \\\"delete\\\"!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an ExitCommand which terminates the program."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return an ExitCommand which terminates the program."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ExitCommand getExitCommand() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a Deadline object created based on the given details."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param details details of the Deadline task."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a Deadline object created based on the given details."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the details is invalid (e.g. the format of date and time does not follow the"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     required format)."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Deadline getDeadline(String[] details) throws DukeException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String topic \u003d details[0].stripTrailing();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String deadlineUnformatted \u003d details[1].stripLeading(); // Unformatted deadline from user\u0027s input"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String deadline \u003d formatDateAndTime(deadlineUnformatted);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new Deadline(topic, deadline);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The format of date and time is wrong!\", e);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns an Event object created based on the given details."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param details details of the Event task."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return an Event object created based on the given details."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the details is invalid (e.g. the format of date and time does not follow the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     required format)."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Event getEvent(String[] details) throws DukeException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String topic \u003d details[0].trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String dateUnformatted \u003d details[1].trim(); // Unformatted date from user\u0027s input"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            boolean isDateTentative \u003d dateUnformatted.contains(\",\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            if (isDateTentative) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                String[] dates \u003d formatDateAndTimeArray(dateUnformatted);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                return new Event(topic, dates);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                String date \u003d formatDateAndTime(dateUnformatted);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                return new Event(topic, date);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The format of date and time is wrong!\", e);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Formats the date and time given by the user."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param dateTime date and time given by user in format: dd/MM/yyyy HHmm (24 Hours format)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return formatted date and time in format: d Month yyyy, h:mm (12 Hours format)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws ParseException if the format of date and time given by user is incorrect."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String formatDateAndTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        DateFormat inputFormatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        DateFormat outputFormatter \u003d new SimpleDateFormat(\"d MMMM yyyy, h:mm a\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Date date \u003d inputFormatter.parse(dateTime);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return outputFormatter.format(date);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Format a series of date and time given by the user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param dateTimes dates and times given by user in format: dd/MM/yyyy HHmm (24 Hours format)."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return An array of formatted dates and times in format: d Month yyyy, h:mm (12 Hours format)."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws ParseException if the format of dates and times given by user is incorrect."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String[] formatDateAndTimeArray(String dateTimes) throws ParseException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] dates \u003d dateTimes.split(\",\\\\s+\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] datesFormatted \u003d new String[dates.length];"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int size \u003d dates.length;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            datesFormatted[i] \u003d formatDateAndTime(dates[i]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return datesFormatted;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the given details of a Deadline or Event task is not sufficient."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param details details of a Deadline or Event task."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return true if the given details of a Deadline or Event task is not sufficient."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean isInSufficientDetails(String[] details) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isEmptyTopic \u003d details.length \u003d\u003d 0 || \"\".equals(details[0].trim());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isEmptyDate \u003d details.length \u003c\u003d 1 || \"\".equals(details[1].trim());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return isEmptyTopic || isEmptyDate;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 268
    }
  },
  {
    "path": "src/main/java/duke/command/ConfirmEventDateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command used to confirm the date of an event which has tentative dates."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ConfirmEventDateCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int dateIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates a ConfirmEventDateCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param taskIndex the index of the target event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param dateIndex the index of the date to confirm, starts from 1."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ConfirmEventDateCommand(int taskIndex, int dateIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.dateIndex \u003d dateIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Sets the confirmed date of the event, choosing from one of its tentative dates."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database the database of duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList the tasks list of duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a message showing that the confirmed date of the event has been set."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the index of the event and/or the index of the date is lesser than 1 or greater than"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     the total number of tasks and the total number of tentative dates respectively."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Task task \u003d tasksList.getTask(taskIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!(task instanceof Event)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The target task is not an event!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Event event \u003d (Event) task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Event newEvent \u003d ((Event) task).setDate(dateIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasksList.setTask(taskIndex, newEvent);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"Got it, I\u0027ve set the confirmed date of the event:\\n%s\\n\", newEvent.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 49
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command that deletes a task from the tasks list of Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DeleteCommand(int i) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        index \u003d i;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes the delete command accordingly."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList the tasks list of duke.Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database the database of duke.Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is incorrect."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Task task \u003d tasksList.removeTask(index - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %s in the list.\\n\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    task.toString(), getTaskPhrase(tasksList.size()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 31
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command which marks a task in the tasks list of Duke as Done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DoneCommand(int i) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        index \u003d i;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes the update command accordingly."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList the tasks list of Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database the database of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is incorrect."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Task task \u003d tasksList.getTask(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\\n\", task.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 31
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command which terminates duke.Duke bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Executes the exit command accordingly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList the tasks list of duke.Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database the database of duke.Duke."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the user\u0027s input is incorrect."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        database.update(tasksList); // Update the database before program completely terminates"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 25
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a command which finds a task in the tasks list of Duke based on a keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class FindCommand extends QueryCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates a FindCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param k keyword used to find target tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public FindCommand(String k) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        keyword \u003d k;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a message which contains all the matching tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * A task is matching if its description contains the keyword given by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database database of Duke."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList tasks list of Duke."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(250);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String header \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String printedList \u003d getPrintedList(getMatchingList(keyword, tasksList));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(header);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(printedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a TaskList which contains all the tasks that matches the keyword."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param keyword keyword used to find tasks which have the keyword in their description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList  tasks list of Duke."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a TaskList which contains all the tasks that matches the keyword."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private TaskList getMatchingList(String keyword, TaskList tasksList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        TaskList matchingList \u003d new TaskList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ListIterator\u003cTask\u003e iterator \u003d tasksList.listIterator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int size \u003d tasksList.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Find the tasks that have the keyword given by user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // and append their string representation to the message to be printed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.rangeClosed(1, size)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .forEach(i -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    Task currTask \u003d iterator.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    String description \u003d currTask.toString().toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    if (description.contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                        matchingList.addTask(currTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return matchingList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 71
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.DukeDatabase;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulate a command which list all the tasks in the tasks list of Duke."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ListCommand extends QueryCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a message which contains the descriptions of all the tasks in the tasks list of Duke."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param database database of Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList tasks list of Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String execute(DukeDatabase database, TaskList tasksList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(250);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String header \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String printedList \u003d getPrintedList(tasksList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(header);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        builder.append(printedList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 29
    }
  },
  {
    "path": "src/main/java/duke/command/QueryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.component.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A class which serves as the parent of classes which queries the tasks list of Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public abstract class QueryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the printed form of a TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * The TaskList object is printed in this form:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * 1. Task 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * 2. Task 2"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * ... and so on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasksList a TaskList object to be printed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the printed form the TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected String getPrintedList(TaskList tasksList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(200);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ListIterator\u003cTask\u003e iterator \u003d tasksList.listIterator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int size \u003d tasksList.size();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        IntStream.rangeClosed(1, size)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .forEach(index -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    // Append the index of a task follows by its description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    builder.append(index + \". \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    builder.append(iterator.next().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    builder.append(\"\\n\\n\"); // Add a new line in between every task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 40
    }
  },
  {
    "path": "src/main/java/duke/component/DukeDatabase.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task.TaskType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates the database of duke.Duke bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class DukeDatabase {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final int DONE \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final int NOT_DONE \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final String corruptedDataMessage \u003d \"Database has corrupted data!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String databaseDirectory; // Path of the the database file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private File tasksFile; // File object which represents the database file of duke.Duke bot"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    // Cannot delete this constructor to ensure that it overwrites the default public constructor"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private DukeDatabase() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a DukeDatabase object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a DukeDatabase object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static DukeDatabase getDukeDatabaseInstance() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new DukeDatabase().initialise();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Initializes the database by loading the database file and attach it to a File object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the database object itself."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private DukeDatabase initialise() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        setDatabaseDirectory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        createDataFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Set the directory of the data text file used to record the tasks of the user."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void setDatabaseDirectory() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String projectRoot \u003d new File(System.getProperty(\"user.dir\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .getParentFile()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .getPath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        databaseDirectory \u003d String.format(\"%s/data/duke.txt\", projectRoot);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates a data text file to store the tasks of the user if it has not existed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void createDataFile() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tasksFile \u003d new File(databaseDirectory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tasksFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            tasksFile.createNewFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns all the tasks stored in the database."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a list of all the tasks stored in the database."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public TaskList getAllTasks() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        TaskList tasksList \u003d new TaskList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            File f \u003d new File(databaseDirectory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            // Read the database file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    // Create the corresponding task object from the data in the database"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    // and add into the taskList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    tasksList.addTask(createTask(sc.nextLine()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tasksList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates the corresponding task object from a line of data in the database."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param dataInput a line of data in the database."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the corresponding task object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException If the given data is corrupted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Task createTask(String dataInput) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        TaskType type \u003d getType(dataInput);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] details \u003d getDetails(dataInput);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Create the corresponding task object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (type \u003d\u003d TaskType.TODO) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            task \u003d createToDo(details);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (type \u003d\u003d TaskType.DEADLINE) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            task \u003d createDeadline(details);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (type \u003d\u003d TaskType.EVENT) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            task \u003d createEvent(details);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Database has corrupted data!\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Check and update the status of the task accordingly."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isDone \u003d isDone(dataInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Updates the database file (used at the end of the program)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tasks a list of tasks as updated at the point when the program ends."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void update(TaskList tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assert tasks !\u003d null : \"Tasks list given cannot be null!\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Extract all the data summaries of the tasks and append them into a single string."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        StringBuilder bldr \u003d new StringBuilder(150);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasks.forEach(t -\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            bldr.append(String.format(\"%s\\n\", t.getSummaryForDatabase()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        // Write all the data summaries into the database file."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            FileWriter fw \u003d new FileWriter(databaseDirectory);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fw.write(bldr.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the type of the task corresponding to the data given."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param data data of the task stored in the database file."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the type of the task corresponding to the data given."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the data is corrupted."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private TaskType getType(String data) throws DukeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        char type \u003d data.charAt(0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        case (\u0027T\u0027):"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return TaskType.TODO;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        case (\u0027D\u0027):"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return TaskType.DEADLINE;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        case (\u0027E\u0027):"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return TaskType.EVENT;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Database has corrupted data!\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns true if the task associated to the data is done."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param data data of a task stored in the database file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return true if the task associated to the data is done."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the data is corrupted."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean isDone(String data) throws DukeException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String[] details \u003d getDetails(data);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int status \u003d Integer.parseInt(details[1].trim());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        switch (status) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        case NOT_DONE:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(corruptedDataMessage);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the details of the task corresponding to the data given."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param data data of a task stored in the database file."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the details of the task, stored in an array."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String[] getDetails(String data) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return data.split(\"\\\\|\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates a To Do object based on the given details of the To Do object."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param details details of the To Do object."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a To Do object corresponding to the details given."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ToDo createToDo(String[] details) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String title \u003d details[2].trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new ToDo(title);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates a Deadline object based on the given details of the Deadline object."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param details details of the Deadline object."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a Deadline object corresponding to the details given."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Deadline createDeadline(String[] details) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String title \u003d details[2].trim();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d details[3].trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return new Deadline(title, date);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates an Event object based on the given details of the Event object."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param details details of the Event object."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return an Event object corresponding to the details given."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Event createEvent(String[] details) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String title \u003d details[2].trim();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String date \u003d details[3].trim();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean isTentative \u003d  date.contains(\";\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (isTentative) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            String[] tentativeDates \u003d date.split(\"; \");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new Event(title, tentativeDates);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return new Event(title, date);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 257
    }
  },
  {
    "path": "src/main/java/duke/component/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.command.CommandGenerator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a parser which parses the input from the console."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private CommandGenerator commandGenerator \u003d new CommandGenerator();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Analyses the input from the console and returns the appropriate action to it."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param input the input from the console."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the appropriate action to the input, encapsulated in a Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the parser cannot understand the user\u0027s input, i.e. the user\u0027s input or command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     is not supported by duke.Duke bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assert input !\u003d null : \"Input cannot be null!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (input.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getAddCommandForToDo(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getAddCommandForDeadline(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (input.startsWith(\"event setDate\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getConfirmEventDateCommand(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getAddCommandForEvent(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (\"list\".equals(input)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (input.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getFindCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getDoneCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getDeleteCommand(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else if (\"bye\".equals(input)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            return commandGenerator.getExitCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 46
    }
  },
  {
    "path": "src/main/java/duke/component/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates and represents a list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Constructs a TaskList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasks \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Adds a task into the tasks list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param t the task to be added."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Removes a task form the tasks list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param i index of the task to be removed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return The task that has been removed from the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the index given is \u003c 0 or \u003e size - 1, where size is the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     number of tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Task removeTask(int i) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!indexIsValid(i)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Index must be between 1 and the number of task added!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tasks.remove(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the task at the given index in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param index index of the task (starts from 0)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the task at the given index in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the index is invalid (see documentation on the removeTask method)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Task getTask(int index) throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!indexIsValid(index)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Index must be between 1 and the number of task added!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Replaces the task located at specified position in the list with the new specified task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param index index of the task to replace."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param task the new task to be stored at the specified position."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the index is out of range (index \u003c 0 || index \u003e\u003d size())."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void setTask(int index, Task task) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (!indexIsValid(index)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Index must be between 1 and the number of task added!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasks.set(index, task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the size(number of tasks) of the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the size of the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Applies the given consumer on every tasks in the list sequentially."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param c consumer specifying action(s) to be applied on a task in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void forEach(Consumer\u003cTask\u003e c) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        tasks.forEach(c);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the list iterator of the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the list iterator of the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ListIterator\u003cTask\u003e listIterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return tasks.listIterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Checks if a given index to access a task in the list is valid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param index the given index."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return true if the index is valid and false otherwise."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private boolean indexIsValid(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 115
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates exceptions that are specific to duke.Duke chat bot. Most of these exceptions are"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * user\u0027s input error."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * A prefix used when displaying the error message of DukeException objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private static final String PREFIX \u003d  \"\\u2639  OOPS!!!\"; // The unicode is a sad face symbol."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Constructs a DukeException object with the message given."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param message the error message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Constructs a DukeException object with the message and cause given."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param message the error message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param cause the cause of this DukeException."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the detail message string of this DukeException."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the detail message of this DukeException instance."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"%s %s\", PREFIX, super.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a task object of type Deadline."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Constructs a Deadline object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param title the title of the deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param deadline its deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Deadline(String title, String deadline) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.type \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the string representation of the Deadline object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * It takes the form of [type][done status][date][deadline]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return string representation of the Deadline object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"[%s][%s] %s (by: %s)\", type, status, title, deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the data summary of this task to record this Deadline object in the database."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the data summary of this Deadline object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getSummaryForDatabase() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int status \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"%s | %d | %s | %s\", type, status, title, deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 41
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a task object of type Event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private String[] tentativeDates;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates an Event object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param topic the topic of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param date the date of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Event(String topic, String date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(topic);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates an Event object consists of tentative dates."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param topic the topic of the event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param tentativeDates the tentative dates of the event,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Event(String topic, String[] tentativeDates) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(topic);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.type \u003d \"E\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.tentativeDates \u003d tentativeDates;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.date \u003d IntStream.range(0, tentativeDates.length)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .mapToObj(i -\u003e tentativeDates[i])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                .collect(Collectors.joining(\"; \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Sets the confirmed date of the event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param i index of the confirmed date among the tentative dates (index starts from 1)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a new Event object with the same title and confirmed date."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @throws DukeException if the Event object does not have tentative dates or the index is out of bound"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *     (i \u003c 0 || i \u003e tentativeDates.length - 1)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Event setDate(int i) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (tentativeDates \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"The event does not have tentative dates!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        boolean indexOutOfBound \u003d i \u003c 0 || i \u003e tentativeDates.length - 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (indexOutOfBound) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            throw new DukeException(\"Index given for tentative dates is invalid!\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String confirmedDate \u003d tentativeDates[i];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Event newEvent \u003d new Event(title, confirmedDate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            newEvent.markAsDone();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the string representation of the event."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * It takes the form of [type][done status][title][date]."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return string representation of the event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"[%s][%s] %s (at: %s)\", type, status, title, date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the data summary of this event to record this task in the database."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the data summary of this event."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getSummaryForDatabase() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int status \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"%s | %d | %s | %s\", type, status, title, date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 90
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a task in real life."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * It has a title as well as some addition details, depending on the type of the task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected String type; // T for to do, E for event, and D for Deadline."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected String status; // a unicode symbol representing the isDone status of the task (either a tick or a cross)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public enum TaskType {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        TODO, DEADLINE, EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Constructs a task object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param s the title of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    protected Task(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        title \u003d s;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        status \u003d \"\\u2717\"; // A cross symbol indicating the task has not been done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the data summary of this task to record this task in the database."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the data summary of this task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public abstract String getSummaryForDatabase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the task itself."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public Task markAsDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        status \u003d \"\\u2713\"; // A tick symbol indicating the task is done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Checks if a task is done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a boolean value indicating whether the task is done or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 54
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Encapsulates a task object of type ToDo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Constructs a ToDo object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param title the topic of the ToDo."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public ToDo(String title) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        super(title);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        this.type \u003d \"T\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the string representation of the to do object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * It takes the form of [type][done status][title]."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return string representation of the to do object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"[%s][%s] %s\", type, status, title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns the data summary of this task to record this to do object in the database."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return the data summary of this to do object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public String getSummaryForDatabase() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        int status \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return String.format(\"%s | %d | %s\", type, status, title);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 38
    }
  },
  {
    "path": "src/main/java/duke/ui/controllers/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.ui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/views/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50, 50));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a dialog used to display the message entered by the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param text the message entered by the user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param img the user\u0027s picture."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a user dialog."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        DialogBox dbx \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dbx.setBackground(new Background(new BackgroundFill(Color.SKYBLUE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dbx.dialog.setPadding(new Insets(8, 0, 0, 10));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return dbx;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Returns a dialog used to display the response by Duke to the user\u0027s input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param text the response of duke."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @param img Duke\u0027s picture."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * @return a Duke dialog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        var dbx \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dbx.flip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dbx.setBackground(new Background(new BackgroundFill(Color.LIGHTPINK,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                CornerRadii.EMPTY, Insets.EMPTY)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dbx.dialog.setPadding(new Insets(0, 0, 0, 10));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        return dbx;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 84
    }
  },
  {
    "path": "src/main/java/duke/ui/controllers/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.ui.controllers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Controller for duke.ui.controllers.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Initializes the main window of the application."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        DialogBox dukeDialog \u003d  DialogBox.getDukeDialog(\"Hello, I\u0027m Duke!\\nWhat can I do for you?\", dukeImage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dialogContainer.getChildren().addAll(dukeDialog);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 60
    }
  },
  {
    "path": "src/main/resources/views/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 19
    }
  },
  {
    "path": "src/main/resources/views/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 19
    }
  },
  {
    "path": "src/main/test/test1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "      ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Hello! I\u0027m duke.Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     added: read book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     added: return book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1. read book"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     2. return book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 24
    }
  },
  {
    "path": "src/test/java/duke/component/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.component;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void getTask_emptyList_exceptionThrown() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            new TaskList().getTask(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 15
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class ToDoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(true, new ToDo(\"test\").markAsDone().isDone());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void testGetSummaryForDatabase() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(\"T | 0 | bye\", new ToDo(\"bye\").getSummaryForDatabase());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        assertEquals(\"T | 1 | bye\", new ToDo(\"bye\").markAsDone().getSummaryForDatabase());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 19
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "      ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Hello! I\u0027m duke.Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✗] read book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 1 task in the list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [D][✗] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [E][✗] project meeting (at: 26 August 2019, 11:55 AM)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✗] join sports club"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✗] borrow book"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     ☹  OOPS!!! There can only be an integer after the word \"done\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✓] read book"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✓] join sports club"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     2.[D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     3.[E][✗] project meeting (at: 26 August 2019, 11:55 AM)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     4.[T][✓] join sports club"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     5.[T][✗] borrow book"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     ☹  OOPS!!! There can only be an integer after the word \"delete\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     ☹  OOPS!!! There can only be an integer after the word \"delete\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [E][✗] project meeting (at: 26 August 2019, 11:55 AM)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     2.[D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     3.[T][✓] join sports club"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     4.[T][✗] borrow book"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✓] join sports club"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     2.[D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     3.[T][✗] borrow book"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✗] borrow book"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1.[T][✓] read book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     2.[D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✓] read book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 1 task in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1.[D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [D][✓] return book (by: 18 May 2019, 11:33 AM)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 0 task in the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     ☹  OOPS!!! Index must be between 1 and the number of task added!"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Bye. Hope to see you again!"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 145
    }
  },
  {
    "path": "text-ui-test/EXPECTED2.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "      ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     |  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     | | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     | |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     |____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Hello! I\u0027m duke.Duke"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✗] this is a super long message that your mama also don\u0027t know how "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       to deal with it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 1 task in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     1.[T][✗] this is a super long message that your mama also don\u0027t know how "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     to deal with it"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✓] this is a super long message that your mama also don\u0027t know how "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       to deal with it"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       [T][✓] this is a super long message that your mama also don\u0027t know how "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       to deal with it"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Now you have 0 task in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     Bye. Hope to see you again!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    ___________________________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 41
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "deadline return book /by 18/05/2019 1133"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "event project meeting /at 26/08/2019 1155"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "doneabc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done 2 "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "deleteabc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "deleter3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 24
    }
  },
  {
    "path": "text-ui-test/input2.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo this is a super long message that your mama also don\u0027t know how to deal with it"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 5
    }
  },
  {
    "path": "text-ui-test/input3.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "doneabc"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done 2 "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "delete 4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 13
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# delete the recorded data from previous run"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ -e \"../data/duke.txt\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    rm ../data/duke.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# compile ALL the java code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# Test 1"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"Test 1 result: PASSED\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"Test 1 result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# Test 2"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# delete the recorded data from previous run(Test 1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ -e \"../data/duke.txt\" ]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    rm ../data/duke.txt"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# run test 2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input2.txt \u003e ACTUAL2.TXT"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "diff ACTUAL2.TXT EXPECTED2.TXT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"Test 2 result: PASSED\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "else"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"Test 2 result: FAILED\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 60
    }
  },
  {
    "path": "text-ui-test/runtest_copy.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# compile ALL the java code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# Test 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "then"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"Test 1 result: PASSED\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "else"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    echo \"Test 1 result: FAILED\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "fi"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 36
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "│     └─seedu/duke/duke.Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "-": 167
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke.Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        Application.launch(duke.Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 3,
      "-": 107
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke.Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "In this tutorial, we will be creating a GUI for duke.Duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "![Mockup for duke.Duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "![duke.Duke\u0027s layout](assets/DukeSceneGraph.png) "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "![duke.Duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "        stage.setTitle(\"duke.Duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "![duke.Duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 8,
      "-": 150
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "For duke.Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke.Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class duke.Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    return \"duke.Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke.Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "You have successfully implemented a fully functional GUI for duke.Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 9,
      "-": 234
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Let\u0027s return to duke.Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**duke.ui.controllers.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.controllers.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/duke.ui.controllers.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "   ![SceneBuilder opening duke.ui.controllers.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `duke.ui.controllers.MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "   ![Controller for duke.ui.controllers.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "As part of the effort to separate the code handling duke.Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Let\u0027s implement the `duke.ui.controllers.MainWindow` controller class that we specified in `duke.ui.controllers.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "**duke.ui.controllers.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * Controller for duke.ui.controllers.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "public class duke.ui.controllers.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private duke.Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    public void setDuke(duke.Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke.Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Notice how in `duke.ui.controllers.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `duke.Duke` and the UI in `duke.ui.controllers.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": " * A GUI for duke.Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "    private duke.Duke duke \u003d new duke.Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/duke.ui.controllers.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            fxmlLoader.\u003cduke.ui.controllers.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.ui.controllers.MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "1. Convert `duke.ui.controllers.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "1. Extend `duke.ui.controllers.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 24,
      "-": 270
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "   java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChrisKheng"
        },
        "content": "   java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "ChrisKheng": 4,
      "-": 70
    }
  }
]
