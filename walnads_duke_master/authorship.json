[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "test {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 22,
      "-": 15
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class contains all the custom classes (not related to UI) needed for application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static Parser parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Duke class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Initialises Storage, TaskList, and Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        storage \u003d new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duke.txt\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        taskList \u003d new TaskList(Duke.storage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        parser \u003d new Parser(Duke.taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 18,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that makes sense of user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Parser class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param taskList TaskList object containing all the methods for creating, getting, and retrieving all the tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Parses the user\u0027s input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param input User input to be parsed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return A command class corresponding to the input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws InvalidCommandException If the user input is incomplete (i.e. does not contain the task description or date)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Command parse(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int ws \u003d input.indexOf(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String command \u003d input.substring(0, ws \u003d\u003d -1 ? input.length() : ws);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String parameters \u003d input.substring(command.length()).trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new DoneCommand(parameters);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new TodoCommand(parameters);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new EventCommand(parameters);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new DeadlineCommand(parameters);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new FindCommand(parameters);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new DeleteCommand(parameters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new InvalidCommandException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 55
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that loads tasks from the file and saves tasks in the file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected String filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected FileWriter writer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Storage class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param filePath File path of the data file in String format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Writes all the tasks in the current application to the data file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param tasks An array containing all the tasks in the application thus far."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws IOException If the file path is incorrect."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void update(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        writer \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String text \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "            text +\u003d t.printString() + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "        writer.write(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 40
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that contains the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Tasklist class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param storage Storage object containing all the methods for writing and retrieving from the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Updates the tasks list in the data file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "            storage.update(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Iterates through all the tasks in the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates a String containing information about all the tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return String containing information about all the tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String view() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "            String str \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "                str +\u003d (i + 1) + \". \" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return str.substring(0, str.length() - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"You have no tasks in your list\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Adds a Task to the task list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param t The Task object to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String add(Task t) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "                tasks.get(tasks.size() - 1), tasks.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Deletes a Task from the task list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param i The index of the Task object to be deleted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String delete(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String str \u003d tasks.get(i - 1).toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tasks.remove(i - 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "                str, tasks.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Finds a matching task given the String input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param input The matching String input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String find(String input) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String str \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "        int num \u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": "            if (t.getDescription().contains(input)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": "                str +\u003d String.format(\"%d. %s\\n\", num, t);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "                num++;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return str.substring(0, str.length() - 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Marks a Task in a task list as done."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param i The index of the Task object to be modified."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String markDone(int i) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tasks.get(i - 1).markAsDone();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n  \" + tasks.get(i - 1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 112
    }
  },
  {
    "path": "src/main/java/duke/UI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that deals with interactions with the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected PrintStream out;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for UI class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "            this.out \u003d new PrintStream(System.out, true, \"UTF-8\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return; // Will never happen in this context."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Displays the chatbot\u0027s response to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param str The chatbot\u0027s response in String format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void show(String str) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        out.println(str);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 32
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The base class for all commands in the chatbot application."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected String parameters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Default public constructor for Command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Command() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Alternative public constructor for Command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Command(String parameters) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.parameters \u003d parameters;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public abstract String execute() throws MissingParameterException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 26
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving creating a Deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DeadlineCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. date and description)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DeadlineCommand(String parameters) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Deadline command (i.e. creates the Deadline task object)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after creating the Deadline task object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() throws MissingParameterException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! The description and date of a\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "                    + \"deadline cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else if (!(parameters.contains(\"/by\"))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "                String[] temp \u003d parameters.split(\" /by \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task t \u003d new Deadline(temp[0], temp[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return Duke.taskList.add(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return \"\\u2639 OOPS!!! Your date is not in dd/MM/yyyy HHmm format (e.g. 2/12/2019 1800)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 45
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class that handles all the methods involving deleting a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DeleteCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. the index of the task to be deleted)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DeleteCommand(String parameters) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Delete command (i.e. deletes the task from the task list)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after deleting the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() throws MissingParameterException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! Please specify the index of the task to be deleted.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "                int id \u003d Integer.parseInt(parameters);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return Duke.taskList.delete(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return \"\\u2639 OOPS!!! A task with this index does not exist.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 36
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving marking a task as Done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DoneCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. index of task)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DoneCommand(String parameters) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "            int id \u003d Integer.parseInt(parameters);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.markDone(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return \"\\u2639 OOPS!!! The task does not exist.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 26
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving creating an Event task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for EventCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed for executing the command (i.e. description and date)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public EventCommand(String parameters) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Event command (i.e. creates the Event task object)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after creating the Event task object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() throws MissingParameterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! The description and date of a event cannot be empty.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else if (!(parameters.contains(\"/at\"))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! The date of a event cannot be empty.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "                String[] temp \u003d parameters.split(\" /at \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "                Task t \u003d new Event(temp[0], temp[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return Duke.taskList.add(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "                return \"\\u2639 OOPS!!! Your date is not in dd/MM/yyyy HHmm format (e.g. 2/12/2019 1800)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 45
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles all the methods involving ending the chat session with Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for ExitCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Exit command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s goodbye message in String format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 23
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving finding a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for FindCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. the String that the user is searching for)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public FindCommand(String parameters) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Find command (i.e. finds the task containing the String the user is searching for)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The tasks containing the String the user is searching for."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() throws MissingParameterException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! Please provide a search query.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.find(parameters);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 29
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving listing all the tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for ListCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the List command (i.e. lists all the tasks)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return All the tasks in String format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return Duke.taskList.view();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 23
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.MissingParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles methods involving creating a Todo task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for TodoCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param parameters Information needed to execute the command (i.e. description)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public TodoCommand(String parameters) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(parameters);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Executes the Todo command (i.e. creates the Todo task object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Duke\u0027s response during/after creating the Todo task object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws MissingParameterException if there are missing parameters in the command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String execute() throws MissingParameterException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (parameters.length() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "            throw new MissingParameterException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Task t \u003d new Todo(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.taskList.add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 34
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The base class for other checked exceptions in the chatbot application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles errors to do with invalid commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for InvalidCommandException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/java/duke/exception/MissingParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The class handles errors to do with valid commands but incomplete parameters."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class MissingParameterException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for MissingParameterException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param message The error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public MissingParameterException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 16
    }
  },
  {
    "path": "src/main/java/duke/gui/Client.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import duke.exception.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Client extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Duke app;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "walnads"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "walnads"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "walnads"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "walnads"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "walnads"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "walnads"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "walnads"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "walnads"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "walnads"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "walnads"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "walnads"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "walnads"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "walnads"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "walnads"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String userText \u003d userInput.getText();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String dukeText \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getUserDialog(userText, user),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, duke)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "walnads"
        },
        "content": "        );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "walnads"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "walnads"
        },
        "content": "        if (app \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "walnads"
        },
        "content": "            app \u003d new Duke();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return Duke.parser.parse(input).execute();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "walnads"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 148
    }
  },
  {
    "path": "src/main/java/duke/gui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 61
    }
  },
  {
    "path": "src/main/java/duke/gui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 12
    }
  },
  {
    "path": "src/main/java/duke/gui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Client duke \u003d new Client();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 31
    }
  },
  {
    "path": "src/main/java/duke/gui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.gui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Client duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void setDuke(Client d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 51
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation of the deadline task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Date by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for the Deadline class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates an incomplete deadline task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param by Date and time the task is due."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws ParseException If by is not of \"dd/MM/yyyy HHmm\" format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Deadline(String description, String by) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.by \u003d format.parse(by);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the deadline task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"E, dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, date.format(by));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the deadline task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"E, dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + date.format(by) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation of the event task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    private Date at;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for the Event class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates an incomplete event task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param at The start date and time of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @throws ParseException If by is not of \"dd/MM/yyyy HHmm\" format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Event(String description, String at) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.at \u003d format.parse(at);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the event task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"E, dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", isDone ? 1 : 0, description, date.format(at));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the event task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "        SimpleDateFormat date \u003d new SimpleDateFormat(\"E, dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + date.format(at) + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 49
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " * The base class for all the other task classes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Task class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Creates an incomplete (status-wise) task by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Gets the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The description of the task in String format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts the isDone variable to either a \"tick\" or a \"cross\" symbol."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return The status of the task (completed or not) in symbol form (\"tick\" or \"cross\")."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Marks the task as completed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "walnads"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"T | %d | %s | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": " * A representation of the todo task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Public constructor for Todo class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the todo task to String format (for addition to the data file)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String printString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * Converts information about the todo task to String format (for printing to the UI)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "     * @return Task information in String format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 34
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void parser_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Parser p \u003d new Parser(new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\")));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //test case 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "           p.parse(\"todo\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //test case 2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "            p.parse(\"event\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        //test case 3"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "            p.parse(\"deadline\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 25
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void markDone_expectedBehaviour() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.add(new Todo(\"print lecture notes\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.markDone(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:\\n1. [T][\\u2713] print lecture notes\", tl.view());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void markDone_exceptionThrown() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.add(new Todo(\"print lecture notes\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tl.markDone(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void delete_exceptionThrown() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "        tl.add(new Todo(\"print lecture notes\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "            tl.delete(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void view_expectedBehaviour() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "walnads"
        },
        "content": "        TaskList tl \u003d new TaskList(new Storage(\"C:\\\\Users\\\\User\\\\Documents\\\\duke\\\\data\\\\duketest.txt\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"Here are the tasks in your list:\", tl.view());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 37
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void printString_todo_expectedBehaviour() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "        Todo task \u003d new Todo(\"print lecture notes\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": "        assertEquals(\"T | 0 | print lecture notes\", task.printString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void printString_deadline_expectedBehaviour() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Deadline task \u003d new Deadline(\"complete lab 1\", \"7/9/2019 2359\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "            assertEquals(\"D | 0 | complete lab 1 | Sat, 07/09/2019 23:59\", task.printString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "walnads"
        },
        "content": "    public void printString_event_expectedBehaviour() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "walnads"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "walnads"
        },
        "content": "            Event task \u003d new Event(\"attend formal dinner\", \"4/9/2019 1900\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "walnads"
        },
        "content": "            assertEquals(\"E | 0 | attend formal dinner | Wed, 04/09/2019 19:00\", task.printString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "walnads"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "walnads"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "walnads"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "walnads"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "walnads": 32
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "walnads"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "walnads"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "walnads"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "walnads"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "walnads"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "walnads"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "walnads"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "walnads"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "walnads"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "walnads"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "walnads"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "walnads"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "walnads": 22
    }
  }
]
