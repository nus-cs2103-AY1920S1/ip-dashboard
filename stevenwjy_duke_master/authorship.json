[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# Duke Chat Bot"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "[![Build Status](https://travis-ci.org/stevenwjy/duke.svg?branch\u003dmaster)](https://travis-ci.org/stevenwjy/duke)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "A chat bot to help people manage their tasks easily. To learn more about how to use this app, please refer to the [User Guide](docs/README.md)"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 3,
      "-": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "test {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    archiveVersion \u003d \"0.1.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    modules \u003d [\u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 32,
      "-": 14
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Duke is a chatbot to help people manage their tasks easily. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "You can take note and update it via GUI that behaves that behaves like a"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "command line interaction."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "## Requirements"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- Java 11 or later"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Interactive user interface"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Duke chatbot uses a GUI that gives you interactive feedback for every command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "that you write. It responds as if you are chatting with a real person that"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "always available to help you manage your tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "![](Ui.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Differentiates your tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "There are several types of tasks that are supported by Duke chatbot to help"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "you classify different types of task that you have. Every task can also be "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "uniquely identified with an 5-digit integer ID. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Sort your tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "By default, the tasks will be sorted by creation time. However, you can also "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "ask Duke to show your tasks based on last updated time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Find your tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "You can ask Duke to find task that contain a certain keyword in your command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Detect duplicates"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Duke chatbot will also prevent you from inserting duplicate tasks in case you"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "forget that you have added a certain task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Add a new task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Add a new task into the list of tasks that are stored by Duke chatbot for you."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Usage example:**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`todo [description]` \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`deadline [description] /by [byDescription]` \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`event [description] / by [atDescription]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Example of usage:**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `todo watch movie` \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Adds a new todo task with description `watch movie`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `deadline homework /by 19/09/2019 23:59` \u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Adds a new deadline task with description `homework`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Time description will be automatically formatted to "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`September 19, 2019, 11:59 PM`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `event music concent /at MBS` \u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Adds a new event task with description `music concert`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Location description will be written as `MBS`."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "***"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Marks task as done"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Marks a particular task as done in the list of tasks."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Usage example:**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`done [taskID]`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Example of usage:**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `done 49924` \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Mark task with id `49924` as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "***"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Deletes a task in the list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Removes a certain task from the list of tasks."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Usage example:**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`delete [taskID]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Example of usage:**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `delete 49924`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Removes task with id `49924`."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Find tasks in the list"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Finds all the tasks that contain a certain keyword in its description."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Usage example:**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "`find [keyword]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Example of usage:**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `find homework`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Find all tasks that contain keyword `homework` in its description."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "***"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "### Find tasks in the list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "Lists all the tasks that are currently stored by the Duke chat bot."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Usage example:**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `list`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `list /orderby [sort type]`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "**Example of usage:**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `list`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "By default, this will lists all tasks based on their creation time."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `list /orderby createdAt`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "List all tasks based on their creation time."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "- `list /orderby updatedAt`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "List all tasks based on their last updated time."
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 111,
      "-": 11
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.Main;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Default main function to run \u003ccode\u003eDuke\u003c/code\u003e chat bot. Calling this function will start \u003ccode\u003eDuke\u003c/code\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * with default task data at \u0027data/task.txt\u0027. If there is no such file, the program will create an empty file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param args Arguments that are provided upon running the program. Those arguments will not give"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *             any effect towards the program execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private TaskManager taskManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Function\u003cString, Void\u003e feedbackHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for Duke chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param filePath Path to the file that stores the tasks data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws Exception An error that occurred during initial launch of the chat bot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    Duke(String filePath) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskManager \u003d new TaskManager(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        feedbackHandler \u003d (str) -\u003e null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    void setFeedbackHandler(Function\u003cString, Void\u003e feedbackHandler) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.feedbackHandler \u003d feedbackHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Shows a header that is printed at the start of the chat bot."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    String getInitialMessage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Returns response from duke chat bot. Initial data will be loaded from the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * \u003ccode\u003efilePath\u003c/code\u003e that is specified upon initialization of \u003ccode\u003eDuke\u003c/code\u003e class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    void handleUserInput(String inputLine) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            Command command \u003d Command.parseCommand(inputLine);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            CommandResult commandResult \u003d command.execute(taskManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            feedbackHandler.apply(commandResult.getFeedback());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (ExitCommand.isExit(command)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) { // Show an error message to the user that is caught during the program execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            feedbackHandler.apply(e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 52,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.ui.MainWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for Main application of Duke chat bot. If it fails to initialize Duke class, then it will"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * print the stack trace that causes the error to standard output."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            duke \u003d new Duke(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            System.out.println(Arrays.toString(e.getStackTrace()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Starts the duke chat bot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param stage A stage to display the GUI for Duke app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            MainWindow mainWindow \u003d fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            mainWindow.showMessageFromDuke(duke.getInitialMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            duke.setFeedbackHandler((str) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                mainWindow.showMessageFromDuke(str);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            mainWindow.setInputHandler((input) -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                duke.handleUserInput(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 62
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.DeadlineTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class AddDeadlineCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String deadlineInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    AddDeadlineCommand(String taskDescription, String deadlineInfo) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.deadlineInfo \u003d deadlineInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Add a \u003ccode\u003eDeadlineTask\u003c/code\u003e task to the list of tasks that are stored both in memory and database file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Afterwards, this methods triggers a notification to the user that a new \u003ccode\u003eDeadlineTask\u003c/code\u003e task has"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * been successfully added to the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws CommandExecutionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(taskDescription, deadlineInfo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            int oldNumberOfTasks \u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            taskManager.addTask(deadlineTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            assert (oldNumberOfTasks + 1) \u003d\u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return getCommandResult(deadlineTask, taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027deadline\u0027 command\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 46
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.EventTask;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class AddEventCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String eventInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    AddEventCommand(String taskDescription, String eventInfo) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.eventInfo \u003d eventInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Add an \u003ccode\u003eEventTask\u003c/code\u003e task to the list of tasks that are stored both in memory and database file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Afterwards, this methods triggers a notification to the user that a new \u003ccode\u003eEventTask\u003c/code\u003e task has"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * been successfully added to the task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws CommandExecutionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        EventTask eventTask \u003d new EventTask(taskDescription, eventInfo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            int oldNumberOfTasks \u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            taskManager.addTask(eventTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            assert (oldNumberOfTasks + 1) \u003d\u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return getCommandResult(eventTask, taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (DuplicateTaskException | IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027event\u0027 command\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "abstract class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Generates a \u003ccode\u003eCommandResult\u003c/code\u003e upon successful execution of \u003ccode\u003eAddTaskCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param task          The new task that has been added to the list of tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param numberOfTasks Current number of tasks in the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    static CommandResult getCommandResult(Task task, int numberOfTasks) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return new CommandResult(\"Got it. I\u0027ve added this task:\\n\" + \"  \" + task + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                + String.format(\"Now you have %d tasks in the list.\\n\", numberOfTasks));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/AddToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.ToDoTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class AddToDoCommand extends AddTaskCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String taskDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    AddToDoCommand(String taskDescription) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Add a \u003ccode\u003eToDoTask\u003c/code\u003e task to the list of tasks that are stored both in memory and database file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Afterwards, this methods triggers a notification to the user that a new \u003ccode\u003eToDoTask\u003c/code\u003e task has"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * been successfully added to the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws CommandExecutionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        ToDoTask todo \u003d new ToDoTask(taskDescription);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            int oldNumberOfTasks \u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            taskManager.addTask(todo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            assert (oldNumberOfTasks + 1) \u003d\u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return getCommandResult(todo, taskManager.getNumberOfTasks());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027todo\u0027 command\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Executes the command. The operations that are performed depends on the implementing class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws InvalidCommandException   An error that occurs due to invalid command parameter"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. non-existent task number)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public abstract CommandResult execute(TaskManager taskManager)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throws InvalidCommandException, CommandExecutionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Convert a string into \u003ccode\u003eCommand\u003c/code\u003e. Calling this function might return different types of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * class that extends \u003ccode\u003eCommand\u003c/code\u003e depending on the string provided in the parameter."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param s String representation of the command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A command that is represented by the given string in the parameter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws InvalidCommandException An exception that is returned if the string provided in the parameter"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                 does not follow a valid command format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public static Command parseCommand(String s) throws InvalidCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String[] commandParts \u003d s.split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (commandParts.length \u003c 2) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (commandParts[0].matches(\"^(done|delete)$\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidCommandException(\"You must provide a task number for \u0027\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                        + commandParts[0] + \"\u0027 command!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            } else if (commandParts[0].matches(\"^(todo|event|deadline|find)$\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidCommandException(\"You must provide a description for \u0027\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                        + commandParts[0] + \"\u0027 command!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        switch (commandParts[0]) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (commandParts.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            String[] listParams \u003d commandParts[1].split(\"/orderby \", 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (listParams.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return new ListCommand(listParams[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(commandParts[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                if (commandParts[0].matches(\"done\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                    return new DoneCommand(taskNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                    return new DeleteCommand(taskNumber);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidCommandException(\"Task number must be an integer!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new AddToDoCommand(commandParts[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            String[] eventParams \u003d commandParts[1].split(\" /at \", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (eventParams.length \u003c 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidCommandException(\"The description of an event must contain \u0027 /at \u0027.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new AddEventCommand(eventParams[0], eventParams[1]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            String[] deadlineParams \u003d commandParts[1].split(\" /by \", 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (deadlineParams.length \u003c 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidCommandException(\"The description of a deadline must contain \u0027 /by \u0027.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new AddDeadlineCommand(deadlineParams[0], deadlineParams[1]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new FindCommand(commandParts[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 89
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private final String feedback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    CommandResult(String feedback) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.feedback \u003d feedback;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public String getFeedback() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 13
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    DeleteCommand(int taskNumber) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Removes a certain task from the list of tasks. Afterwards, this methods triggers a notification to the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * that a task has been successfully removed from the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws InvalidCommandException   An error that occurs if the user provides an invalid task number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws InvalidCommandException, CommandExecutionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            int oldNumberOfTasks \u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            Task removedTask \u003d taskManager.removeTask(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            assert oldNumberOfTasks \u003d\u003d (taskManager.getNumberOfTasks() + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new CommandResult(\"Noted. I\u0027ve removed this task:\\n\" + \"  \" + removedTask + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                    + String.format(\"Now you have %d tasks in the list.\\n\", taskManager.getNumberOfTasks()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidCommandException(\"Task number does not exist\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027delete\u0027 command\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 44
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private int taskNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    DoneCommand(int taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Marks a particular task as done in the list of tasks. Afterwards, this methods triggers a notification to the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * user that a task has been marked as done."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eCommandResult\u003c/code\u003e that contains a feedback to the user in the form of \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws InvalidCommandException   An error that occurs if the user provides an invalid task number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws InvalidCommandException, CommandExecutionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            int oldNumberOfTasks \u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            taskManager.markAsDone(taskNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            assert oldNumberOfTasks \u003d\u003d taskManager.getNumberOfTasks();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new CommandResult(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                    + \"  \" + taskManager.getTaskWithID(taskNumber) + \"\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidCommandException(e.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027done\u0027 command\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 43
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * Shows a footer that is printed when the chat bot is about to terminate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Stop the execution of \u003ccode\u003eDuke\u003c/code\u003e chat bot."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return Notification that Duke chat bot will be terminated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return new CommandResult(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public static boolean isExit(Command c) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return (c instanceof ExitCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 23
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * Shows list of tasks that match the keyword of a \u0027find\u0027 command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    FindCommand(String keyword) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Finds all the tasks that contain a certain keyword in its description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A response that informs the user about all of the tasks that contain the specified keyword."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws CommandExecutionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            List\u003cTask\u003e foundList \u003d taskManager.findTasks(keyword);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (foundList.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return new CommandResult(\"There is no such task in your list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            StringBuilder feedback \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            feedback.append(\"Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            for (int i \u003d 0; i \u003c foundList.size(); ++i) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                feedback.append(String.format(\"%d. %s\\n\", i + 1, foundList.get(i)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new CommandResult(feedback.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027find\u0027 command\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 47
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.CommandExecutionException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.commands.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.TaskManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.comparators.CreationTimeComparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.comparators.UpdateTimeComparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * Shows the list of tasks to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static final String defaultOrder \u003d \"createdAt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Convenient constructor for \u003ccode\u003eListCommand\u003c/code\u003e. By default, if there is no order specified, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * tasks will be ordered by creation time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ListCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        order \u003d ListCommand.defaultOrder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ListCommand(String order) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Lists all the tasks that are currently stored by the Duke chat bot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskManager A task manager that handles operations to the list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A response that informs the user about all of the tasks that are currently stored by Duke chat bot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws CommandExecutionException An error that occurs during command execution"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                                   (e.g. due to input/output failure when updating database file)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandResult execute(TaskManager taskManager) throws CommandExecutionException, InvalidCommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            List\u003cTask\u003e tasks \u003d taskManager.getTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return new CommandResult(\"There is no task in your list\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            sortTasks(tasks);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            StringBuilder feedback \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            feedback.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); ++i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                feedback.append(String.format(\"%d. %s\\n\", i + 1, tasks.get(i)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new CommandResult(feedback.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new CommandExecutionException(\"Unknown error occurred while executing \u0027list\u0027 command\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private void sortTasks(List\u003cTask\u003e tasks) throws InvalidCommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"createdAt\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            Collections.sort(tasks, new CreationTimeComparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"updatedAt\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            Collections.sort(tasks, new UpdateTimeComparator());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidCommandException(\"Invalid order type for \u0027list\u0027 command: \" + order);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 76
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/exceptions/CommandExecutionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class CommandExecutionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public CommandExecutionException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/commands/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class InvalidCommandException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static DateTimeFormatter targetFormatter \u003d DateTimeFormatter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            .ofLocalizedDateTime(FormatStyle.LONG, FormatStyle.SHORT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String timeDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for \u003ccode\u003eDeadlineTask\u003c/code\u003e that represents one of the possible task types."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * By default, the task will not be marked as done upon initialization."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID          ID of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param isDone          A boolean that indicates whether a \u003ccode\u003eDeadlineTask\u003c/code\u003e task has been done or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param createdAt       Creation time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param updatedAt       Last update time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description     Description of the \u003ccode\u003eDeadlineTask\u003c/code\u003e task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param timeDescription An information that specifies the deadline of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    DeadlineTask(long taskID, boolean isDone, Date createdAt, Date updatedAt,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                 String description, String timeDescription) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(taskID, TaskType.DEADLINE, isDone, createdAt, updatedAt, description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        setTimeDescription(timeDescription);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Convenient constructor for \u003ccode\u003eDeadlineTask\u003c/code\u003e that represents one of the possible task types."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description     Description of the \u003ccode\u003eDeadlineTask\u003c/code\u003e task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param timeDescription An information that specifies the deadline of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public DeadlineTask(String description, String timeDescription) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(TaskType.DEADLINE, description);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        setTimeDescription(timeDescription);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    boolean equals(Task other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (!super.equals(other)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        DeadlineTask otherDeadlineTask \u003d (DeadlineTask) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return timeDescription.equals(otherDeadlineTask.timeDescription);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return super.toString() + \" (by: \" + timeDescription + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    String getDataRepresentation() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return super.getDataRepresentation() + \" | \" + timeDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private void setTimeDescription(String timeDescription) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (timeDescription.matches(\"[0-9]{2}/[0-9]{2}/[0-9]{4} [0-9]{2}:[0-9]{2}\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                this.timeDescription \u003d LocalDateTime.parse(timeDescription, formatter).format(targetFormatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                this.timeDescription \u003d timeDescription;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            this.timeDescription \u003d timeDescription;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 74
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String timeDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for \u003ccode\u003eEventTask\u003c/code\u003e that represents one of the possible task types."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * By default, the task will not be marked as done upon initialization."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID          ID of the task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description     Description of the \u003ccode\u003eEventTask\u003c/code\u003e task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param timeDescription An information regarding the event."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param isDone          A boolean that indicates whether an \u003ccode\u003eEventTask\u003c/code\u003e task has been done or not."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param createdAt       Creation time"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param updatedAt       Last update time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    EventTask(long taskID, boolean isDone, Date createdAt, Date updatedAt,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "              String description, String timeDescription) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(taskID, TaskType.EVENT, isDone, createdAt, updatedAt, description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.timeDescription \u003d timeDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Convenient constructor for \u003ccode\u003eEventTask\u003c/code\u003e that represents one of the possible task types."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description     Description of the \u003ccode\u003eEventTask\u003c/code\u003e task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param timeDescription An information regarding the event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public EventTask(String description, String timeDescription) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(TaskType.EVENT, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.timeDescription \u003d timeDescription;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    boolean equals(Task other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (!super.equals(other)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        EventTask otherEventTask \u003d (EventTask) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return timeDescription.equals(otherEventTask.timeDescription);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return super.toString() + \" (at: \" + timeDescription + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    String getDataRepresentation() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return super.getDataRepresentation() + \" | \" + timeDescription;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Long taskID;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private TaskType type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Date createdAt;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Date updatedAt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID      Task ID of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param type        Type of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param isDone      A boolean that indicates whether the task has been done or not."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param createdAt   Creation time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param updatedAt   Last update time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    Task(long taskID, TaskType type, boolean isDone, Date createdAt, Date updatedAt, String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.createdAt \u003d createdAt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.updatedAt \u003d updatedAt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Convenient constructor for \u003ccode\u003eTask\u003c/code\u003e object. By default, a task will have:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * - A random ID that still does not exist in the list of tasks stored by Duke chat bot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * - An unfinished status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * - Created and updated time equal to the object initialization time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param type        Type of the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    Task(TaskType type, String description) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        taskID \u003d TaskIdGenerator.shared.generateAndRegisterNewID();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        createdAt \u003d updatedAt \u003d new Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Parser for Task object. It converts the \u003ccode\u003eString\u003c/code\u003e representation of a Task that is used to"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * store it in the database into a \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param str A \u003ccode\u003eString\u003c/code\u003e representation of a \u003ccode\u003eTask\u003c/code\u003e which is stored in the file storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A \u003ccode\u003eTask\u003c/code\u003e object that corresponds to the \u003ccode\u003eString\u003c/code\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws InvalidTaskException An error that causes failure in the parsing process, e.g. inconsistent format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    static Task parseTask(String str) throws InvalidTaskException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return TaskParser.parseTask(str);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    boolean equals(Task other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return type \u003d\u003d other.type \u0026\u0026 description.equals(other.description);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    Long getTaskID() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return taskID;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    String getDescription() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return \"[\" + taskID + \"][\" + type.getTaskIcon() + \"][\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    String getDataRepresentation() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return taskID + \" | \" + type.getTaskIcon() + \" | \" + getStatusIcon() + \" | \" + createdAt"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                + \" | \" + updatedAt + \" | \" + description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    void markAsDone() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        updatedAt \u003d new Date();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public Date getCreatedAt() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return createdAt;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public Date getUpdatedAt() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return updatedAt;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return (isDone ? \"O\" : \"X\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 100
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/TaskIdGenerator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "class TaskIdGenerator {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static final int NUMBER_OF_DIGITS \u003d 5;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    static final TaskIdGenerator shared \u003d new TaskIdGenerator();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Random random;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private List\u003cLong\u003e listIDs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    TaskIdGenerator() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        random \u003d new Random();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        listIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    void setInitialListIDs(List\u003cLong\u003e listIDs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.listIDs \u003d listIDs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    long generateAndRegisterNewID() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            long id \u003d generateRandomID();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (listIDs.stream().noneMatch(value -\u003e value \u003d\u003d id)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                listIDs.add(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Long generateRandomID() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        long id \u003d random.nextInt(9) + 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        for (int i \u003d 1; i \u003c NUMBER_OF_DIGITS; ++i) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            id \u003d id * 10 + random.nextInt(10);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 40
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private TaskStorage taskStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for \u003ccode\u003eTaskManager\u003c/code\u003e, which handles execution involving tasks that are"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * stored by Duke chat bot."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param filePath File location to save tasks data that are stored by Duke chat bot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws Exception If Duke chat bot fails to load initial data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public TaskManager(String filePath) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        taskStorage \u003d new TaskStorage(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        tasks \u003d taskStorage.loadTasks();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        List\u003cLong\u003e listIDs \u003d tasks.stream().map(Task::getTaskID).collect(Collectors.toList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        TaskIdGenerator.shared.setInitialListIDs(listIDs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Gets a task with a specified ID."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID ID of the task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return A task with the specified ID."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public Task getTaskWithID(int taskID) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return tasks.get(getTaskIndexWithID(taskID));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Adds a new task to the list of tasks that is stored by Duke chat bot."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param task A new task to be added into the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws DuplicateTaskException If there is a duplicate task in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws IOException            If Duke chat bot fails to save the changes into the database file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void addTask(Task task) throws DuplicateTaskException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (tasks.stream().anyMatch(task::equals)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new DuplicateTaskException(\"Failed to add task, duplicate detected\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        taskStorage.saveTasks(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Removes a task from the list of tasks that is stored by Duke chat bot."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID The ID of the task in the list that will be removed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return The task that has been removed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws IOException An error if Duke chat bot fails to save the changes to the data file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public Task removeTask(long taskID) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        Task removedTask \u003d tasks.remove(getTaskIndexWithID(taskID));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        taskStorage.saveTasks(tasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return removedTask;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Marks a task that is stored by Duke chat bot as done."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID The ID of the task in the list that will be removed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws IOException An error if Duke chat bot fails to save the changes to the data file."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void markAsDone(long taskID) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        tasks.get(getTaskIndexWithID(taskID)).markAsDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        taskStorage.saveTasks(tasks);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Find tasks that match the specified keyword."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param keyword A keyword that is searched in the task description."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return List of tasks that match the specified keyword."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public List\u003cTask\u003e findTasks(String keyword) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        List\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (task.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                foundList.add(task);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return foundList;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private int getTaskIndexWithID(long id) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (tasks.get(i).getTaskID() \u003d\u003d id) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 110
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "class TaskParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static SimpleDateFormat formatter \u003d new SimpleDateFormat(\"EEE MMM d HH:mm:ss z yyyy\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    static Task parseTask(String s) throws InvalidTaskException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String[] components \u003d s.split(\" \\\\| \", 6);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (components.length \u003c 6) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidTaskException(\"Unsupported format of task representation in String, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                    + \"number of components: \" + components.length);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        long taskID \u003d parseTaskID(components[0]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        boolean taskIsDone \u003d parseTaskStatus(components[2]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        Date creationDate \u003d parseTaskDate(components[3]);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        Date updateDate \u003d parseTaskDate(components[4]);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (components[1].equals(TaskType.TODO.getTaskIcon())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new ToDoTask(taskID, taskIsDone, creationDate, updateDate, components[5]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } else if (components[1].equals(TaskType.DEADLINE.getTaskIcon())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            String[] deadlineInfo \u003d components[5].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (deadlineInfo.length \u003c 2) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidTaskException(\"Invalid DeadlineTask task format, doesn\u0027t contain time description\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new DeadlineTask(taskID, taskIsDone, creationDate, updateDate, deadlineInfo[0], deadlineInfo[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } else if (components[1].equals(TaskType.EVENT.getTaskIcon())) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            String[] eventInfo \u003d components[5].split(\" \\\\| \", 2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            if (eventInfo.length \u003c 2) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                throw new InvalidTaskException(\"Invalid EventTask task format, doesn\u0027t contain time description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return new EventTask(taskID, taskIsDone, creationDate, updateDate, eventInfo[0], eventInfo[1]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidTaskException(\"Unsupported task type: \" + components[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static long parseTaskID(String str) throws InvalidTaskException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return Long.parseLong(str);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidTaskException(\"Invalid task ID\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static boolean parseTaskStatus(String str) throws InvalidTaskException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        switch (str) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"X\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        case \"O\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidTaskException(\"Unsupported task completion status: \" + str);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private static Date parseTaskDate(String str) throws InvalidTaskException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            return formatter.parse(str);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            throw new InvalidTaskException(\"Invalid task date format: \" + str);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 72
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/TaskStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.exceptions.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "class TaskStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for a \u003ccode\u003eTaskStorage\u003c/code\u003e object that handles storing data into a text file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param filePath A path to the file that is used to store data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws IOException An error that occurs while trying to access the file (i.e. read or write operation)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    TaskStorage(String filePath) throws IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.file \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        File directory \u003d new File(String.valueOf(Path.of(filePath).getParent()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (!directory.isDirectory()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            directory.mkdirs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        if (!file.isFile()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Loads tasks that are listed in the text file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @return List of tasks that are present in the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws IOException          An error that occurs while trying to read the file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws InvalidTaskException An error that occurs if the format of tasks that are stored in the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *                              database is invalid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    List\u003cTask\u003e loadTasks() throws IOException, InvalidTaskException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        FileReader fileReader \u003d new FileReader(file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            Task task \u003d Task.parseTask(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Saves list of tasks in a text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param tasks List of tasks to be saved in the database, which is represented as a text file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @throws IOException An error that occurs while trying to write into the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    void saveTasks(List\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        FileWriter fileWriter \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        BufferedWriter bufferedWriter \u003d new BufferedWriter(fileWriter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        PrintWriter printWriter \u003d new PrintWriter(bufferedWriter);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            printWriter.println(task.getDataRepresentation());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        printWriter.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 77
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/TaskType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public enum TaskType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    TODO(\"T\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    DEADLINE(\"D\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    EVENT(\"E\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private String icon;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    TaskType(String icon) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.icon \u003d icon;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    String getTaskIcon() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return icon;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 17
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Constructor for \u003ccode\u003eToDoTask\u003c/code\u003e that represents one of the possible task types."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param taskID      ID of the task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description Description of the \u003ccode\u003eToDoTask\u003c/code\u003e task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param isDone      A boolean that indicates whether a \u003ccode\u003eToDoTask\u003c/code\u003e task has been done or not."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param createdAt   Creation time"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param updatedAt   Last update time"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ToDoTask(long taskID, boolean isDone, Date createdAt, Date updatedAt, String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(taskID, TaskType.TODO, isDone, createdAt, updatedAt, description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Convenient constructor for \u003ccode\u003eToDoTask\u003c/code\u003e that represents one of the possible task types."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * @param description Description of the \u003ccode\u003eToDoTask\u003c/code\u003e task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public ToDoTask(String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(TaskType.TODO, description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 27
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/comparators/CreationTimeComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class CreationTimeComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public int compare(Task taskA, Task taskB) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return taskB.getCreatedAt().compareTo(taskA.getCreatedAt());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/comparators/UpdateTimeComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class UpdateTimeComparator implements Comparator\u003cTask\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public int compare(Task taskA, Task taskB) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return taskB.getUpdatedAt().compareTo(taskA.getUpdatedAt());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 12
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/exceptions/DuplicateTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class DuplicateTaskException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public DuplicateTaskException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasks/exceptions/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class InvalidTaskException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public InvalidTaskException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 7
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        displayPicture.setClip(new Circle(35, 35, 35));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Flips the dialog box such that the \u003ccode\u003eImageView\u003c/code\u003e is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.jpg\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private Function\u003cString, Void\u003e inputHandler;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        inputHandler \u003d (str) -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void setInputHandler(Function\u003cString, Void\u003e inputHandler) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        this.inputHandler \u003d inputHandler;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Shows message from Duke chat bot to the user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void showMessageFromDuke(String message) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(message, dukeImage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     * Handles user input that is written in the text box."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(input, userImage));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        inputHandler.apply(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 64
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "         stylesheets\u003d\"@../stylesheets/style.css\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" prefWidth\u003d\"275\" styleClass\u003d\"message-text\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 17
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            prefWidth\u003d\"400.0\"  xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            fx:controller\u003d\"seedu.duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" promptText\u003d\"Enter a command\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                   prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                    prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" hvalue\u003d\"1.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" focusTraversable\u003d\"true\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 12
    }
  },
  {
    "path": "src/test/java/seedu/duke/tasks/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_isNotDone_stringReturned() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example deadlineTask\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String deadlineInfo \u003d \"next Monday\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[D][X] \" + description + \" (by: \" + deadlineInfo + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(description, deadlineInfo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_isDone_stringReturned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example deadlineTask\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String deadlineInfo \u003d \"next Monday\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[D][O] \" + description + \" (by: \" + deadlineInfo + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(description, deadlineInfo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        deadlineTask.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_timeFormat_stringReturned() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example deadlineTask\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String deadlineInfo \u003d \"02/01/2019 22:10\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[D][X] \" + description + \" (by: January 2, 2019, 10:10 PM)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        DeadlineTask deadlineTask \u003d new DeadlineTask(description, deadlineInfo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 32
    }
  },
  {
    "path": "src/test/java/seedu/duke/tasks/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class EventTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_isNotDone_stringReturned() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example eventTask\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String eventInfo \u003d \"random house\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[E][X] \" + description + \" (at: \" + eventInfo + \")\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        EventTask eventTask \u003d new EventTask(description, eventInfo);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_isDone_stringReturned() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example eventTask\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String eventInfo \u003d \"random Monday\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[E][O] \" + description + \" (at: \" + eventInfo + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        EventTask eventTask \u003d new EventTask(description, eventInfo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        eventTask.markAsDone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 24
    }
  },
  {
    "path": "src/test/java/seedu/duke/tasks/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "package seedu.duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_isNotDone_stringReturned() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example todo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[T][X] \" + description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        ToDoTask toDoTask \u003d new ToDoTask(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    public void toString_isDone_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String description \u003d \"example todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        String expectedValue \u003d \"[T][O] \" + description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        ToDoTask toDoTask \u003d new ToDoTask(description);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "        toDoTask.markAsDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 22
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "       [T][✘] borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     1.[T][✘] borrow book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "       [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "       [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 26
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "list"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 5
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "if ! javac -sourcepath ../src/main/java -Xlint:none -d ../bin ../src/main/java/seedu/duke/*.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "stevenwjy"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "stevenwjy": 34
    }
  }
]
