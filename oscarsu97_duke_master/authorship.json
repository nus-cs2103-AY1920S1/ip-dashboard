[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "oscarsu97": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "oscarsu97": 30
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "D | 1 | return book | 12/11/2019 1200"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "E | 1 | project meeting | 17/11/2019 1330"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "T | 1 | join a sport club"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 4
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "Duke is a chat bot that helps user manage their task list."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "It has the ability to create, read, update and delete a task "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "in the task list depending on the command given by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "#### Feature 1 - Adding a task "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "There are 3 types of tasks that can be added into the tasklist - `deadline`, `event`, `todo`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "**`todo`**: Type \"**todo {Your task description}**\" into the dialog box.    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "This will add a ToDo task with the given description into tasklist.  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "**`deadline`**: Type \"**deadline {Your task description} /by dd/MM/YYYY HHmm**\" into the dialog box.    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "This will add a Deadline task with the given description, date and time into tasklist.  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "**`event`**: Type \"**event {Your task description} /by dd/MM/YYYY HHmm**\" into the dialog box.    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "This will add an Event task with the given description, date and time into tasklist.  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "### Example of usage:   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "todo watch spiderman 3  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "deadline Team Project /by 19/12/2019 2359  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "event NUS career fair /at 12/12/2019 1200   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "### Expected outcome:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "`todo watch spiderman 3`:    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "![](https://i.ibb.co/r3Mh85f/todo.png)  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "`deadline Team Project /by 19/12/2019 2359`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "`event NUS career fair /at 12/12/2019 1200`"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "oscarsu97": 31
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "-": 83,
      "oscarsu97": 17
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets the DialogBox for the response by Duke."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param text text representing the response to display in dialog box"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param img image of Duke chat bot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return Dialog box where ImageView is on the left and text response on the right"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 65
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a chat bot that helps user to manage their task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * It executes according to the command given by user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises Duke class and loads the task list from storage file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * into a TaskList class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        parser \u003d new Parser(taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints welcome message, reads input from user"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * and executes it, until the loop exits."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                Command c \u003d parser.parse(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                System.out.println(c.execute(taskList, ui, storage));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Parse the input given by user and execute the command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * specific to command given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param input input entered into the dialog by the user"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing the response for the user"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            Command c \u003d parser.parse(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return c.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "oscarsu97": 74
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * A GUI for duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Controller for MainWindow and provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises Duke chat bot and display welcome message to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String welcomeMessage \u003d \"Hello! I\u0027m duke\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                DialogBox.getDukeDialog(welcomeMessage, dukeImage)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 54
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * AddCommand class that adds task into the task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Executes task based on the command type and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * then add them into task list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks to be done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui class that takes care of interaction with user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param storage  storage file the task list are stored"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string that represents the task added message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return ui.printTaskAdded(taskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 33
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * ByeCommand that handles the storage of updated task list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * into storage file and exiting."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialise ByeCommand class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Updates text file with the updated task list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * and prints the goodbye message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui class that deals with interaction with user"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param storage  Storage class that deals with storage of data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks stored"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing good bye message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        storage.updateFile(taskList.getTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        setExit(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return ui.showGoodbye();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 34
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Command class that is used to execute specific action based on the command type."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public abstract String execute(TaskList taskList, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 23
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * DeleteCommand that handles the deletion of task from task list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Deletes the specified task from the task list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui task that deals with interaction with the user"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing the deleted task message"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Task taskToDelete \u003d taskList.getTask(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        taskList.deleteTask(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int taskListSize \u003d taskList.getTaskListSize();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return ui.printDeletedTask(taskToDelete, taskListSize);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 33
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * DoneCommand that handles the marking of task as done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Marks the specific task as done in the task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui class that handles interaction with user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing the marked task message"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        taskList.getTask(index).markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return ui.printMarkedTask(taskList.getTask(index));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 29
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * FindCommand that handles the finding of task that matches"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * a specified search."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Finds the task that matches the keyword and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * adds them under a new ArrayList that stores"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * all the matching tasks and prints the matching"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * task message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui class that deals with interaction with user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing the message that has the list of matching class"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        //find all tasks that match keyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d taskList.findMatchingTasks(keyword);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        //print all tasks that match keyword"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return ui.printMatchingTasks(matchingTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 40
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * ListCommand that handles the printing of tasks in tasklist to show to user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the list of tasks in task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui that deals with interaction with the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing the list of tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 22
    }
  },
  {
    "path": "src/main/java/duke/command/StatisticCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * StatisticCommand that handles the printing of the report"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * of the tasks in task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class StatisticCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets the statistic report on the task list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * such as number of deadline tasks,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * number of event tasks, number of To Do tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * and percentage of work done."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param ui       Ui class that handles the interaction with user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param storage  storage file that stores the task list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representing the report on the task list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String execute(TaskList taskList, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d taskList.getTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int numOfDeadlineTask \u003d countDeadLineTasks(listOfTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int numOfEventTask \u003d countEventTasks(listOfTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int numOfToDoTask \u003d countToDoTasks(listOfTasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int numOfDoneTask \u003d countDoneTasks(listOfTasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int totalTasks \u003d listOfTasks.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        double percentageDone \u003d ((double) numOfDoneTask / totalTasks) * 100;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return String.format(\"Number of deadline tasks: %s\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                        + \"Number of Event tasks: %s\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                        + \"Number of ToDo tasks: %s\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                        + \"Percentage of work done: %.2f%%\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                numOfDeadlineTask, numOfEventTask, numOfToDoTask, percentageDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Counts the number of task that is done type."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param tasks tasks in the task list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return total number of task done"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private int countDoneTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Counts the number of task that is event type."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param tasks tasks in the task list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return total number of event tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private int countEventTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            if (task instanceof Event) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Counts the number of task that is deadline type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param tasks tasks in the task list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return total number of deadline tasks"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private int countDeadLineTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Counts the number of task that is ToDo type."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param tasks task in the task list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return total number of ToDo tasks"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private int countToDoTasks(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 116
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public DukeException(String msg) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 8
    }
  },
  {
    "path": "src/main/java/duke/exception/IncompleteCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Exception class that handles incomplete user\u0027s command input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class IncompleteCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public IncompleteCommandException(String msg) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/IndexOffBoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Exception class that handles wrong index given by user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * that is out of the size of the task list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class IndexOffBoundException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public IndexOffBoundException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(msg + \",please enter a valid index\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Exception class that handles with invalid command given by user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * which the bot cannot recognise."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public InvalidCommandException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 12
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.command.StatisticCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.IncompleteCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.IndexOffBoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Deals with making sense of the user command, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * checks for any wrong input given by user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Parser(TaskList taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if the user input is valid and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * return specific command based on the command given by user"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * if it is valid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param input given by the user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return specific command class based on user\u0027s command"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        handleWrongUserInput(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return getCommand(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets the specified command based on command user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return specific command according to command given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command getCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] taskDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String command \u003d taskDetails[0].trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        //Executing command based on command type"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareToDoCommand(input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareDeadlineCommand(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareEventCommand(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareDeleteCommand(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareDoneCommand(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareFindCommand(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareByeCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"statistics\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return prepareStatisticCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            assert false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            // code will not reach here given that we have checked that it is a valid command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new InvalidCommandException(\"Command is invalid, please enter a valid command.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prepares AddCommand with ToDo task added"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * so that it can be executed on later on."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareToDoCommand(String input) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String taskDescription \u003d input.substring(4).trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new AddCommand(new ToDo(taskDescription));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prepare AddCommand with Deadline task added"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * so that it can be executed later on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareDeadlineCommand(String input) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] deadlineDetails \u003d input.split(\"/by\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String taskDescription \u003d deadlineDetails[0].trim().substring(8).trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        LocalDateTime localDateTime \u003d readLocalDateTime(deadlineDetails[1].trim());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new AddCommand(new Deadline(taskDescription, localDateTime));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prepares AddCommand with Event task added"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * so that it can be executed on later on."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareEventCommand(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] eventDetails \u003d input.split(\"/at\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String taskDescription \u003d eventDetails[0].trim().substring(5).trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        LocalDateTime localDateTime \u003d readLocalDateTime(eventDetails[1].trim());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new AddCommand(new Event(taskDescription, localDateTime));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prepares DeleteCommand with specified index added"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * so that DeleteCommand knows which task to delete from"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * task list later on."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareDeleteCommand(String input) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] taskDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int index \u003d Integer.parseInt(taskDetails[1]) - 1;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prepares DoneCommand with specified index added"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * so that DoneCommand knows which task to mark as done"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * in task list later on."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return DoneCommand"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareDoneCommand(String input) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] taskDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int index \u003d Integer.parseInt(taskDetails[1]) - 1;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new DoneCommand(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prepares FindCommand with string keyword added"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * so that FindCommand can find task with the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * matching keywords."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return FindCommand"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareFindCommand(String input) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String keyword \u003d input.substring(5);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareListCommand() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareByeCommand() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Command prepareStatisticCommand() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return new StatisticCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Handle possible error in the input given by the user."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * It checks whether command is valid and then checks"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * whether the command is complete."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * If command is \u0027delete\u0027 or \u0027done\u0027, it checks whether"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * task index is within the size of task list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void handleWrongUserInput(String input) throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        checkValidCommand(input);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        checkCompleteCommand(input);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (input.startsWith(\"delete\") || input.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkCorrectTaskIndex(input);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks whether the input has fulfilled the minimum length."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * \u003cp\u003eFor deadline and event command,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * it checks whether it has the correct format and"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * correct separating word eg. \u0027/at\u0027."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void checkCompleteCommand(String input) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (input.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkMinimumSize(input, 5);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkSeparatingWord(input, \"/by\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            String[] taskDetails \u003d input.split(\"/by\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkCompleteDateTimeFormat(taskDetails[1].trim());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } else if (input.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkMinimumSize(input, 5);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkSeparatingWord(input, \"/at\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            String[] taskDetails \u003d input.split(\"/at\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkCompleteDateTimeFormat(taskDetails[1].trim());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } else if (input.startsWith(\"done\") || input.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            checkMinimumSize(input, 2);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks whether the input has fulfilled the minimum length"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * for specific command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param expectedLength length expected for specified command type"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void checkMinimumSize(String input, int expectedLength) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] taskDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (taskDetails.length \u003c expectedLength) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IncompleteCommandException(\"Size of input is below expected length,\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    + \" please have a input size of \" + expectedLength);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if it has separator such as \u0027/by\u0027 or \u0027/at\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * for Deadline or Event class."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void checkSeparatingWord(String input, String separator) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (!input.contains(separator)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IncompleteCommandException(String.format(\"Input does not contains \u0027%s\u0027,\""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    + \" please have a \u0027%s\u0027 in your input\", separator, separator));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if it has date and time"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * and checks if they are in correct format."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void checkCompleteDateTimeFormat(String dateTime) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        checkMinimumSize(dateTime, 2);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        checkCorrectFormat(dateTime);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if the task chosen is within the range of"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * the task list size."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void checkCorrectTaskIndex(String input) throws IndexOffBoundException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] taskDetails \u003d input.split(\" \");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int index \u003d Integer.parseInt(taskDetails[1]);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (index \u003e taskList.getTaskListSize()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IndexOffBoundException(\"The task you are getting is out of range,\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    + \" please enter a range from 1 to \" + taskList.getTaskListSize());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Check if the command given by the input is one of the recognised command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void checkValidCommand(String input) throws InvalidCommandException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String command \u003d input.split(\" \")[0];"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        case \"statistics\":"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    + \"please enter a valid command:\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if the date is of the format dd/MM/YYYY HHmm."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if day entered is within range 1 to 31."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if month entered is within range 1 to 12."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks  if timing entered is within 0000 to 2359."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void checkCorrectFormat(String dateTime) throws IncompleteCommandException {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        System.out.println(dateTime);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] dateAndTime \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        System.out.println(dateAndTime[0]);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (!(date.length \u003d\u003d 3)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IncompleteCommandException(\"Date format is wrong, please enter in this format dd/MM/YYYY HHmm.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int time \u003d Integer.parseInt(dateAndTime[1]);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int dayOfMonth \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int min \u003d time % 100;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (dayOfMonth \u003e 31) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IncompleteCommandException(\"Invalid day entered, please enter a range from 1 to 31.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (month \u003e 12) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IncompleteCommandException(\"Invalid month entered, please enter a range from 1 to 12.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (hour \u003e\u003d 24 || min \u003e\u003d 60) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new IncompleteCommandException(\"Invalid timing entered, please enter a range from 0000 to 2359.\");"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Convert string value of date and time"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * into LocalDateTime format."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param dateTime string representing the date and time"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return LocalDateTime format of the date and time"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private LocalDateTime readLocalDateTime(String dateTime) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] dateAndTime \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int time \u003d Integer.parseInt(dateAndTime[1]);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int dayOfMonth \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int min \u003d time % 100;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return LocalDateTime.of(year, month, dayOfMonth, hour, min);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 345
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Storage class that handles the loading of tasks from storage file and saving tasks into storage file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Loads the list of tasks from storage file,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * if file could not be found, it will return an empty ArrayList of tasks instead."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return an ArrayList that contains the list of tasks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            sc \u003d new Scanner(new File(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            readFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            throw new DukeException(\"file not found\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * After loading from the file, this method will"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * determine the type of task and add them to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void readFile() throws InvalidCommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            String data \u003d sc.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            String[] taskDetails \u003d data.split(\"[|]\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            String taskType \u003d taskDetails[0].trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                addToDoTask(taskDetails);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                addDeadlineTask(taskDetails);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                addEventTask(taskDetails);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                throw new InvalidCommandException(\"command of this file cannot be recognised\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Adds ToDo task into task list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskDetails contains task description"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void addToDoTask(String[] taskDetails) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Task toDoTask \u003d new ToDo(taskDetails[2].trim());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        boolean isDone \u003d taskDetails[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            toDoTask.markAsDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        tasks.add(toDoTask);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Adds Deadline task into task list and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * converts string date time into LocalDateTime."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskDetails contains task description, date and time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void addDeadlineTask(String[] taskDetails) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String taskDescription \u003d taskDetails[2].trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        LocalDateTime dateTime \u003d readLocalDateTime(taskDetails[3].trim());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Task deadlineTask \u003d new Deadline(taskDescription, dateTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        boolean isDone \u003d taskDetails[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            deadlineTask.markAsDone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        tasks.add(deadlineTask);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Adds Event task into task list and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * converts string date time into LocalDateTime."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskDetails contains task description, date and time"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void addEventTask(String[] taskDetails) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String taskDescription \u003d taskDetails[2].trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        LocalDateTime dateTime \u003d readLocalDateTime(taskDetails[3].trim());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Task eventTask \u003d new Event(taskDescription, dateTime);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        boolean isDone \u003d taskDetails[1].trim().equals(\"1\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            eventTask.markAsDone();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        tasks.add(eventTask);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Updates file with a given format based on the type of task"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * in the task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks to update into storage file"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void updateFile(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            FileWriter fileWriter \u003d new FileWriter(filePath, false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                String taskFormat \u003d getTaskFormat(task);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                fileWriter.write(taskFormat + \"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            fileWriter.close();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            System.out.println(\"file not found\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Converts task into proper string format before storing it."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param task the task to convert into string format"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string format of task"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private String getTaskFormat(Task task) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String taskType;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String isDone \u003d task.isDone() ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            taskType \u003d \"T\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return String.format(\"%s | %s | %s\", taskType, isDone, task.getDescription());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            taskType \u003d \"D\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return String.format(\"%s | %s | %s | %s\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    taskType, isDone, task.getDescription(), ((Deadline) task).getDateTime());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            taskType \u003d \"E\"; // Event Task"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return String.format(\"%s | %s | %s | %s\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                    taskType, isDone, task.getDescription(), ((Event) task).getDateTime());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Converts string value of date and time"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * into LocalDateTime format."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param dateTime string representing the date and time"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return LocalDateTime format of the date and time"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private LocalDateTime readLocalDateTime(String dateTime) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] dateAndTime \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String[] date \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int time \u003d Integer.parseInt(dateAndTime[1]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int dayOfMonth \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int month \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int year \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int hour \u003d time / 100;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int min \u003d time % 100;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return LocalDateTime.of(year, month, dayOfMonth, hour, min);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 186
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a Deadline task that needs to be done before a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises Deadline task with description of task and the date and time to be completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param description   description of task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param localDateTime date and time to be completed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Deadline(String description, LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets the date and time of the task in string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return date and time to be completed in string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        assert localDateTime !\u003d null : \"dateTime is not initialised\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return localDateTime.format(dateTimeFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * String representation of Deadline task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return String.format(\"[D][%s] %s(by: %s)\", getStatusIcon(), description, localDateTime.format(dateTimeFormat));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a Event class that starts at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private DateTimeFormatter dateTimeFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises Event task with description of task and the date and time to be completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param description   description of task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param localDateTime local date and time to be completed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Event(String description, LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets the date and time of the task in string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return date and time to be completed in string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String getDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        assert localDateTime !\u003d null : \"dateTime is not initialised\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return localDateTime.format(dateTimeFormat);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * String representation of Deadline task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return string representation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return String.format(\"[E][%s] %s(at: %s)\", getStatusIcon(), description, localDateTime.format(dateTimeFormat));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 43
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a Task class that needs to be completed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises Task class with description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param description description of the task to be done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets the status icon that represents whether the task is completed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return status icon"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Sets the task to be completed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Return a boolean value that shows whether the task is completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * String representation of task class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return String representation"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 57
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a list of tasks that needs to be do"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * and this class is able to add or delete tasks"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises TaskList with an empty ArrayList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises TaskList with a given task list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList list of tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Adds a new task into the task list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Deletes a task from the task list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param index the task index of the task to be deleted from the task list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Returns the list of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return list of task"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Returns the size of the list of task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return integer value of the size of the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public int getTaskListSize() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Gets a specified task from the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param index the index of the task in the task list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return the specified task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public Task getTask(int index) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void setTaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Finds task that matches the keyword and adds them into"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * an ArrayList containing all tasks that matches the keyword."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param keyword string value to match to when finding task"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return ArrayList that contains all tasks that matches the keyword"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public ArrayList\u003cTask\u003e findMatchingTasks(String keyword) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            if (checkKeyWord(task, keyword)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                addToMatchingTasks(task, matchingTasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private void addToMatchingTasks(Task task, ArrayList\u003cTask\u003e matchingTasks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        matchingTasks.add(task);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Checks if the task details has detail that matches with the keyword."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param task    task to check for matching keyword"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param keyword keyword to match"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return boolean value that determine if a keyword is contained in the task details"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private boolean checkKeyWord(Task task, String keyword) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        boolean hasKeyWord \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            hasKeyWord \u003d ((Deadline) task).getDateTime().contains(keyword);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (task instanceof Event) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            hasKeyWord \u003d ((Event) task).getDateTime().contains(keyword);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        if (hasKeyWord) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        //Check if Deadline, Event or ToDo task\u0027s description contains keyword"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        hasKeyWord \u003d task.getDescription().contains(keyword);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return hasKeyWord;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 123
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a ToDo task that needs to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Initialises ToDo class with description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param description task description"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * String representation of the To Do class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return String representation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return \"[T]\" + \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 26
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Represents a User Interface that handles interaction with the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the welcome message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String welcome \u003d \"Hello! I\u0027m duke\\nWhat can I do for you?\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        System.out.println(welcome);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the goodbye message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String showGoodbye() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the list of tasks in the task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String printTaskList(TaskList taskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String str \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.getTaskListSize(); i++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            str +\u003d String.format(\"%s. %s\\n\", i, taskList.getTask(i - 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the task that is being marked as done."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param task the task that is being marked."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String printMarkedTask(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String str \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the task that is being removed from the task list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param task     the task that is being removed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskSize the size of the list after deletion"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String printDeletedTask(Task task, int taskSize) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String str \u003d \"Noted. I\u0027ve removed this task:\\n\" + task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                + \"\\nNow you have \" + taskSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints the task added message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param taskList the task list that store all the tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @return the string message"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String printTaskAdded(TaskList taskList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        int taskListSize \u003d taskList.getTaskListSize();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Task task \u003d taskList.getTask(taskListSize - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String str \u003d \"Got it. I\u0027ve added this task:\\n\" + task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                + \"\\nNow you have \" + taskListSize + \" tasks in the list.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Prints all task that match with the keyword."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * @param matchingTaskList the list of tasks that is a match"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public String printMatchingTasks(ArrayList\u003cTask\u003e matchingTaskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        String str \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d matchingTaskList.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            str +\u003d String.format(\"%s. %s\\n\", i, matchingTaskList.get(i - 1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 87
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"200.0\" prefWidth\u003d\"324.0\" style\u003d\"-fx-background-color: #8c92ac;\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" minHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #8c92ac;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void dummyTest() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 12
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Event event \u003d new Event(\"read book\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "                LocalDateTime.of(2019, 12, 12, 13, 00));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        assertEquals(\"12/12/2019 1300\", event.getDateTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 16
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void testGetTaskSize() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        assertEquals(0, taskList.getTaskListSize());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 13
    }
  },
  {
    "path": "textUITestingTutorial/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " @ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   if not exist duke\\bin mkdir duke\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   javac  -cp duke\\src -Xlint:none -d duke\\bin duke\\src\\main\\java\\duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   )"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   java -classpath duke\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   if [ ! -d \"duke/bin\" ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   then"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       mkdir duke/bin"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "\t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   if ! javac -cp duke/src -Xlint:none -d duke/bin duke/src/main/java/duke.java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   java -classpath duke/bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   then"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   else"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   fi"
      }
    ],
    "authorContributionMap": {
      "oscarsu97": 59
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.duke.duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "       mainClassName \u003d \"seedu.duke.duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "│     └─seedu/duke/duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        └─seedu/duke/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/duke/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 167,
      "oscarsu97": 3
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Next, we create another Java class, `Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        Application.launch(duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "oscarsu97": 3
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart2.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "# JavaFX Tutorial Part 2 - Creating a GUI for duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "In this tutorial, we will be creating a GUI for duke from scratch based on the following mockup."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "![Mockup for duke](assets/DukeMockup.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX controls"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Controls are reusable UI elements. Refer to the [JavaFX\u0027s official documentation](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html) for a list of controls available."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "From the mockup above, can you identify the controls that we will need to use? "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Mockup | Control "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "------ | :---: |"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "![ImageView](assets/MockupImageView.png) | ImageView"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "![Label](assets/MockupLabel.png) | Label"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "![Button](assets/MockupButton.png) | Button"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "![TextField](assets/MockupTextField.png) | TextField"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "![ScrollPane](assets/MockupScrollPane.png) | ScrollPane"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Designing the Layout"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we know what controls we need to implement our UI, let’s start programming! We quickly run into a problem: how do we show all of them on the screen at once? "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Each scene is initialized with a root `Node`. In the previous tutorial, our root `Node` was a `Label`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What happens when we need to display more than one `Node` on the `Scene`? For that, we need to understand the JavaFX hierarchy. Recall from the previous tutorial:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "From the diagram, you see that the root `Node` can contain many other `Nodes` and similarly, each of those `Nodes` can contain many other `Nodes`. This means that if we can find a _container_ to set as our root `Node`, we can place all our other `Nodes` in it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "But how do we get the exact layout we want in the UI? JavaFX provides that functionality in the form of **layout panes** in `javafx.scene.layouts`. Each layout pane follows a _layout policy_ to decide how to arrange its children. For example, the `VBox` lays out its children in a single vertical column and its counterpart, the `HBox` lays out its children in a single horizontal row. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: A comprehensive list of layouts and how they behave is available here from the [official documentation](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/layout/package-summary.html)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "One way to obtain the layout in the mockup is as follows. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "![duke\u0027s layout](assets/DukeSceneGraph.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To get that layout, we create a new `AnchorPane` and add our controls to it. Similarly, we create a new `VBox` to hold the contents of the `ScrollPane`. The code should look something like this:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         //Step 1. Setting up required components"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         userInput \u003d new TextField();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.setScene(scene);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         stage.show();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and you should see something like this:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "![duke\u0027s raw layout](assets/RawLayout.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "That is not what we were expecting, what did we forget to do?"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "## Styling the Controls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Almost every JavaFX object offer properties that you can set to customize its look and feel. For example, the `Stage` allows you to set its preferred size and title. Again, refer to the official JavaFX documentation for a comprehensive list of properties that you can modify. Here’s how you can get the application to look like the mockup:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following code to the bottom of the `start` method. You\u0027ll have to add `import javafx.scene.layout.Region;` to the imports too."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 1. Formatting the window to look as expected."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "        stage.setTitle(\"duke\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // more code to be added here later"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application again. It should now look like this:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "![duke\u0027s Final layout](assets/FinalLayout.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. In the tutorial, we used an `AnchorPane` to achieve the desired layout.  "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you find other ways to obtain a similar layout? "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are the advantages and disadvantages of your layout?"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "1. Try interacting with the application"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What happens when you press the `Enter` key or left-click the send button?"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Why?"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 150,
      "oscarsu97": 8
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "For duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "public class duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    return \"duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "You have successfully implemented a fully functional GUI for duke!"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 236,
      "oscarsu97": 7
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "Let\u0027s return to duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "As part of the effort to separate the code handling duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    public void setDuke(duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": " * A GUI for duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "    private duke duke \u003d new duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 286,
      "oscarsu97": 8
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "1. Create a folder `[project root]\\text-ui-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oscarsu97"
        },
        "content": "   java -classpath ../bin duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "oscarsu97": 4
    }
  }
]
