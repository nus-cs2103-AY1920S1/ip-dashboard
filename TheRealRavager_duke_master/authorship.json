[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Main class for Duke chatbot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Handles user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Handles read/write to save file. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static Storage storageHandler \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** List of current tasks. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d storageHandler.load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        greet();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        respondToInput();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sends a friendly message to the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void greet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Hello! My name is Duke!\\nHow may I help you?\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Responds to user input by determining which subsequent methods to call."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void respondToInput() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        while (!userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    displayList(tasks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"done \")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    Task task \u003d tasks"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                            .get(Integer.parseInt(userInput.substring(\"done \".length())) - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    dukeReply(\"Successfully marked the following task as done:\\n\" + task.getInfo());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"todo \")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    addAndDisplayNewTodo(userInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"deadline \")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    addAndDisplayNewDeadline(userInput);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"event \")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    addAndDisplayNewEvent(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"delete \")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    int taskIndex \u003d Integer.parseInt(userInput.substring(\"delete \".length())) - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    deleteAndDisplayTask(taskIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else if (checkIsInputEquals(userInput, \"find \")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    String keyword \u003d userInput.substring(\"find \".length());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    for (Task task : tasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        if (task.getInfo().contains(keyword)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                            matchingTasks.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    displayList(matchingTasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    dukeReply(\"I don\u0027t know what that means, sorry!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                dukeReply(\"Oops sorry you\u0027re missing some stuff!!\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                dukeReply(\"I didnt understand that, sorry!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            finally {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                userInput \u003d sc.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Till next time, goodbye!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        sc.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns true if the first substring of the input string is equal to the comparison string."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input is the input string being checked."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param comparisonString is the string being matched."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return true if the first substring of the input string is equal to the comparison string."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static boolean checkIsInputEquals(String input, String comparisonString) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (input.length() \u003c comparisonString.length()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            return input.substring(0, comparisonString.length()).equals(comparisonString);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Displays the contents of current task list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void displayList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String finalOutput \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (!first) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                finalOutput +\u003d \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            first \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            finalOutput +\u003d i + 1 + \". \" + tasks.get(i).getInfo();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Here are the tasks in your list:\\n\" + finalOutput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Displays the input task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param task the input task."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void displayAddedTask(Task task) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"Got it. I\u0027ve added this task:\\n  \" + task.getInfo() + \"\\nNow you have \" +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Adds and subsequently displays a new todo created from the user input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param userInput string representing the todo the user intends to create."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when there are insufficient parameters to initialize a todo."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void addAndDisplayNewTodo(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Todo newTodo \u003d new Todo(userInput.substring(\"todo \".length()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(newTodo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        storageHandler.save(tasks);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayAddedTask(newTodo);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Adds and subsequently displays a new deadline created from the user input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param userInput string representing the deadline the user intends to create."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when there are insufficient parameters to initialize a deadline."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void addAndDisplayNewDeadline(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] descriptionAndDate \u003d userInput.substring(\"deadline \".length()).split(\"/by \", 2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String description \u003d descriptionAndDate[0];"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        LocalDateTime dueDate \u003d LocalDateTime"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .parse(descriptionAndDate[1].trim(), Deadline.dueDateFormat);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(description, dueDate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(newDeadline);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        storageHandler.save(tasks);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayAddedTask(newDeadline);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Adds and subsequently displays a new event created from the user input."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param userInput string representing the event the user intends to create."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when there are insufficient parameters to initialize a event."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void addAndDisplayNewEvent(String userInput) throws InvalidTaskException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] descriptionAndDateTimes \u003d userInput.substring(\"event \".length()).split(\"/at \", 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] startAndEndDateTimes \u003d descriptionAndDateTimes[1].split(\"-\", 2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String description \u003d descriptionAndDateTimes[0];"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        LocalDateTime startDateTime \u003d LocalDateTime"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .parse(startAndEndDateTimes[0].trim(), Event.eventDateTimeFormat);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        LocalDateTime endDateTime \u003d LocalDateTime"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                .parse(startAndEndDateTimes[1].trim(), Event.eventDateTimeFormat);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Event newEvent \u003d new Event(description, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.add(newEvent);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        storageHandler.save(tasks);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        displayAddedTask(newEvent);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Deletes and subsquently displays the task at the input task index."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param taskIndex task index of the task to be deleted."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void deleteAndDisplayTask(int taskIndex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Task task \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        storageHandler.save(tasks);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dukeReply(\"I have removed the following task:\\n  \" + task + \"\\nNow you have \" +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Sends the input reply string to the user after formatting it."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param reply input string to be formatted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static void dukeReply(String reply) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String enclosingLine \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String indentedReply \u003d reply.replaceAll(\"\\n\", \"\\n     \");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        System.out.println(enclosingLine + \"\\n     \" + indentedReply + \"\\n\" + enclosingLine);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 201,
      "-": 4
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Storage class is responsible for reading/writing tasks from/to a save file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Tasks saved in following format: taskType|isDone|description|otherFields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Directory of saved tasks. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private final String SAVE_DIRECTORY \u003d \"../../../data/duke.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Loads tasks from the save file into an arraylist and returns it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return an arraylist containing the saved tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e(100);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            File savedTasks \u003d new File(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            Scanner sc \u003d new Scanner(savedTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    Task task \u003d parseFileToDuke(sc.nextLine());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    tasks.add(task);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // TODO: Should handle \"corrupted\" saves in a different way."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                catch (InvalidTaskException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.out.println(\"No save file found! Creating one!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                FileWriter fw \u003d new FileWriter(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                fw.write(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            catch (IOException er) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                // TODO: make it actually abort"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                System.out.println(\"Unable to access save directory! Aborting!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Writes the input task list to the save file directory."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param tasks input task list containing all the current tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void save(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            FileWriter fw \u003d new FileWriter(SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            String parsedTasks \u003d parseDukeToFile(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fw.write(parsedTasks);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // TODO: Handle exception properly"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            System.out.println(\"Failed to save changes\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Parses the input lines to create tasks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param line input line from the save file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a task created from the input line."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the task type is unrecognized."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private Task parseFileToDuke(String line) throws InvalidTaskException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String[] taskDetails \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String taskType \u003d taskDetails[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            task \u003d new Todo(taskDetails);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            task \u003d new Deadline(taskDetails);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            task \u003d new Event(taskDetails);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            // TODO: Should change this to diff type of exception"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(\"Unrecognized task!\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Parses the input list of tasks into a single string containing all the tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param tasks input list of tasks to be parsed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a single string containing all the tasks."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private String parseDukeToFile(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String parsedTasks \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            String parsedTask \u003d \"\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            if (task instanceof Todo) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                parsedTask \u003d \"T|\" + (task.getIsDone() ? \"1|\" : \"0|\") + task.getDescription();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                parsedTask \u003d \"D|\" + (task.getIsDone() ? \"1|\" : \"0|\") + task.getDescription() + \"|\" +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((Deadline) task).getStringifiedDueDate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                parsedTask \u003d \"E|\" + (task.getIsDone() ? \"1|\" : \"0|\") + task.getDescription() + \"|\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                        ((Event) task).getStringifiedStartDateTime() + \"|\" +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                                ((Event) task).getStringifiedEndDateTime();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            parsedTasks +\u003d \"\\n\" + parsedTask;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return parsedTasks;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 133
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Raised when task attributes are invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class InvalidTaskException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public InvalidTaskException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 10
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * A deadline emulates a task that has to be completed by a specific due date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to parse input due dates. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static DateTimeFormatter dueDateFormat \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to prettify due dates. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static DateTimeFormatter prettifiedDateTimeFormat \u003d "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yy h:mma\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Date time that a deadline has to be completed by. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime dueDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a deadline that is not yet completed and has the input description and duedate."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description a short summary of what is due."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param dueDate the date the task is due."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description or due date is blank."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Deadline(String description, LocalDateTime dueDate) throws InvalidTaskException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a deadline from the input string array."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input input string array containing description, isDone and due date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description or due date is blank."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Deadline(String[] input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(input[2]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        dueDate \u003d LocalDateTime.parse(input[3], dueDateFormat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Validations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created deadline object has acceptable parameters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the deadline has unacceptable parameters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Description cannot be blank\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Due date cannot be blank\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(errorMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the due date in string format."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the due date in string format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStringifiedDueDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dueDate.format(dueDateFormat);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and details of a deadline."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and details of a deadline."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[D]\" + super.getInfo() + \"(by: \" + getPrettyDueDate() + \")\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the due date in a prettified string format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the due date in a prettified string format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getPrettyDueDate() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return dueDate.format(prettifiedDateTimeFormat);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 100
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Event emulates a task to be attended to that has a start and end date/time."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to parse input event date/times. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public static DateTimeFormatter eventDateTimeFormat \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Formatter used to prettify due dates. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private static DateTimeFormatter prettifiedDateTimeFormat \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d MMM yy h:mma\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Start date and time of the event. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** End date and time of the event. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    private LocalDateTime endDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates an event task with the input description and start and end date times."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description describes the nature of the event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param startDateTime the start date and time of the event. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param endDateTime the end date and time of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when any of description, start/end date and time are blank."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throws InvalidTaskException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates an event from the input string array."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input string array containing description, isDone, event start and end date/times."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException any of description, event start and end date/times are blank."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Event(String[] input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(input[2]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        startDateTime \u003d LocalDateTime.parse(input[3], eventDateTimeFormat);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        endDateTime \u003d LocalDateTime.parse(input[4], eventDateTimeFormat);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created event object has acceptable parameters."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the event has unacceptable parameters."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Description cannot be blank\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"Start time cannot be blank\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d errorMessage.isBlank() ? \"\" : \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            errorMessage +\u003d \"End time cannot be blank\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (!errorMessage.isBlank()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(errorMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the start date/time in string format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the start date/time in string format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStringifiedStartDateTime() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return startDateTime.format(eventDateTimeFormat);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the end date/time in string format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the end date/time in string format."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStringifiedEndDateTime() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return endDateTime.format(eventDateTimeFormat);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // TODO: display \"date startTime-endTime\" if same day, else \"startDateTime - endDateTime\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and details of an event."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and details of an event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[E]\" + super.getInfo() + \"(at: \" + getPrettyStartDateTime() + \"-\" +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "                getPrettyEndDateTime() + \")\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the start date/time in a prettified string format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the start date/time in a prettified string format."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getPrettyStartDateTime() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return startDateTime.format(prettifiedDateTimeFormat);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the end date/time in a prettified string format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the end date/time in a prettified string format."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getPrettyEndDateTime() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return endDateTime.format(prettifiedDateTimeFormat);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 129
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Abstract class emulating a task to be performed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Description that summarizes the details of the task. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /** Boolean value that represents whether a task has been completed. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a new task object that is not yet done, with the input description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description short summary of the details of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created Task object has acceptable parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the Task has unacceptable parameters."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected abstract void validate() throws InvalidTaskException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getter/setters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return the description of the task."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns true if the task is done and false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return true if the task is done and false otherwise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public boolean getIsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a string containing a tick symbol if the task is done and a cross otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a string containing a tick symbol if the task is done and a cross otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and description of a task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and description of a task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Marks the current task as completed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 80
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "import duke.exception.InvalidTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " * Todo class emulates a task to be completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a new todo object with the input description, that is not yet completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param description a short summary of the task to be done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description is blank."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Todo(String description) throws InvalidTaskException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Creates a new todo object with the input string array containing description and isDone."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @param input string array containing description and isDone."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when description is blank."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public Todo(String[] input) throws InvalidTaskException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        super(input[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        isDone \u003d input[1].equals(\"1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        validate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Validates that the created todo object has acceptable parameters."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @throws InvalidTaskException when the todo has unacceptable parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    protected void validate() throws InvalidTaskException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "            throw new InvalidTaskException(\"Description cannot be blank\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    // Getters/setters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * Returns a nicely formatted string that displays the status and details of a todo."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     * @return a nicely formatted string that displays the status and details of a todo."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return \"[T]\" + super.getInfo();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "        return getInfo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 58
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "duke doesnt understand this command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "todo "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "todo create a proper todo!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline this deadline is missing a date :("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline still missing /by "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "deadline now correct /by like right now"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event this is an incomplete event"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event still incomplete /at "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event still same /at now"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "event this is ok /at now - not now"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 21
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if ! javac -sourcepath ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "java -classpath ../bin duke/Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "else"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TheRealRavager"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "TheRealRavager": 34
    }
  }
]
