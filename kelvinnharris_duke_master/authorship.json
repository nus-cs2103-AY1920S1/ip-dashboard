[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "// Creating an executable jar file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "// Reading inputs from keyboard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "run {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "test {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 51,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | a"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | b"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | c"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 1 | d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | f"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | g"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "T | 0 | fjdklsafsa"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 9
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "![Screenshot](Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "PikaTodo is a simple chat-bot that helps you keep track of your tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- Create and add new tasks to a list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- Categorise each tasks into three different types: to-do, deadline and event."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- Mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- Delete tasks from the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- Update the description of a task in the list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- Find all tasks based on an input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Displays all the tasks in the list.**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "1. [T][✓] buy a new phone"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "2. [E][✘] Burning Man (at: 25/08/2019 0000)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "3. [D][✘] Java project (by: 30/10/2019 0900)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "4. [D][✘] thesis (by: 25/11/2019 2359)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `todo` or `event` or `deadline`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Creates a todo/event/deadline task and append it to the list.**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "The format for each task are as follows"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- todo: `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- deadline: `deadline \u003cdescription\u003e /by \u003cdatetimeformat\u003e`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "- event: `event \u003cdescription\u003e /at \u003cdatetimeformat\u003e`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "todo wash dishes"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "  [T][✘] wash dishes"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Now you have 5 tasks in the list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `done \u003cindex\u003e`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Marks as done the task of the provided index.**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "  [E][✓] Burning Man (at: 25/08/2019 0000)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Delete the task of the provided index from the list.**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "  [T][✓] buy a new phone"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `find \u003cstring\u003e`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Finds all tasks in the list which contain the provided string.**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "find thesis"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "1. [D][✘] thesis (by: 25/11/2019 2359)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `update \u003cindex\u003e w/\u003cdescription\u003e d/\u003cdatetimeformat\u003e`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Updates the task of provided index with a new description.**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "The field date is only mandatory for deadline and event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "update 2 w/Black Rock City d/03/09/2019 0000"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Noted. I\u0027ve edited this task:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "  [E][✓] Black Rock City (at: 03/09/2019 0000)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `clear`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Removes all tasks in the list.**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "clear"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "All tasks cleared!"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `help`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Lists all available commands in the program.**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "help"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Available commands:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"list\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"done \u003cindex\u003e\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"delete \u003cindex\u003e\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"find \u003cstring\u003e\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"update \u003cindex\u003e w/\u003cdescription\u003e d/\u003cdatetimeformat\u003e\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"clear\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"todo \u003cdescription\u003e\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"deadline \u003cdescription\u003e /by \u003cdatetimeformat\u003e\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"event \u003cdescription\u003e /at \u003cdatetimeformat\u003e\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\"bye\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "### `bye`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "**Terminates the program and exits.**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "bye"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 136,
      "-": 19
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.logic.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * The main driver of Duke program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        parser \u003d new Parser(tasks, ui);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Gets a response by Duke in the form of string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * \u003cp\u003eThe list of tasks saved locally would be updated each time this method is called.\u003c/p\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param input The input text"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the response by Duke in the form of string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d parser.processLine(input); // add, delete, etc"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d e.getMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (Exception e) { // for unhandled exceptions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            response \u003d (\"Something is wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // save to text file"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        storage.save(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 52,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 12
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.logic.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.ui.DialogBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            scene.getStylesheets().add(\"/view/Theme.css\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            stage.setTitle(\"PikaTodo\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Image icon \u003d new Image(\"/images/masterball.png\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            stage.getIcons().add(icon);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            stage.show(); // set visibility to true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            // Display intro message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            VBox dialogContainer \u003d (VBox) scene.lookup(\"#dialogContainer\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    DialogBox.getDukeDialog(Ui.printWelcome(), dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 48
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class which deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param filePath The string representing the path of the file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Loads saved data before the program runs, if there is any saved data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return A list of tasks which is saved locally."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If an error occurs when loading."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // check for directory existence"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        File dir \u003d new File(\"data\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!dir.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            dir.mkdir();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // check for text file existence"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String filePath \u003d this.filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                f.createNewFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        // read from file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                String[] items \u003d line.split(\"[|]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                for (int i \u003d 0; i \u003c items.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    items[i] \u003d items[i].trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                if (line.charAt(0) \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    Task todo \u003d new ToDo(items[2], items[1].equals(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    list.add(todo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                } else if (line.charAt(0) \u003d\u003d \u0027E\u0027) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    Task event \u003d new Event(items[2], items[1].equals(\"1\"), items[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    list.add(event);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                } else if (line.charAt(0) \u003d\u003d \u0027D\u0027) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    Task deadline \u003d new Deadline(items[2], items[1].equals(\"1\"), items[3]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    list.add(deadline);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (FileNotFoundException | DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Save the tasks to the file in the directory provided."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param tasks The tasks to be saved after running duke."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void save(TaskList tasks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d tasks.list;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            String filePath \u003d this.filePath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                sb.append(task.getFileStringFormat()).append(\"\\r\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fw.write(sb.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (IOException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 106
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An exception class created specifically for exception which occurs when running Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(message, cause, enableSuppression, writableStackTrace);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class which deals with making sense of the user command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * \u003cp\u003eThis class uses Ui to help interact with user using CLI, by printing helpful messages.\u003c/p\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for class Parser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param tasks An object which consists of a list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param ui An object that deals with user interaction (printing, querying)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Parser(TaskList tasks, Ui ui) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Processes the string command by user and carries out its corresponding actions, such as"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * adding into task list and marking a task as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput A string command by user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string to be placed as response in GUI"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If a command is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String processLine(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert (ui !\u003d null) : \"UI should not be null\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert (tasks !\u003d null) : \"TaskList should not be null\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d tasks.list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String[] words \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String firstWord \u003d words[0];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printHelp();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printList(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task done \u003d markDone(list, words);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printMarkDone(done);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task removed \u003d deleteTask(list, words);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printDeleteTask(removed, list);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            ArrayList\u003cTask\u003e listFound \u003d findTasks(words[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printList(listFound);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"update\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task updatedTask \u003d updateTask(userInput, list, words);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printUpdateTask(updatedTask);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            tasks.list.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printClearTask();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Task newTask \u003d addNewTask(userInput, list, words, firstWord);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return ui.printAddTask(newTask, list);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Update a task according to the description provided and returns it."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput The user input string to be processed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list of tasks containing the task to be updated"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from userInput"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the updated task"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task updateTask(String userInput, ArrayList\u003cTask\u003e list, String[] words) throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d list.get(index - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (task instanceof ToDo) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            updateToDo(userInput, (ToDo) task);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            updateDeadline(userInput, (Deadline) task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            updateEvent(userInput, (Event) task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"Task is neither a to-do, a deadline nor an event\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void updateEvent(String userInput, Event task) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String description \u003d userInput.split(\" \", 3)[2].split(\"w/\", 2)[1].split(\" d/\", 2)[0];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String by \u003d userInput.split(\" \", 3)[2].split(\"d/\", 2)[1];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        task.setDescription(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        task.setAt(by);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void updateDeadline(String userInput, Deadline task) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String description \u003d userInput.split(\" \", 3)[2].split(\"w/\", 2)[1].split(\" d/\", 2)[0];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String by \u003d userInput.split(\" \", 3)[2].split(\"d/\", 2)[1];"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        task.setDescription(description);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        task.setBy(by);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void updateToDo(String userInput, ToDo task) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String description \u003d userInput.split(\" \", 3)[2].split(\"w/\", 2)[1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        task.setDescription(description);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Adds new task to the the list of tasks and returns it."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput The input string from GUI"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list of tasks in storage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from userInput"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param firstWord The first word of the userInput"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return The task that is added to the the list of tasks"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task addNewTask(String userInput, ArrayList\u003cTask\u003e list, String[] words, String firstWord)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        switch (firstWord) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d createTodo(userInput, words);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d createDeadline(userInput, words);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d createEvent(userInput, words);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"Please enter a valid input. Enter \\\"help\\\" for more info.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates an event and adds it to the list of tasks."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput The input string from GUI"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from userInput"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return The task that is added to the list of tasks"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task createEvent(String userInput, String[] words) throws DukeException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (words.length \u003c 2 || words[1].equals(\"\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"The description of a event cannot be empty.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String description \u003d userInput.split(\" \", 2)[1].split(\" /\", 2)[0];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String at \u003d userInput.split(\" \", 2)[1].split(\" /at \", 2)[1];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new Event(description, at);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates a deadline and adds it to the list of tasks."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput The input string from GUI"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from userInput"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return The task that is added to the list of tasks"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task createDeadline(String userInput, String[] words) throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (words.length \u003c 2 || words[1].equals(\"\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String description \u003d userInput.split(\" \", 2)[1].split(\" /\", 2)[0];"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String by \u003d userInput.split(\" \", 2)[1].split(\" /by \", 2)[1];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new Deadline(description, by);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates a to-do and adds it to the list of tasks."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param userInput The input string from GUI"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from userInput"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return The task that is added to the list of tasks"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task createTodo(String userInput, String[] words) throws DukeException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (words.length \u003c 2 || words[1].equals(\"\")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return new ToDo(userInput.split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a list of tasks which contains a certain word."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param word The word to be searched"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a list of tasks containing the string argument"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ArrayList\u003cTask\u003e findTasks(String word) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ArrayList\u003cTask\u003e listFound \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        tasks.list.stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .filter(task -\u003e task.getDescription().contains(word))"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                .forEach(listFound::add);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return listFound;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Deletes a task from the list of tasks and returns the deleted task."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list of tasks"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from the input string"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the deleted task"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task deleteTask(ArrayList\u003cTask\u003e list, String[] words) throws DukeException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"You need to specify a task that is done.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nInput must be an integer.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (Integer.parseInt(words[1]) \u003e list.size() || Integer.parseInt(words[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        int index \u003d Integer.parseInt(words[1]) - 1;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task removed \u003d tasks.delete(index);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return removed;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Marks a task in the list of tasks as done and returns it."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list of tasks"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param words An array of words from the input string"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the task that is marked as done"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Task markDone(ArrayList\u003cTask\u003e list, String[] words) throws DukeException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (words.length !\u003d 2) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"You need to specify a task that is done.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (Integer.parseInt(words[1]) \u003e list.size() || Integer.parseInt(words[1]) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(\"Task does not exist.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d list.get(Integer.parseInt(words[1]) - 1);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 266
    }
  },
  {
    "path": "src/main/java/duke/logic/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class which deals with the interactions of the user, including printing and requesting for input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns the welcome message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the welcome message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static String printWelcome() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"Hello! I\u0027m PikaTodo.\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns the error message due to file not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the error message due to file not found."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String showLoadingError() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"Error: Unable to load. File not found. Empty list is created.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string response containing the string representation of the list of tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list to be printed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string response containing the string representation of the list of tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String printList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return \"No task found.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            sb.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            IntStream.rangeClosed(1, list.size()).forEach(x -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                Task task \u003d list.get(x - 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                sb.append(x).append(\". \").append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a message to remind user that a task has been marked as done."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be marked as done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a message to remind user that a task has been marked as done."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printMarkDone(Task task) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Nice! I\u0027ve marked this task as done:\\n  \" + task.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a message to remind user that a task has been removed from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param removed The deleted task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list, in which the task has been removed from."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a message to remind user that a task has been removed from the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printDeleteTask(Task removed, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"  \" + removed.toString() + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"Now you have \" + list.size() + \" task\" + (list.size() \u003e 1 ? \"s\" : \"\") + \" in the list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a message to remind user that a task has been added to the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list, to which the task is to be added to."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a message to remind user that a task has been added to the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printAddTask(Task task, ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"  \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"Now you have \" + list.size() + \" task\" + (list.size() \u003e 1 ? \"s\" : \"\") + \" in the list\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a message to remind user that a task has been updated."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be updated."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a message to remind user that a task has been updated."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printUpdateTask(Task task) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Noted. I\u0027ve edited this task:\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"  \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a message to help user with the available commands."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a message to help users with the available commands."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printHelp() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"Available commands:\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"list\\\"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"done \u003cindex\u003e\\\"\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"delete \u003cindex\u003e\\\"\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"find \u003cstring\u003e\\\"\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"update \u003cindex\u003e w/\u003cdescription\u003e d/\u003cdate\u003e\\\"\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"clear\\\"\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"todo \u003cname\u003e\\\"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"deadline \u003cname\u003e /by \u003cdate\u003e \u003ctime\u003e\\\"\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"event \u003cname\u003e /at \u003cdate\u003e \u003ctime\u003e\\\"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                + \"\\\"bye\\\"\\n\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string to remind user that all tasks has been cleared."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string to remind user that all tasks has been cleared."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    String printClearTask() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (\"All task cleared!\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 125
    }
  },
  {
    "path": "src/main/java/duke/model/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing the list of tasks to be done."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for TaskList, in the event when the list is provided."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param list The list of tasks to be done."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for TaskList, in the event when local data is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Add a task to the list in this class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param task The task to be added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        list.add(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Delete the task in the list based on the index parameter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param index The index of the task in the list to be deleted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns the deleted task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Task delete(int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 55
    }
  },
  {
    "path": "src/main/java/duke/model/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing an event, inherits from Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for deadline, to be called for instantiating this object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param by The time at which the deadline is due."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.date \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for deadline, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the deadline."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Define whether a deadline is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param by The time at which the deadline is due."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If input date format is invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Deadline(String description, boolean isDone, String by) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.date \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"D | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.by;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets \u0027by\u0027 and \u0027date\u0027 field according to the argument of the method."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param by The new \u0027by\u0027 field"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If input date format is invalid"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setBy(String by) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.date \u003d formatter.parse(by);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 96
    }
  },
  {
    "path": "src/main/java/duke/model/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing an event, inherits from Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for event, to be called for instantiating this object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param at The time at which the event occurs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws ParseException If input date format is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.date \u003d formatter.parse(at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for event, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the event."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Define whether an event is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param at The time at which the event occurs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If input date format is invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Event(String description, boolean isDone, String at) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.date \u003d formatter.parse(at);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"E | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.at;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getAt() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Sets \u0027at\u0027 and \u0027date\u0027 field according to the argument of the method."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param at The new \u0027at\u0027 field"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @throws DukeException If input date format is invalid"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setAt(String at) throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.date \u003d formatter.parse(at);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            throw new DukeException(e.getMessage() + \"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 96
    }
  },
  {
    "path": "src/main/java/duke/model/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An abstract class representing a Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for task, to be called when instantiating subclasses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for task, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Defines whether a task is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns the status icon of whether a task is done."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a tick if a task is done, otherwise, a cross."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private String getStatusIcon() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.isDone \u003d done;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public abstract String getFileStringFormat();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 68
    }
  },
  {
    "path": "src/main/java/duke/model/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * A class representing a to-do, inherits from task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Constructor for to-do, to be called for instantiating this object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the to-do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Another constructor for to-do, to be called when storage loads from data stored locally."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param description The description of the to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param isDone Define whether a to-do is done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return Returns a string which is formatted to be stored in local storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public String getFileStringFormat() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return \"T | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 40
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.SnapshotParameters;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.WritableImage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        int lineCount \u003d text.split(\"\\n\").length;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        dialog.setMinHeight((double) (lineCount - 2) * 19 + 2 * 22);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        displayPicture.setClip(new Circle(25, 25, 25));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Returns a dialog box."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param text the text for the dialog box"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param img the image for the dialog box"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return returns a dialog box"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Label dialog \u003d (Label) db.getChildren().get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        dialog.setBackground("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new Background(new BackgroundFill(Color.rgb(255, 213, 171), new CornerRadii(10), Insets.EMPTY)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Flips a dialog box an returns it."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param text the text for the dialog box"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @param img the image for the dialog box"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @return return a flipped dialog box"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Label dialog \u003d (Label) db.getChildren().get(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        dialog.setBackground("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                new Background(new BackgroundFill(Color.rgb(179, 224, 255), new CornerRadii(10), Insets.EMPTY)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 99
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "                    DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 59
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003cfx:root id\u003d\"dialogBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" bottom\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003cAnchorPane id\u003d\"root\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter a command here\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"555.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 22
    }
  },
  {
    "path": "src/test/java/duke/command/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Unit test for TaskList class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * A stub for to-do class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    protected static class ToDoStub extends Task {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        ToDoStub(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return \"[x] wash dishes\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        public String getFileStringFormat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            return \"T | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Add a task to TaskList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result Task will be added without any error."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void addToTaskList_inputTask_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        TaskList tasks \u003d  new TaskList(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        tasks.add(new ToDoStub(\"wash dishes\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(1, tasks.getList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 48
    }
  },
  {
    "path": "src/test/java/duke/model/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Unit test for Deadline class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create a deadline object with correct input and format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result A deadline object is created successfully."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void deadlineCreation_normalInput_outputMatches() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Deadline(\"submit assignment\", \"29/08/2019 2359\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(task.toString(), \"[D][x] submit assignment (by: 29/08/2019 2359)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create a deadline object with wrong date format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result An exception will be thrown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkDateFormat_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Deadline(\"submit quiz\", \"20/09/2019\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(e.getMessage(), \"Unparseable date: \\\"20/09/2019\\\"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Check the deadline object file string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result The format matches correctly."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkFileStringFormat_correctFormat_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Deadline(\"submit quiz\", \"20/09/2019 2359\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(\"D | 0 | submit quiz | 20/09/2019 2359\", task.getFileStringFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 60
    }
  },
  {
    "path": "src/test/java/duke/model/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "package duke.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " * Unit test for event class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create an event object with correct input and format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result An event object is created successfully."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void eventCreation_normalInput_outputMatches() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Event(\"party\", \"29/08/2019 2200\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assert task !\u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        assertEquals(task.toString(), \"[E][x] party (at: 29/08/2019 2200)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Create an event object with wrong date format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result An exception will be thrown."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkDateFormat_wrongDateFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Event(\"event\", \"20/09/2019\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(e.getMessage(), \"Unparseable date: \\\"20/09/2019\\\"\\nPlease use the format: dd/MM/yyyy hhmm\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * Check the event object file string format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     * @result The format matches correctly."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    void checkFileStringFormat_correctFormat_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        Task task \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            task \u003d new Event(\"an event\", \"12/10/2020 0900\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            assertEquals(\"E | 0 | an event | 12/10/2020 0900\", task.getFileStringFormat());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kelvinnharris"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kelvinnharris": 60
    }
  }
]
