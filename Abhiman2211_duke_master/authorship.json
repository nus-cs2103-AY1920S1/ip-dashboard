[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    id \"org.openjfx.javafxplugin\" version \"0.0.8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    mavenLocal()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    archiveVersion \u003d \"1.6\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    version \u003d \"12.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.1.0\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.1.0\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 32,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "# Duke User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### Task Creation - Todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Create todo tasks and store them within Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `todo [todo description]`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Type and pass this command to Duke to create and store a new todo task. The todo\u0027s description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "will be as specified by you."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`todo finish math homework`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`A new todo will be created with its description being \"todo finish math homework\"`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### Task Creation - Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Create deadline tasks and store them within Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `deadline [deadline description] /by [DD/MM/YYYY] [hhmm]`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Type and pass this command to Duke to create and store a new deadline task. The deadline\u0027s description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "and completion date and time will be as specified by you. To create a deadline successfully, follow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "the above syntax exactly with the time being specified in 24h format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`deadline get ready for the party /by 2/12/2019 1800`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`A new deadline will be created with its description being \"get ready for the party\" and`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`the deadline\u0027s completion data and time being 2/12/2019 1800, or \"2nd of December, 2019, 6pm\" as represented by Duke`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### Task Creation - Event"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Create todo tasks and store them within Duke."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `event [event description] /at [DD/MM/YYY] [hhmm-hhmm]`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Type and pass this command to Duke to create and store a new event task. The event\u0027s description"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "and duration date and time will be as specified by you. To create an event successfully, follow"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "the above syntax exactly with the time being specified in 24h format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`event party at school /at 4/12/2019 1800-2230`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`A new event will be created with its description being \"party at school\" and`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`the event\u0027s duration data and time being 2/12/2019 1800-2230, or \"2nd of December, 2019, 6pm-10.30pm\" as represented by Duke`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### List"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "List down all the tasks stored in Duke."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `list`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "All the tasks stored within Duke will be shown by Duke in a list form."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`A numbered list of tasks will be showed by Duke with all the tasks listed out.`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### Task Deletion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Delete any task stored in Duke which you no longer require or want to see."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `delete [task index]`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Deletes the task as specified by the index you type in the command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`The second task as shown by Duke\u0027s list of tasks will be deleted.`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### Mark Tasks as Done"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Mark any task stored in Duke as done after you have completed it."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `done [task index]`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Marks the task as specified by the index you type in the command as done. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`done 2`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`The second task as shown by Duke\u0027s list of tasks will be marked as done.`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### Search"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Search Duke for any task based on a keyword."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "### `find [search query]`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Duke will search for every task that matches the query you type, either fully or partially."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`find return`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`Duke will list down all the tasks which have the word \"return\" in them.`"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 116,
      "-": 13
    }
  },
  {
    "path": "dukeTasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "T | 0 | math homework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "D | 1 | submit cs2103 assignment | 11th of November, 2019, 6pm"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Handles user\u0027s commands concerning the addition of a "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * new task into Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    AddCommandValidator validator \u003d new AddCommandValidator();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder execute(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] inputAsArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validator.validateDetail(inputAsArr);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String command \u003d inputAsArr[0];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String rest \u003d input.substring(input.indexOf(\" \") + 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return addTodo(rest, taskList, storage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return addDeadline(rest, taskList, storage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return addEvent(rest, taskList, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static StringBuilder addTodo(String details, TaskList list, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new ToDos(details);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        list.addTask(task, storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return addSuccess(task).append(\"\\n\" + \"Now you have \" "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + list.getNumberOfTasks() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static String processDeadlineDate(String dateDetails) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String date \u003d dateDetails.split(\" \")[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String time \u003d dateDetails.split(\" \")[1];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return DateHelper.parseDate(date) + \", \" + DateHelper.parseTime(time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private StringBuilder addDeadline(String details, TaskList list, Storage storage) "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throws DukeException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] detAsArr \u003d details.split(\" /by \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validator.validateDeadlineDetails(detAsArr);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String deadline \u003d detAsArr[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dueDetail \u003d detAsArr[1];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new Deadline(deadline, processDeadlineDate(dueDetail));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        list.addTask(task, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return addSuccess(task).append(\"\\n\" + \"Now you have \" + list.getNumberOfTasks() "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \" tasks in the list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static String processEventDate(String dateDetails) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String date \u003d dateDetails.split(\" \")[0];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String time \u003d dateDetails.split(\" \")[1];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] timeDetails \u003d time.split(\"-\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return DateHelper.parseDate(date) + \", \" "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                + DateHelper.parseTime(timeDetails[0]) + \"-\" + DateHelper.parseTime(timeDetails[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private StringBuilder addEvent(String details, TaskList list, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] detAsArr \u003d details.split(\" /at \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validator.validateEventDetails(detAsArr);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String event \u003d detAsArr[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dueDetail \u003d detAsArr[1];"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new Event(event, processEventDate(dueDetail));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        list.addTask(task, storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return addSuccess(task).append(\"\\n\" + \"Now you have \" + list.getNumberOfTasks() "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            + \" tasks in the list.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static StringBuilder addSuccess(Task task) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(\"\\t\" + task.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert sb.length() \u003d\u003d 0 : \"The stringbuilder should not be empty.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 78
    }
  },
  {
    "path": "src/main/java/AddCommandValidator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Class used for validating user commands regarding adding "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * a new task into Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddCommandValidator {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new AddCommandValidator object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddCommandValidator() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Validates whether a command inputted by a user into Duke"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * is valid or not."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param detail The details as inputted by the user but split into an array based on whitespaces. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws InvalidDukeCommandException If the command inputted by the user is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void validateDetail(String[] detail) throws InvalidDukeCommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (detail.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeCommandException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (! detail[0].equals(\"todo\") \u0026\u0026 ! detail[0].equals(\"event\") \u0026\u0026 ! detail[0].equals(\"deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeCommandException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (detail.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeCommandException(\"OOPS!!! The description of a \" + detail[0] + \" cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Checks if the details given for the deadline by the user are valid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and sufficient to create the deadline."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param detail The details as inputted by the user but split into an array based on whitespaces. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws InvalidDeadlineSyntaxException If the deadline details as inputted "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *     by the user are insufficient or of incorrect format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void validateDeadlineDetails(String[] detail) throws InvalidDeadlineSyntaxException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (detail.length !\u003d 2) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDeadlineSyntaxException(\"OOPS!!! The due date of a deadline must be specified.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Checks if the details given for the event by the user are valid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and sufficient to create the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param detail The details as inputted by the user but split into an array based on whitespaces. "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws InvalidEventSyntaxException If the event details as "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *     inputted by the user are insufficient or of incorrect format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void validateEventDetails(String[] detail) throws InvalidEventSyntaxException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (detail.length !\u003d 2) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidEventSyntaxException(\"OOPS!!! The timeline of an event must be specified.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 58
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Executes the command inputted by the user into duke and"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * returns the string representation of Duke\u0027s reply to the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * inside a stringbuilder object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param input The user\u0027s command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList The taskList object handling all tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the tasks file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The string representation of Duke\u0027s response to the user\u0027s command, inside a stringbuilder object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException If any exceptional situation was encountered while executing the user\u0027s command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException If any exceptional situation was encountered while writing or reading from storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public abstract StringBuilder execute("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            String input, TaskList taskList, Storage storage) throws DukeException, IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 19
    }
  },
  {
    "path": "src/main/java/DateHelper.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Helps handle and format the date inputted by the user into "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Duke into a valid format."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DateHelper {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the user inputted time into a text format that will"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * be displayed by Duke in its responses."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param timeDetail The time as inputted by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of the time as to be shown by Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws InvalidDukeDateException When the user inputs invalid or non-existent time details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String parseTime(String timeDetail) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int hour \u003d (Integer.parseInt(timeDetail) / 100);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateHour(hour);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String actualHour \u003d hour % 12 \u003d\u003d 0 ? \"12\" : String.valueOf(hour % 12); "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int minute \u003d Integer.parseInt(timeDetail) % 100;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateMinute(minute);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String meridiem \u003d hour \u003e\u003d 12 \u0026\u0026 hour \u003c 24 ? \"pm\" : \"am\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String processedMinute \u003d minute \u003d\u003d 0 ? \"\" : \".\" + String.valueOf(minute);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return actualHour + processedMinute + meridiem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the user inputted date into a text format that will"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * be displayed by Duke in its responses."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dateDetail The date as inputted by the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of the date as to be shown by Duke."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws InvalidDukeDateException When the user inputs invalid or non-existent date details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static String parseDate(String dateDetail) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] dateBreakup \u003d dateDetail.split(\"/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateDateInput(dateBreakup);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String month \u003d getMonth(dateBreakup[1]);    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int lastDigitOfDay \u003d Integer.parseInt(dateBreakup[0]) % 10;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int firstDigitOfDay \u003d Integer.parseInt(dateBreakup[0]) / 10;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dayEnding \u003d firstDigitOfDay \u003d\u003d 1 ? \"th\" : lastDigitOfDay \u003d\u003d 1 "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ? \"st\" : lastDigitOfDay \u003d\u003d 2 ? \"nd\" : lastDigitOfDay \u003d\u003d 3 ? \"rd\" : \"th\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return dateBreakup[0] + dayEnding + \" of \" + month + \", \" + dateBreakup[2]; "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static String getMonth(String month) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int monthIndex \u003d Integer.parseInt(month);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (monthIndex \u003e 12 || monthIndex \u003c 1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeDateException(\"OOPS!!! The month you inputted is not valid.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new DateFormatSymbols().getMonths()[monthIndex - 1];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void validateHour(int hour) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (hour \u003e\u003d 24 || hour \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeDateException(\"OOPS!!! The time you inputted is not valid.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void validateMinute(int minute) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (minute \u003e 59 || minute \u003c 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeDateException(\"OOPS!!! The time you inputted is not valid.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void validateDateInput(String[] date) throws InvalidDukeDateException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (date.length !\u003d 3) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new InvalidDukeDateException(\"OOPS!!! The date you inputted is not of valid format.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 73
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Deadline class which inherits from the Task class and is used to represent"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * deadlines within Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String dueDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a new Deadline object for use within Duke."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dueDate Description of the time the deadline needs to be finished."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Deadline(String task, String dueDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a new Deadline object for use within Duke with a predermined completion state."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the deadline task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param dueDate Description of the time the deadline needs to be finished."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param complete Boolean variable to determine if the deadline has been finished or not."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Deadline(String task, String dueDate, boolean complete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task, complete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a deadline as it is stored in text file on the local system."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String isComplete \u003d this.complete ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"D | \" + isComplete + \" | \" + task + \" | \" + dueDate; "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a deadline."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dueDate + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 48
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Handles user\u0027s commands concerning the deletion of a "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * task in Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder execute(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateDeleteCommand(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return taskList.deleteTask(Integer.parseInt(command[1]), storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The index of task to be deleted must be a number.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void validateDeleteCommand(String[] command) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The index of task to be deleted must be mentioned.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 26
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private HBox mainView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a dialogbox design used for Duke user\u0027s."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param text The text to be displayed in the dialogbox. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param img The user\u0027s image to be shown in the dialogbox."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The dialog box as designed for the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        db.getStyleClass().add(\"hboxUser\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a dialogbox design used for Duke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param text The text to be displayed in the dialogbox. "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param img Duke\u0027s image to be shown in the dialogbox."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The dialog box as designed for Duke."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        db.getStyleClass().add(\"hboxDuke\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 78
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Handles user\u0027s commands concerning marking a task as "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * done inside Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder execute(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateDoneCommand(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return taskList.markAsDone(Integer.parseInt(command[1]), storage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The completed task\u0027s index must be a number.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void validateDoneCommand(String[] command) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"OOPS!!! The completed task\u0027s index must be mentioned.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 25
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Main class of the program where supporting classes are called"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * and used to make Duke function."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Duke object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException If an unknown or unidentifiable command is stored within the tasks file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Duke() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        File f \u003d new File(\"./dukeTasks.txt\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        storage \u003d new Storage(f.getAbsolutePath());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        taskList \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of the response to be given by Duke in response"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * to user commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param input The user\u0027s command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of Duke\u0027s response."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return parser.processCommand(input, taskList, storage).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 33,
      "-": 4
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * DukeException class used to create the throwable Duke Exceptions"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * particular to Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new throwable DukeException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param message Message to be displayed when the DukeException is encountered."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 15
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Event class which inherits from the Task class and is used to represent"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * events within Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String timeline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Event object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the event to take place."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param timeline Description of the duration of the event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Event(String task, String timeline) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.timeline \u003d timeline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Event object for use within Duke, "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * with a predermined completion state of whether "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * it is complete or not."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the event to take place."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param timeline Description of the duration of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param complete Boolean variable to determine if the deadline has been finished or not."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Event(String task, String timeline, boolean complete) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task, complete);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.timeline \u003d timeline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of an event as "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * it is stored in text file on the local system."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String isComplete \u003d complete ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"E | \" + isComplete + \" | \" + task + \" | \" + timeline; "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of an event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + timeline + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 50
    }
  },
  {
    "path": "src/main/java/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Handles the user command when the user decides to "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * exit Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder execute(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new StringBuilder(showGoodbyeMessage());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static String showGoodbyeMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 17
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Handles user\u0027s commands concerning the search of a "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * particular task in Duke."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder execute(String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        validateFindCommand(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert ! input.equals(\"\") : \"The input should have been caught as blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return taskList.printMatchingTasks(command[1]);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void validateFindCommand(String[] command) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"Find query must be specified!!!\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 22
    }
  },
  {
    "path": "src/main/java/InvalidDeadlineSyntaxException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Represents an exception in the case of the user trying to input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * a deadline but with an invalid syntax."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class InvalidDeadlineSyntaxException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new throwable InvalidDeadlineSyntaxException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param message Message to be displayed when the InvalidDeadlineSyntaxException is encountered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public InvalidDeadlineSyntaxException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 14
    }
  },
  {
    "path": "src/main/java/InvalidDukeCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Represents an exception in the case the user types an invalid "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * command that cannot be understood by Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class InvalidDukeCommandException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new throwable InvalidDukeCommandException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param message Message to be displayed when the InvalidDukeCommandException is encountered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public InvalidDukeCommandException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 14
    }
  },
  {
    "path": "src/main/java/InvalidDukeDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Represents an exception in the case the user types the date for "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * either an event or deadline incorrectly so that it cannot be"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * understood by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class InvalidDukeDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new throwable InvalidDukeDateException."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param message Message to be displayed when the InvalidDukeCommandException is encountered."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public InvalidDukeDateException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 15
    }
  },
  {
    "path": "src/main/java/InvalidEventSyntaxException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Represents an exception in the case of the user trying to input"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * an event but with an invalid syntax."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class InvalidEventSyntaxException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new throwable InvalidEventSyntaxException."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param message Message to be displayed when the InvalidEventSyntaxException is encountered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public InvalidEventSyntaxException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 14
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Starts the UI for Duke."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void start(Stage stage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setVariables(duke, stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        showGreetingMessage(dialogContainer, dukeImage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Sets the Duke variable of this object to the Duke object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * provided as parameter."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param d The duke object to be referenced by this object\u0027s "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *     duke object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void setVariables(Duke d, Stage s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        stage \u003d s;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates the greeting message from Duke in the "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * appropriate dialogbox form."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static void showGreetingMessage(VBox dialogContainer, Image image) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String dukeGoodbyeText \u003d \"Hello! I\u0027m Duke\" + \"\\n\" + \"What can I do for you?\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                DialogBox.getDukeDialog(dukeGoodbyeText, image)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (input.toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            stageCloser(stage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private void stageCloser(Stage stage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(1.5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        delay.setOnFinished(event -\u003e stage.close());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 84
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The parser class processes user inputs into understandable commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * which are then executed by the Duke program. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Parser object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Processes the user\u0027s input into a valid command and takes an action "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * accordingly based on the deciphered command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList The taskList object handling all tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object needed to load and write back to the tasks file. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws Exception When any error occurs during the execution of the user command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder processCommand("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String input, TaskList taskList, Storage storage) throws DukeException, IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d input.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert command.length \u003e 0 : \"command length should be greater than 0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (command[0].equals(\"list\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return taskList.printTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteCommand().execute(input, taskList, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DoneCommand().execute(input, taskList, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"find\")) { "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new FindCommand().execute(input, taskList, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else if (command[0].equals(\"bye\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ExitCommand().execute(input, taskList, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else { "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddCommand().execute(input, taskList, storage); "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 43
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The Storage class deals with retrieving tasks from the local file"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * and writing back to the file in the case of any modifications to the tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Constructs a new Storage object which obtains its data for initialisation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * from a specified file.  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param filePath File path of the file wherein tasks are stored. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a new Task object created from an individual line of description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param line The string which, in a single line, describes a particular task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The task constructed from the inputted task detail line."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When the line of string being read does not describe any particular type of task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Task createTaskFromFile(String line) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String[] command \u003d line.split(\" \\\\| \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        boolean isPending \u003d command[1].equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        switch (command[0]) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new ToDos(command[2], isPending);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new Deadline(command[2], command[3], isPending);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new Event(command[2], command[3], isPending);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new DukeException(\"Uncategorizable task.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Writes the inputted task back into the file at the bottom of the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task The task being stored in the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file being written to cannot be found."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void addTaskToFile(Task task) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        fw.write(task.toStringForFile() + System.lineSeparator());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns an array list of tasks constructed from the tasks saved locally on"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return An array list of tasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws FileNotFoundException When the file being written to cannot be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws DukeException When a particular task saved in the file is of the "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *     wrong format or does not describe an existing type of task."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        File file \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Scanner scan \u003d new Scanner(file);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            while (scan.hasNextLine()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                list.add(createTaskFromFile(scan.nextLine()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            scan.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (FileNotFoundException f) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private void createFile(File file) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            System.err.println(e.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Writes all the tasks from an array list back into the file on the local system."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param filePath Location of the file where the tasks are to be stored."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param list The array list containing the tasks to be written back onto the file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file being written to be cannot be found."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void writeToFile(String filePath, ArrayList\u003cTask\u003e list) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (Task t : list) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            fw.write(t.toStringForFile() + System.lineSeparator());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the file path of the file which the storage object "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * is using for read and write purposes."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return the filePath"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 117
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The Task class is used to represent Tasks and acts as the "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * superclass to the Event, Deadline and Todos classes. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    Boolean complete;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String done \u003d \"[✓] \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    String pending \u003d \"[✗] \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Task object to be used within Duke."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the task to be created."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.complete \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new Task object to be used within Duke with the option"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * to predetermine whether it has been completed or not.  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Description of the task to be created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param isPending Boolean to state whether the task been completed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Task(String task, boolean isPending) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.complete \u003d isPending;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the string representation of a Task for the purpose of writing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * back onto the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return String representation of a task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"wrong because of this\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the string representation of a Task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (this.complete) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return done + task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return pending + task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Sets the status of a particular task to completed."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.complete \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 60
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The TaskList class handles the storage, adding and deleting of"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * tasks in Duke program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new TaskList object initialised with tasks from"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the inputted array list of Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param taskList An array list of tasks with which the TaskList object is initialised."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the an array list which is the TaskList object\u0027s task list. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return The current TaskList object\u0027s task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public int getNumberOfTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Adds a new Task into the task list and writes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the changes back into the local file of tasks as well."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task The task to be added into the task list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object handling the read and write from the local file storing the tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file to be written to is not found or does not exist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void addTask(Task task, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        storage.addTaskToFile(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a list of all tasks which have the string "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * queried as the input present in them."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param query The string being searched for in each task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return List of all tasks containing the queried string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder printMatchingTasks(String query) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        query \u003d query.toLowerCase().replaceAll(\"\\\\*\", \"\\\\\\\\w*\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        query \u003d query.contains(\"\\\\w\") ? \".*\" + query + \".*\" : query;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (Task task : this.taskList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            String info \u003d task.toString().toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            if (info.matches(query) || info.contains(query.toLowerCase())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                sb.append(index + \". \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (sb.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return sb.append(\"No such tasks found :( \" + query);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return sb;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns a stringbuilder object with all the tasks in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * arraylist of tasks returned in a list form."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return Stringbuilder object with tasks in string form as a list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder printTasks() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (this.getTaskList().isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return sb.append(\"You have no tasks.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(\"Here are the tasks in your list:\" + \"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (Task task : this.getTaskList()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            sb.append(index + \". \" + task.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert sb.length() \u003e 0 : \"The stringbuilder being returned shouldn\u0027t be empty\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Deletes a specific task from the task list and writes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * the changes back into the local file of tasks as well."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param index The index of the task to be deleted from the array list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object handling the read and write from the local file storing the tasks."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return A stringbuilder object containing the response to be given by Duke upon deleting a task successfully."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IndexOutOfBoundsException When the index specified by the user does not exist."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file to be written to is not found or does not exist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder deleteTask(int index, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            this.taskList.get(index - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new IndexOutOfBoundsException(\"☹ OOPS!!! The item specified does not exist.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(\"Noted. I\u0027ve removed this task: \" + \"\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(taskList.get(index - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        this.taskList.remove(index - 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        storage.writeToFile(storage.getFilePath(), taskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        sb.append(\"Now you have \" + taskList.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert sb.length() \u003d\u003d 0 : \"The stringbuilder should not be empty.\";   "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Sets the status of a particular task in the array list of tasks to "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * completed thereby signifying that the task has been completed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param index The index of the task in the array list to be set to completed to be marked as completed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param storage The Storage object handling the read and write from the local file storing the tasks."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @return A stringbuilder object containing the response to be given by Duke upon "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *     marking a task as done successfully."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IndexOutOfBoundsException When the index specified by the user does not exist."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws IOException When the file to be written to is not found or does not exist."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public StringBuilder markAsDone(int index, Storage storage) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            taskList.get(index - 1).markAsDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            storage.writeToFile(storage.getFilePath(), taskList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            sb.append(\"Nice! I\u0027ve marked this task as done: \" + \"\\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            sb.append(taskList.get(index - 1).toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            assert sb.length() \u003d\u003d 0 : \"The stringbuilder should not be empty.\";   "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return sb;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new IndexOutOfBoundsException(\"☹ OOPS!!! The item specified does not exist.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 142
    }
  },
  {
    "path": "src/main/java/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * The ToDo class is used to represent and manage ToDos within"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new ToDo with the specified detail."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Detail of what the ToDo requires to be done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ToDos(String task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Creates a new ToDo with the specified detail and "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * its completition status being predetermined."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param task Detail of what the ToDo requires to be done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param complete Boolean to determine whether the ToDo has been completed or not."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public ToDos(String task, boolean complete) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        super(task, complete);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a ToDo as it is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * to be stored in the local file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toStringForFile() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String isComplete \u003d this.complete ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"T | \" + isComplete + \" | \" + task; "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Returns the String representation of a ToDo."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 44
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../stylesheets/dialogboxcolor.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #323232;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #5D5C61;\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 19
    }
  },
  {
    "path": "src/test/java/DateHelperTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class DateHelperTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseTime_validTimeFormat_timeStringReturned() throws DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"5.26pm\", DateHelper.parseTime(\"1726\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"9.24am\", DateHelper.parseTime(\"924\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"3.33am\", DateHelper.parseTime(\"333\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"11.45pm\", DateHelper.parseTime(\"2345\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"12.18pm\", DateHelper.parseTime(\"1218\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseDate_validDateFormat_dateStringReturned() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"11th of February, 2019\", DateHelper.parseDate(\"11/2/2019\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"23rd of June, 2018\", DateHelper.parseDate(\"23/6/2018\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"9th of April, 2022\", DateHelper.parseDate(\"9/4/2022\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"12th of May, 2015\", DateHelper.parseDate(\"12/5/2015\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"16th of November, 2020\", DateHelper.parseDate(\"16/11/2020\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseDate_insufficientDateDescription_dukeExceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            DateHelper.parseDate(\"16112020\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            assertEquals(\"OOPS!!! The date you inputted is not of valid format.\", e.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    } "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void parseTime_invalidTimeFormat_dukeExceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            DateHelper.parseTime(\"2411\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            assertEquals(\"OOPS!!! The time you inputted is not valid.\", e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 42
    }
  },
  {
    "path": "src/test/java/TodosTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "class TodosTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void toStringConversion_incompleteTask_taskStringReturned() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new ToDos(\"Say hello to me.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"[T][✗] Say hello to me.\", task.toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public void toStringConversionForFile_incompleteTask_taskStringReturned() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Task task \u003d new ToDos(\"Say hello to me.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(\"T | 0 | Say hello to me.\", task.toStringForFile());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 17
    }
  }
]
