[
  {
    "path": "data/dukeData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "todo | false | sleep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "todo | false | sleep late"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 2
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents an \"add\" command that allows the user to add one of the possible types of task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds a new task to the storage and TaskList and gives notice once completed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The taskList used by the current Duke app."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui responsible for displaying things in the current Duke app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit used for the current Duke app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param newTask The new task that will be added."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void addTask(TaskList tasks, Ui ui, Storage storage, Task newTask) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(\"Got it. I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, newTask.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storage.writeList(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 20
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a bye command that can be executed."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a ByeCommand Object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ByeCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns whether or not the command is the exit command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return always returns true."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the bye command. utilizes the given TaskList, Ui and Storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(\"Bye! See you again soon!!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 28
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An abstract class which represent what a command should do."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "abstract class Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    abstract boolean isExit();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    abstract void execute(TaskList tasks, Ui ui, Storage storage);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 8
    }
  },
  {
    "path": "src/main/java/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents the command that is responsible for creating a deadline Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Creates a deadline command Object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DeadlineCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the construction of a deadline Task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String input \u003d ui.getLastCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String command \u003d input.substring(9).trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        addTask(tasks, ui, storage, new DeadlineTask(command));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 31
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a deadline task. A deadline task is represented by a name and a time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String taskTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a Deadline Task which is not completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task a string that defines the deadline task. a deadline task requires a /by to split it\u0027s name and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DeadlineTask(String task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String[] taskSplit \u003d task.split(\"/by\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (taskSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new EmptyDescriptionDukeException(\"deadline\", \"/by\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else if (taskSplit[0].equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new EmptyDescriptionDukeException(\"deadline\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskName \u003d taskSplit[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskTime \u003d taskSplit[1].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            Date time \u003d formatter.parse(taskTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            taskTime \u003d formatter.format(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new InvalidTimeDukeException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a Deadline task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param isCompleted Whether or not the task is completed yet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param taskTime The Time of the task represented by a string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DeadlineTask(String isCompleted, String taskName, String taskTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(taskName, Boolean.parseBoolean(isCompleted));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns a string which represents this task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a String detailing the task\u0027s name and time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String output \u003d \"[D]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"[✓]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"[✗]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        output +\u003d \" \" + this.taskName + \" (By: \" + this.taskTime + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * returns a string that is used to store it in the save file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a string specifically formatted for storage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String output \u003d \"deadline | \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"true\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"false\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        output +\u003d \" | \" + this.taskName + \" | \" + this.taskTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 81
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a Delete Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a Delete Comamnd object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the  deletion of a particular task based on the latest input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String input \u003d ui.getLastCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String deleteNumber \u003d input.substring(7).split(\" \")[0].trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(deleteNumber) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showMessage(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showMessage(6, tasks.get(taskNumber).toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            storage.writeList(tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showMessage(\"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException err) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new InvalidDescriptionDukeException(\"delete\", deleteNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 39
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a Done Command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DoneCommand extends Command{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a Done Command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DoneCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the completion of a particular task defines by the last user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String input \u003d ui.getLastCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String doneNumber \u003d input.substring(5);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            int taskNumber \u003d Integer.parseInt(doneNumber) - 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            tasks.complete(taskNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            storage.writeList(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showMessage(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showMessage(6, tasks.get(taskNumber).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException err) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new InvalidDescriptionDukeException(\"done\", doneNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 39
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * The driver class of the entire Duke Project"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        storage \u003d new Storage(filePath, ui);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            tasks \u003d new TaskList(storage.getData());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.straightLine();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                ui.straightLine(); // show the divider line (\"_______\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                Command c \u003d DukeParser.parse(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                ui.showError(e.toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                ui.straightLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String filePath \u003d \"data/dukeData.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        new Duke(filePath).run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "austinsantoso": 39
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An Exception made for Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DukeException extends RuntimeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 8
    }
  },
  {
    "path": "src/main/java/DukeFileReader.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a File Reader that reads data from the save file."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DukeFileReader {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns the Task data present in the file path in the form of an arrayList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param filePath the filepath to obtain data from"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return an arrayList that contains task data from the file path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @throws FileNotFoundException The exception when a file is not found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static ArrayList\u003cTask\u003e getData(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            String line \u003d sc.nextLine();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            String[] lineSplit \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            String eventType \u003d lineSplit[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            switch (eventType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    tasks.add(new ToDoTask(lineSplit[1].trim(), lineSplit[2].trim()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    tasks.add(new EventsTask(lineSplit[1].trim(), lineSplit[2].trim(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                                lineSplit[3].trim()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    tasks.add(new DeadlineTask(lineSplit[1].trim(), lineSplit[2].trim(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                                lineSplit[3].trim()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                    throw new FileErrorDukeException(file.getAbsolutePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 46
    }
  },
  {
    "path": "src/main/java/DukeFileWriter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a File Writer that is responsible for saving changes to the Duke App."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DukeFileWriter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Saves the task list to a save file."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param filePath the filepath to write the file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks the tasks to be stored"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @throws IOException throws IOException when there is an error in the IO process."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static void writeToFile(String filePath, ArrayList\u003cTask\u003e tasks) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String allTaskData \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (Task x: tasks) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            allTaskData +\u003d x.toFileFormat();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            allTaskData +\u003d \"\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        fw.write(allTaskData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 26
    }
  },
  {
    "path": "src/main/java/DukeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a parser that needs to make sense of the user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DukeParser {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a Duke Object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public DukeParser() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Makes sense of the String given to the parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param input The user input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns one the possible commands interpreted from the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public static Command parse(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String command \u003d input.split(\" \")[0].trim(); //get the first word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new DoneCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new DeleteCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new ToDoCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new DeadlineCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new EventCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return new FindCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new InvalidCommandDukeException(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 42
    }
  },
  {
    "path": "src/main/java/EmptyDescriptionDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An Exception thrown when the user does not properly describe a task. The exception is defined by the task type"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * and the missing description."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class EmptyDescriptionDukeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String desc \u003d \" \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs an EmptyDescription Exception for Duke."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param id the type of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param desc the missing description of the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EmptyDescriptionDukeException(String id, String desc) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.desc \u003d \" \" + desc + \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs an EmptyDescription Exception for Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param id The Type of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EmptyDescriptionDukeException(String id) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gives out a string that describes the exception."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A string that describes the exception."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return \"OOPS!!! The description\" + desc + \"of a \" + id + \" task cannot be empty.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 37
    }
  },
  {
    "path": "src/main/java/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents the command that is responsible for creating a event Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs an event command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EventCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the construction of a event Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String input \u003d ui.getLastCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String command \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        addTask(tasks, ui, storage, new EventsTask(command));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 30
    }
  },
  {
    "path": "src/main/java/EventsTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents an Event task. An event task is defined by its name and a time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class EventsTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String taskName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String taskTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs an event Task which is not completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task a string that defines the deadline task. a deadline task requires a /by to split it\u0027s name and time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EventsTask(String task) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String[] taskSplit \u003d task.split(\"/at\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (taskSplit.length \u003c 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new EmptyDescriptionDukeException(\"event\", \"/at\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else if (taskSplit[0].equals(\"\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new EmptyDescriptionDukeException(\"event\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskName \u003d taskSplit[0].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskTime \u003d taskSplit[1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            Date time \u003d formatter.parse(taskTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            formatter \u003d new SimpleDateFormat(\"dd MMMM yyyy, ha\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            taskTime \u003d formatter.format(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (ParseException err) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new InvalidTimeDukeException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs an event task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param isCompleted Whether or not the task is completed yet."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param taskName The name of the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param taskTime The Time of the task represented by a string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public EventsTask(String isCompleted,String taskName, String taskTime) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(taskName, Boolean.parseBoolean(isCompleted));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.taskTime \u003d taskTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns a string which represents this task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a String detailing the task\u0027s name and time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String output \u003d \"[E]\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"[✓]\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"[✗]\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        output +\u003d \" \" + this.taskName + \" (At: \" + this.taskTime + \")\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * returns a string that is used to store it in the save file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a string specifically formatted for storage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String output \u003d \"event| \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"true\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"false\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        output +\u003d \" | \" + this.taskName + \" | \" + this.taskTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 81
    }
  },
  {
    "path": "src/main/java/FileErrorDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An exception thrown when there is an error reading or writing to a save file."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class FileErrorDukeException extends DukeException{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * creates the exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param filePath The filepath that caused the Error"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public FileErrorDukeException(String filePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(filePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gives out a string that describes the exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A string that describes the exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry,File at \" + filePath + \" not Found.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 24
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class FindCommand extends Command{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String filter \u003d ui.getLastCommand().substring(5).trim();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ArrayList\u003cTask\u003e allTask \u003d tasks.getList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (int i \u003d 0; i \u003c allTask.size(); i++) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            if (allTask.get(i).toString().contains(filter)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                ui.showMessage(6, (i + 1) + \".\" + allTask.get(i).toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 21
    }
  },
  {
    "path": "src/main/java/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents the Help command, which is responsible for showing all possible commands"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs the Help Command Object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the command to display all possible commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //do something"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(\"List of available commands\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- help || shows the list of avaibale commands\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- list || Displays the tasks currently stored\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- todo \u003ctask name\u003e || adds a todo task to the list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- event \u003ctask name\u003e /at \u003ctime with format dd/mm/yyyy hh:mm\u003e\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(10, \"adds an event task to the list\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- deadline \u003ctask name\u003e /by \u003ctime with format dd/mm/yyyy hh:mm\u003e\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(10, \"adds an deadline task to the list\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- done \u003ctask number\u003e || completes the indicated task on the list\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- delete \u003ctask number\u003e || deletes the indeicated task from the list\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(6, \"- bye || closes the app\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 40
    }
  },
  {
    "path": "src/main/java/InvalidCommandDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An exception thrown when the parser cannot parse the user input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class InvalidCommandDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param command the user input that caused the exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public InvalidCommandDukeException(String command) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gives out a string that describes the exception."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A string that describes the exception."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what \u0027\" + this.command + \"\u0027 means.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 24
    }
  },
  {
    "path": "src/main/java/InvalidDescriptionDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An exception thrown when the description given by the user cannot be used by the command."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class InvalidDescriptionDukeException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs the exception when the following description of a command does not match the requirement."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param command The command called."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param description The description that was passed by the user for the command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public InvalidDescriptionDukeException(String command, String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(\"command:\" + command + \" description: \" + description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gives out a string that describes the exception."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A string that describes the exception."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return \"OOPS!!! invalid description \u0027\" + this.description + \"\u0027 for command \u0027\" + this.command + \"\u0027\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 29
    }
  },
  {
    "path": "src/main/java/InvalidTimeDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An exception thrown when the given time description does not match the requirements."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class InvalidTimeDukeException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public InvalidTimeDukeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(\"invalid date\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gives out a string that describes the exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return A string that describes the exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return \"Sorry, Dates should be in format \u0027dd/mm/yyyy hh:mm\u0027\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 20
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a list command which is responsible for displaying the current list of tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class ListCommand extends Command{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a ListCommand Object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the command to display all tasks currently saved."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ui.showMessage(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        ArrayList\u003cTask\u003e allTask \u003d tasks.getList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (int i \u003d 0; i \u003c allTask.size(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            ui.showMessage(6, (i + 1) + \".\" + allTask.get(i).toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 35
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a storage class which is responsible for saving and loading to and from the save file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Ui ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a Storage Object to handle saving or loading."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param filePath the location of the save file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui the Ui object that is responsible for displaying things."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Storage(String filePath, Ui ui) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        //System.out.println(\"full path: \" + file.getAbsolutePath());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                new File(\"data\").mkdir();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                //ui.showMessage(\"created new save file\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            } catch (IOException err) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                throw new FileErrorDukeException(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            //ui.showMessage(\"Save file Detected\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns an arrayList that has all currently stored tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return an ArrayList containing all the tasks stored."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ArrayList\u003cTask\u003e getData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return DukeFileReader.getData(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new FileErrorDukeException(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Writes the given TaskList to the save file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The Tasklist that has all the tasks to be saved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void writeList(TaskList tasks) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            DukeFileWriter.writeToFile(this.filePath, tasks.getList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new FileErrorDukeException(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 59
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * An Abstract class which represent the basic of a task. A task at least needs a name."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    boolean completed \u003d false;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    String task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task The name of the task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a task that has or may not be completed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task The name of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param isCompleted The state of the task\u0027s completion."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Task(String task, boolean isCompleted) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.completed \u003d isCompleted;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Completes the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void complete() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.completed \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * returns a string that is used to store it in the save file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a string specifically formatted for storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return \"[✓] \" + this.task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            return \"[✗] \" + this.task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    abstract String toFileFormat();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 47
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a list that contains all currently saved tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs an empty TaskList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a new TaskList based on a given ArrayList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks an arraylist of tasks to be used as the TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.taskList \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns an arrayList that contains all stores tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return An ArrayList of stored tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Removes a task with the given index from the TaskList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param taskIndex The index of the task to be deleted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void remove(int taskIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskList.remove(taskIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Gives the number of tasks that are currently Stored."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return the number of tasks currently stored."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retreves the task at the given index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param index the index of the task to be retrieved."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return The task at the given index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Completes the task at the given index."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param index The index of the task to be completed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void complete(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskList.get(index).complete();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Adds a new task to the taskList."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task The new task to be added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 72
    }
  },
  {
    "path": "src/main/java/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents the command that is responsible for creating a TodoTask."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class ToDoCommand extends AddCommand {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a ToDOCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ToDoCommand() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Determines whether or should the Duke App should terminate."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return returns false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Executes the construction of a TodoTask."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param tasks The TaskList of the current Duke App"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param ui The Ui being used by the Duke App"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param storage The Storage unit being used by the Duke app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String input \u003d ui.getLastCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String command \u003d input.substring(5).trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        addTask(tasks, ui, storage, new ToDoTask(command));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 30
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents a TodoTask. A TodoTask does not have a time, it only has a name."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a TOdoTask with the given name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task The name to be assigned to the Task."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ToDoTask(String task) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (task.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new EmptyDescriptionDukeException(\"todo\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a TodoTask with the given name and completion state."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param isCompleted The completion state of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param task The name of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public ToDoTask(String isCompleted, String task) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        super(task, Boolean.parseBoolean(isCompleted));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (task.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            throw new EmptyDescriptionDukeException(\"todo\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Returns a string which represents this task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a String detailing the task\u0027s name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String output \u003d \"[T]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (super.completed) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"[✓]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"[✗]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        output +\u003d \" \" + super.task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * returns a string that is used to store the task in the save file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return a string specifically formatted for storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String toFileFormat() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String output \u003d \"todo | \";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        if (completed) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"true\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            output +\u003d \"false\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        output +\u003d \" | \" + super.task;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 59
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * Represents the User Interface used by the Dike App. It is responsible for reading and displaying"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " * everything to and from the user. It keeps track of only the latest user input."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String lastCommand \u003d \"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Constructs a UI object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Retrievese the latest user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return the latest user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String getLastCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return this.lastCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Reads the user input, and returns it as a string to be processed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @return the user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        this.lastCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        return lastCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Indicates when there is an error loading a savefile."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void showLoadingError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"    Error Reading File\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Displayes a message with a 4 space indentation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param msg the message to be shown to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void showMessage(String msg) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"    \" + msg);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Displayes a message after a particular number of spaces."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param numOfSpace The number of spaces that need to be displayed first before the message."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param msg The message to be displayed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void showMessage(int numOfSpace, String msg) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        for (int i \u003d 0; i \u003c numOfSpace; i++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            System.out.print(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(msg);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Displayes an error text"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * @param err the text of the error."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    void showError(String err) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"    \" + err);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Shows the welcome text."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"Type \u0027help\u0027 to view available commands\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"How may I help you?\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     * Displayes a horizontal line."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void straightLine() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        System.out.println(\"\\n--------------------------------------\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 89
    }
  },
  {
    "path": "src/test/java/DeadlineTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class DeadlineTaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_completedTask_tickText() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"[D][✗] homework (By: 12 December 2019, 6PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                new DeadlineTask(\"homework /by 12/12/2019 18:00\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_invalidInput_exception() throws Exception{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(0, new DeadlineTask(\"hello world\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(\"OOPS!!! The description /by of a deadline task cannot be empty.\",e.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_invalidDate_exception() throws Exception{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(0, new DeadlineTask(\"hello world /by :)\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(\"Sorry, Dates should be in format \u0027dd/mm/yyyy hh:mm\u0027\",e.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 30
    }
  },
  {
    "path": "src/test/java/EventTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class EventTaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_completedTask_tickText() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"[E][✗] lecture (At: 12 December 2019, 4PM)\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                new EventsTask(\"lecture /at 12/12/2019 16:00\").toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_invalidInput_exception() throws Exception{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(0, new EventsTask(\"hello world\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(\"OOPS!!! The description /at of a event task cannot be empty.\",e.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_invalidDate_exception() throws Exception{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(0, new EventsTask(\"hello world /at :)\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "            assertEquals(\"Sorry, Dates should be in format \u0027dd/mm/yyyy hh:mm\u0027\",e.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 30
    }
  },
  {
    "path": "src/test/java/ToDoTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "public class ToDoTaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    public void toString_completedTask_tickText() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "        assertEquals(\"[T][✗] watch webcast\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "                new ToDoTask(\"watch webcast\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 12
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "How may I help you?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    OOPS!!! I\u0027m sorry, but I don\u0027t know what \u0027hi\u0027 means."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    OOPS!!! The description of a todo task cannot be empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      [T][✗] sleep"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Got it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      [D][✗] homework (by: midnight)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Here are the tasks in your list:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      1.[T][✗] sleep"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      2.[D][✗] homework (by: midnight)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "      [T][✓] sleep"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    Bye! See you again soon!!"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "--------------------------------------"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 53
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "hi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "todo"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "todo sleep"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "deadline homework /by midnight"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 7
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "austinsantoso"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "austinsantoso": 21
    }
  }
]
