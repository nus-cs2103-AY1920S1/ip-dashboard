[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.1\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    archiveBaseName \u003d \"SovietComrade\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    archiveVersion \u003d \"0.2.1\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 51
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "# Soviet Comrade User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "![alt text](Ui_ss1.JPG)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Have you ever wanted a personal assistant, "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "but also wanted to roleplay in the Soviet Union? Me neither! "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "But anyway, if so, then **Soviet Comrade** is the chat bot for you!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "He stores all the chores you need to do to "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "help kick capitalism\u0027s butt! With him, "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "you can add todos, events, and deadlines,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "list all your chores, find a specific chore,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "delete current chores and he even detects if you"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "enter a duplicate chore!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "### `todo` - add todo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Simply type `todo` and the description of the task after to "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "enter a new chore to do."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "### `deadline` - add deadline"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Simply type `deadline` followed by the description of the "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "task, then \"/by\" and then the date in dd/mm/yy 24HrHHMM format "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "to record a new deadline"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "### `event` - add event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Simply type `event` followed by the description of the "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "task, then \"/at\" and then the date in dd/mm/yy 24HrHHMM format "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "to record a new deadline"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "### `done` - indicate task is done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Simply type `done` followed by the number of the task"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "that is done, to mark that task is done."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "### `delete` - delete existing chore"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Simply type `delete` followed by the number "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "of the task to delete to indicate which task to delete"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "### `find` - find existing chore"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "Simply type `find` followed by the keyword of the chore(s)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "you want to find."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 39,
      "-": 10
    }
  },
  {
    "path": "duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "T-0- henlo-"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "D-0- nyet- 22/09/2010 2010"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":init"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":end"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 84
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 1
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Deadline(String info, String type, String by) throws ParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String deadline do by date"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original print task from superclass"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return super.printTask() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 26
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // Classes used in Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private WriteFile data;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  init 3 main components, ui storage and tasklist"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then init storage: load tasks into tasklist"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then link ui and storage and tasklist"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then show welcome"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String of path where tasks text file is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String fileSeparator \u003d System.getProperty(\"file.separator\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        path \u003d \".\" +fileSeparator+\"duke.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        data \u003d new WriteFile(path,false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storage \u003d new Storage(data,path,taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ui.link(taskList,storage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String dukeInit() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String welcome \u003d ui.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        data.createFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"hi\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            storage.initStorage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(ParseException ex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(FileNotFoundException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            welcome +\u003d \" Creating a new paper for your chores.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch(IOException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return \"That sign will stop me, cos I can\u0027t read!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return welcome;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getResponse(String inputOrig) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        parser.scrubData();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (inputOrig.equals(\"vodka\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return \"You better have a bottle to give me Comrade.\" +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        \"Just look at the amount of chores I am helping you take note of!\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (inputOrig.equals(\"my name jeff\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return \"mai nam stahleen\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (inputOrig.equals(\"hey bb\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return \"Ay bb wan sum fuk\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  main run method"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  scans input and decides whether adding,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  changing, or listing tasks"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  if change then call delete/done on tasklist"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  if list then calls the ui to list tasks"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  if add then turns input string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  into task: event, deadline or to do"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  every add statement in tasklist"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  @params String that describes task"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  @return none"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  @throws DukeException if command unknown"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            parser.parse(inputOrig);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String command \u003d parser.getCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.goodBye();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"list\")) {  // list command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                // list all tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.list();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"todo\")) {   // to do command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String taskInfo \u003d parser.getNextCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task newTask \u003d taskList.addTodo(taskInfo,0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.addTask(newTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"deadline\")) { // deadline command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String actualTask \u003d parser.getNextCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String time \u003d parser.getDoByDate();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task newTask \u003d taskList.addDeadline(actualTask,time,0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.addTask(newTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"event\")) {   // event command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String actualTask \u003d parser.getNextCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String time \u003d parser.getDoByDate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task newTask \u003d taskList.addEvent(actualTask,time,0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.addTask(newTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"done\")) {   // mark done"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int taskNum \u003d parser.getTaskNum();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task doneTask \u003d taskList.done(taskNum);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.markDone(doneTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"delete\")) { // delete task"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                int taskNum \u003d parser.getTaskNum();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                Task delTask \u003d taskList.delete(taskNum);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.delTask(delTask);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else if (command.equals(\"find\")) { // turn into exception"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String keyWord \u003d parser.getNextCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return ui.find(keyWord);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return \"Comrade, what rubbish are you mumbling? The only commands \" +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        \"Soviets recognise are: find, todo, deadline, event, done and delete. \" +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        \"If not, say bye and get on with your chores, Comrade!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return ex.getMessage();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return \"Comrade, give a proper date in the format dd/mm/yy HHMM\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 114,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // TO DO fill exceptions and handle all errors"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public DukeException(String s) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 12
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Event(String info, String type, String by) throws ParseException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String by: when event actually is"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,type,by);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original print task from superclass"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  including when event is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return super.printTask() + \" (at: \" + by + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 24
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * placeholder class to avoid"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * errors with making main class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * inherit from application"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //private Duke dukeBot \u003d new Duke();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        launch();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            stage.setTitle(\"Soviet Comrade\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            //fxmlLoader.\u003cMainWindow\u003egetController().setDuke(dukeBot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 28
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Duke dukeBot \u003d new Duke();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                DialogBox.getDukeDialog(dukeBot.dukeInit(), dukeImage)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        dukeBot \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String response \u003d dukeBot.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Timer timer \u003d new Timer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            TimerTask exitGui \u003d new TimerTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                public void run() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    System.exit(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            };"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            timer.schedule(exitGui, 100);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 60
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String nextCommand \u003d \"\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String taskBy;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void parse(String input) throws DukeException{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (input.equals(\"\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"The State demands that you speak!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Scanner sc \u003d new Scanner(input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        command \u003d sc.next();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if(command.equals(\"delete\") || command.equals(\"done\")) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                throw new DukeException(\"Comrade? Which one to remove?\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            taskNum \u003d sc.nextInt();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (command.equals(\"todo\") || command.equals(\"deadline\") || command.equals(\"event\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        || command.equals(\"find\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                throw new DukeException(\"Comrade? You did not finish your sentence!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                String next \u003d sc.next();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                if (next.equals(\"/at\") || next.equals(\"/by\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                nextCommand +\u003d \" \" + next;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (command.equals(\"deadline\") || command.equals(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                if (!sc.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    throw new DukeException(\"Comrade! Give commands in the right format!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                taskBy \u003d sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public int getTaskNum() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskNum;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return nextCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getDoByDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskBy;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void scrubData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        command \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        nextCommand \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskBy \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 56
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private WriteFile txtFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    //private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Storage(WriteFile data, String path, TaskList currTasks) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  constructor for storage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  saves writefile class to write into text file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  saves path where file is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  and tasklist to write to and call methods from it"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             *  @params WriteFile, String, TaskList"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             * @returns none"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "             */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        txtFile \u003d data;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        tasks \u003d currTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void initStorage() throws IOException, ParseException, DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  reads text file from path saved"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  this is the reading method, it calls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  load task method to load the task into tasklist"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  uses filereader and buffer reader to read file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  line by line"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  handles both file not found and"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  IO exceptions."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params WriteFile, String, TaskList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @returns none"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // FileReader reads text files in the default encoding."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        FileReader fileReader \u003d new FileReader(path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(path);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // always need to wrap file reader in buffer reader"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(fileReader);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        while((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            loadTask(line);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void loadTask(String task) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   string task is a line loaded from text file"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   line is unparsed, use scanner to parse it"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   function separates task info from"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   task done, task type, and date to do task by"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   @params String task: line of un-parsed task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   @returns none"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        System.out.println(\"hi\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // converts tasks in string from storage to taskarr"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (task.equals(\"\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String[] splitTask \u003d task.split(\"-\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String type \u003d splitTask[0];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int isDone \u003d Integer.parseInt(splitTask[1]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String mainInfo \u003d splitTask[2];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // take up empty input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d splitTask[3];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            tasks.addDeadline(mainInfo,by,isDone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d splitTask[3];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            tasks.addEvent(mainInfo,by,isDone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            tasks.addTodo(mainInfo,isDone);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void saveToTextFile() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   saves all tasks in taskArr to textfile"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   as specified in tasklist"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   for each task parses to get diff parts"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   of task, info, do by and type."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   writes to main textfile one at a time."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   setappend of writefile to true only after firstline"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   since want to overwrite old file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   @params none"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   @returns none"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        txtFile.writeToFile(\"\"); // overwrite any existing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Task t: taskArr) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String mainTxt \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String type \u003d t.getType();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String status \u003d (t.getDone() ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String info \u003d t.getTaskInfo();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String by \u003d t.getByOrig();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (type \u003d\u003d \"T\") {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                mainTxt \u003d mainTxt + type + \"-\" + status + \"-\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + info + \"-\" + by;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                mainTxt \u003d mainTxt + type + \"-\" + status + \"-\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                        + info + \"-\" + by;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            txtFile.writeToFile(mainTxt);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            txtFile.setAppend(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        txtFile.setAppend(false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 114
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // all class variables private"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String taskInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected Date by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    protected String byString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task(String info, String type,String by) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  constructor, saves info of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string containing info and status of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.taskInfo \u003d info;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.taskType \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (!by.equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            this.by \u003d convertToDate(by);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.byString \u003d by;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // getters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of info of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return String task info"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskInfo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of status of task"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        // taken from partial soln tq prof"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public boolean getDone() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  getter of task type"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return tick or cross depending on isDone"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskType;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String printTask() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints task in formatted string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return formatted string"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String taskString \u003d \"[\" + getType() + \"]\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskString +\u003d \"[\" + getStatus() + \"] \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskString +\u003d getTaskInfo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskString;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (byString.equals(\"\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return by.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String getByOrig() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return byString;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // setters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void markDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  setter to mark task is done"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *   changes output of getStatus"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @returns none"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Date convertToDate(String by) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Date date1 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\").parse(by);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return date1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 92
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private HashSet\u003cString\u003e taskSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void TaskList() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return taskArr;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ToDo addTodo(String taskInfo, int isDone) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new To Do, add to tasklist"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted to do string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, you must still be hungover, \" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \"a task description cannot be empty!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (taskSet.contains(taskInfo)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, you already have this task!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ToDo newToDo \u003d new ToDo(taskInfo,\"T\",\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskSet.add(taskInfo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            newToDo.markDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newToDo);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return newToDo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Deadline addDeadline(String taskInfo, String by,int isDone) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new Deadline, add to tasklist"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted deadline string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @param String that describes task"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, you must still be hungover, \" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \"a task description cannot be empty!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (taskSet.contains(taskInfo)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, you already have this task!\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(taskInfo,\"D\",by);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            newDeadline.markDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskSet.add(taskInfo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newDeadline);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return newDeadline;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Event addEvent(String taskInfo, String by, int isDone) throws ParseException, DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  creates new event, add to tasklist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and prints formatted event string"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then total num of current tasks"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String that describes task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if taskInfo is empty"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskInfo.equals(\"\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, you must still be hungover, \" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \"a task description cannot be empty!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } else if (taskSet.contains(taskInfo)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, you already have this task!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Event newEvent \u003d new Event(taskInfo,\"E\",by);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskSet.add(taskInfo);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (isDone \u003d\u003d 1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            newEvent.markDone();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.add(newEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return newEvent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task delete(int taskNum) throws DukeException{"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, deletes task"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  based on number provided"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints confirmation and formatted task"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  as per specified within task printTask method"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints number of remaining tasks"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @param integer indicating task number to delete"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @throws DukeException if integer given \u003e than current size of array"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int currentNumOfTasks \u003d taskArr.size();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskNum \u003e currentNumOfTasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, don\u0027t flatter yourself.\" +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \" You don\u0027t have that many chores, you only have \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    + currentNumOfTasks + \" chores now.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Task doneTask \u003d taskArr.get(taskNum-1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String taskToRemove \u003d doneTask.getTaskInfo();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskSet.remove(taskToRemove);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        taskArr.remove(taskNum-1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public Task done(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  helper function, marks tasks as done"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints confirmation,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints the done task in formatted string"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  (formatted string from task itself)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return Task that is done, handed to UI for printing to GUI"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @throws DukeException if integer given \u003e than current size of array"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int currentNumOfTasks \u003d taskArr.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskNum \u003e currentNumOfTasks) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, don\u0027t flatter yourself.\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \" You don\u0027t have that many chores, you only have \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    + currentNumOfTasks + \" chores now.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Task doneTask \u003d taskArr.get(taskNum-1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (doneTask.isDone) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            throw new DukeException(\"Comrade, that task is already done!\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        doneTask.markDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return doneTask;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ArrayList\u003cTask\u003e findTasks(String keyWord) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * iterates through taskarr to find"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * tasks that have keyword inside the task description"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * uses contains method to find matching tasks"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String which is the keyword to search for"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return arraylist of tasks whose descriptions match"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Task task: taskArr) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String taskInfo \u003d task.getTaskInfo();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (taskInfo.contains(keyWord) || taskInfo.equalsIgnoreCase(keyWord)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                matchingTasks.add(task);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return matchingTasks;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 151
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    // task with nothing attached, so no frills, everything can be simply inherited"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public ToDo(String info, String type, String by) throws ParseException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  overrides original constructor"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @params String info: task information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String type: type of task"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        super(info,\"T\",\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 14
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void link(TaskList dukeTaskList, Storage dukeStorage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  links ui to tasklist and storage"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params TaskList, Storage used for duke"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        tasks \u003d dukeTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storage \u003d dukeStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints welcome message with lines to beautify"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return \"Greetings, Comrade.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String markDone(Task doneTask) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  ui function to show user message"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  when task has been marked as done"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params Task doneTask that is completed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return String"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return \"Glorious day, Comrade, you have finished another chore!:\\n\"+doneTask.printTask();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String addTask(Task task) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  ui function to show message when task has been added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  wrapped in solid lines"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  also prints current number of tasks left"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params Task task to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return(\"Da. I have recorded your new chore:\\n \" + task.printTask() + \"\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \"You have \" + tasks.getList().size() + \" chores now, Comrade.\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String delTask(Task task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  ui function to show message when task has been deleted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  wrapped in solid lines"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params Task task to be deleted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return \"Yes Comrade, I\u0027ve removed your chore: \\n\"+\" \" + task.printTask() +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \"\\nBut I hope you actually finished that chore. \\n\" +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \"You have \" + tasks.getList().size() + \" chores left, Comrade.\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String goodBye() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * say goodbye:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * saves current tasks into text file by saving over past text file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * then prints goodbye message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @returns none"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        storage.saveToTextFile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return \"Goodbye Comrade, go forth and bring glory to the Soviet Union!\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String list() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e taskArr \u003d tasks.getList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  prints all tasks from current taskList"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  each task gets one line"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  printed version of task outputs date time as"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  \"Day date Month SGT Year\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  output surrounded with solid lines"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params none"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  @return none"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        if (taskArr.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            return \"You do not have any chores, Comrade. Add some with the commands: \" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \"event, deadline and todo. Hurry and add more chores! \" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                    \"Bring glory to the Soviet Union!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String mainString \u003d \"Here are your chores, Comrade:\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (int i \u003d 0; i \u003c taskArr.size(); i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            // printInt to put number for printing"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            int printInt \u003d i + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            Task currTask \u003d taskArr.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            String numAsString \u003d printInt + \".\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            mainString +\u003d numAsString + currTask.printTask() + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return mainString;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public String find(String keyWord) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  uses task list to find tasks"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  that have the keywords as a substring"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  then prints results wrapped inside"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  2 solid lines"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params keyword to search"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String matchingString \u003d \"Here are the chores that match your description, Comrade:\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d tasks.findTasks(keyWord);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        int taskCount \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        for (Task match: matchingTasks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            matchingString \u003d matchingString + taskCount + \".\" + match.printTask() + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            taskCount++;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        return matchingString;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 112
    }
  },
  {
    "path": "src/main/java/WriteFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class WriteFile {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private String  filePath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    private boolean append_to_file \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public WriteFile(String path,boolean append_value) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        this.filePath \u003d path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        append_to_file \u003d append_value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void createFile() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            if (file.exists()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(ex.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void writeToFile( String textLine ) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  Writes specified text to file in filepath specified upon construction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  Notes: The %s between double quotes means a string of characters of any length."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  The %n means a newline."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  So we\u0027re telling the printf method to format a string of characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         *  and add a newline at the end"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @params String textLine contains text to write to file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         * @return none"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            FileWriter write \u003d new FileWriter(filePath,append_to_file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            BufferedWriter write_line \u003d new BufferedWriter(write);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.write(textLine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.newLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            write_line.close();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            System.out.println(\"No can do son.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    public void setAppend(boolean append) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        append_to_file \u003d append;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 52
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 19
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 2
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    void dummyTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        Event test \u003d new Event(\"Why\",\"E\",\"18/09/2109 1406\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testType \u003d test.getType();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"E\", testType);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2718\", testStatus);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        test.markDone();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2713\", testStatus);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String info \u003d test.getTaskInfo();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"Why\", info);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String by \u003d test.getBy();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"Wed Sep 18 14:06:00 SGT 2109\", by);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 24
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    void dummyTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        ToDo test \u003d new ToDo(\"Why\",\"T\",\"\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testType \u003d test.getType();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"T\", testType);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2718\", testStatus);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        test.markDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        testStatus \u003d test.getStatus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\\u2713\", testStatus);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String info \u003d test.getTaskInfo();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"Why\", info);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        String by \u003d test.getBy();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "        assertEquals(\"\", by);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    static void main(String[] args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SebastianLie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SebastianLie": 26
    }
  }
]
