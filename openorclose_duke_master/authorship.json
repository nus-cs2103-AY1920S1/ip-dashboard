[
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package main.java;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.parser.ParserUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.store.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.DeadlineTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.EventTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.parser.TaskParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.ToDoTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.parser.DateParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  private Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private CommandParser commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private TaskParser taskParser \u003d new TaskParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  public static void main(String[] args) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"What can I do for you?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    duke.startRepl();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  public Duke() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.addCommand(\"bye\", unused -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.exit(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.addCommand(\"list\", unused -\u003e printList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.addCommand(\"done\", ParserUtils.generateConsumerExpectingInteger(oneBasedIndex -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        findInListThenMarkAsDone(oneBasedIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I could not find item %d in your list.\\n\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            oneBasedIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        .addCommand(\"delete\", ParserUtils.generateConsumerExpectingInteger(oneBasedIndex -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            findInListThenDelete(oneBasedIndex);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            System.out"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                .printf(\"Opps! I could not delete item %d in your list as it does not exist.\\n\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                    oneBasedIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.addCommand(\"todo\", description -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.println(\"Opps! I expected a description of your todo task.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        addTaskToList(new ToDoTask(description));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.addCommand(\"event\", argumentsString -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Task task \u003d TaskParser.generateTimedTaskParser(EventTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          EventTask::new).apply(argumentsString);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (task !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        addTaskToList(task);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commandParser.addCommand(\"deadline\", argumentsString -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      Task task \u003d TaskParser.generateTimedTaskParser(DeadlineTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          DeadlineTask::new).apply(argumentsString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (task !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        addTaskToList(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    loadFromDiskToList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void startRepl() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (true) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      commandParser.parseAndExecuteCommand(scanner.nextLine().trim());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      saveListToDisk();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void loadFromDiskToList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Scanner saveFileScanner \u003d Store.retrieveDataAsScanner();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    while (saveFileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String serialized \u003d saveFileScanner.nextLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      list.add(taskParser.fromSerial(serialized));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void saveListToDisk() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Store.saveDataIntoFile(list.stream().map(Task::serialise).collect(Collectors.joining(\"\\n\")));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "  private void findInListThenMarkAsDone(int oneBasedIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    int itemIndex \u003d oneBasedIndex - 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Task item \u003d list.get(itemIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    item.markAsDone();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(item);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void addTaskToList(Task task) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    list.add(task);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(\"Got it. I\u0027ve added this task: \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void findInListThenDelete(int oneBasedIndex) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int itemIndex \u003d oneBasedIndex - 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Task taskToDelete \u003d list.remove(itemIndex);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(\"Noted. I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.println(taskToDelete);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    printNumberOfItemsInList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void printNumberOfItemsInList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    System.out.printf(\"Now you have %d task(s) in the list.\\n\", list.size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  private void printList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    int length \u003d list.size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Yay! You don\u0027t have any tasks!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else if (length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"You have one task in your list:\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"1. \" + list.get(0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      for (int itemIndex \u003d 0; itemIndex \u003c length; itemIndex +\u003d 1) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        int oneBasedIndex \u003d itemIndex + 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"%d. %s\\n\", oneBasedIndex, list.get(itemIndex));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 108,
      "-": 40
    }
  },
  {
    "path": "src/main/java/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Parser\u003cVoid\u003e parser \u003d new Parser\u003c\u003e();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void addCommand(String command, Consumer\u003cString\u003e evaluator) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addSubParser(command, string -\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      evaluator.accept(string);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void parseAndExecuteCommand(String userInput) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.parse(userInput);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 18
    }
  },
  {
    "path": "src/main/java/parser/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final DateTimeFormatter FORMAT \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      DateTimeFormatter.ofPattern(\"dd/MM/uuuu HHmm\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          .withResolverStyle("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              ResolverStyle.STRICT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          );"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static LocalDateTime stringToDate(String dateString) throws DateTimeParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return LocalDateTime.parse(dateString, DateParser.FORMAT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static String dateToString(LocalDateTime date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return date.format(DateParser.FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 23
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private HashMap\u003cString, Function\u003cString, T\u003e\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void addSubParser(String name, Function\u003cString, T\u003e evaluator) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    commands.put(name, evaluator);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public T parse(String userInput) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String trimmedInput \u003d userInput.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    String command \u003d trimmedInput.split(\" \")[0];"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    if (commands.containsKey(command)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return commands.get(command).apply(trimmedInput.substring(command.length()).trim());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          .printf(\"Opps! I did not understand what you meant by \u0027%s\u0027\\n\", trimmedInput);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 27
    }
  },
  {
    "path": "src/main/java/parser/ParserUtils.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiConsumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ParserUtils {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Consumer\u003cString\u003e generateConsumerExpectingInteger(Consumer\u003cInteger\u003e consumer) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return integerString -\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        consumer.accept(Integer.parseInt(integerString));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .println(\"Opps! I expected an integer as the argument\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static \u003cR\u003e Function\u003cString, R\u003e generateFunctionSplittingAtFirstSpace("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiFunction\u003cString, String, R\u003e biFunction) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return spaceSeparatedString -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String[] arguments \u003d spaceSeparatedString.split(\" \", 2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return biFunction.apply(arguments[0], arguments[1]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Consumer\u003cString\u003e generateConsumerToParseTwoArguments(String splitAt,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiConsumer\u003cString, String\u003e consumer) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return argumentString -\u003e generateFunctionToParseTwoArguments(splitAt, (left, right) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      consumer.accept(left, right);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }).apply(argumentString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static \u003cR\u003e Function\u003cString, R\u003e generateFunctionToParseTwoArguments(String splitAt,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BiFunction\u003cString, String, R\u003e biFunction) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return argumentString -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (!argumentString.contains(splitAt)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I expected two arguments separated by \u0027%s\u0027.\\n\", splitAt);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      argumentString +\u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      String[] arguments \u003d argumentString.split(splitAt);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      int length \u003d arguments.length;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      if (length \u003e 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String first \u003d arguments[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String last \u003d arguments[length - 1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String allButFirst \u003d argumentString.substring(first.length() + splitAt.length());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String allButLast \u003d argumentString"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            .substring(0, argumentString.length() - last.length() - splitAt.length());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.printf(\"Opps! I see %d \u0027%s\u0027s, and cannot be sure what you wanted. \\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"For example, you could mean:\\n\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t%s\\n\\t%s\\n\\t%s\\n\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t---OR---\\n\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"\\t%s\\n\\t%s\\n\\t%s\\n\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "openorclose"
        },
        "content": "                + \"Do not use \u0027%s\u0027 in your arguments to avoid this issue.\\n\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            length - 1, splitAt, first.trim(), splitAt, allButFirst.trim(), allButLast.trim(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            splitAt,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            last.trim(), splitAt);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String left \u003d arguments[0].trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        String right \u003d arguments[1].trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        if (\"\".equals(left + right)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          System.out.printf("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the left and right of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else if (left.equals(\"\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          System.out.printf("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the left of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else if (right.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          System.out.printf("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              \"Opps! I could not find anything to the right of \u0027%s\u0027.\\n\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "openorclose"
        },
        "content": "              splitAt);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          return biFunction.apply(left, right);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 84
    }
  },
  {
    "path": "src/main/java/parser/TaskParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.DeadlineTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.EventTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.task.ToDoTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class TaskParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private Parser\u003cTask\u003e parser \u003d new Parser\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public TaskParser() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addTaskSubParser(ToDoTask.TO_DO_SYMBOL, ToDoTask::new);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addTaskSubParser(EventTask.EVENT_TASK_SYMBOL,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        TaskParser.generateTimedTaskParser(EventTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            EventTask::new"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    addTaskSubParser(DeadlineTask.DEADLINE_TASK_SYMBOL,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        TaskParser.generateTimedTaskParser(DeadlineTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            DeadlineTask::new));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private void addTaskSubParser(char type, Function\u003cString, Task\u003e creator) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    Function\u003cString, Task\u003e isDoneIntermediateParser \u003d ParserUtils"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        .generateFunctionSplittingAtFirstSpace((isDoneString, rest) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          boolean isDone \u003d Boolean.parseBoolean(isDoneString);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          Task task \u003d creator.apply(rest);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          if (isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "openorclose"
        },
        "content": "          return task;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    parser.addSubParser(String.valueOf(type), isDoneIntermediateParser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public Task fromSerial(String serial) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return parser.parse(serial);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Function\u003cString, Task\u003e generateTimedTaskParser(String separator, BiFunction\u003cString, LocalDateTime, Task\u003e timedTaskConstructor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return ParserUtils.generateFunctionToParseTwoArguments(separator, (description, dateString) -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return timedTaskConstructor.apply(description, DateParser.stringToDate(dateString));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        System.out.println(\"Opps! I expected a date in the format: DD/MM/YYYY HHmm\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "openorclose"
        },
        "content": "            + \"\\n\\t(e.g. 31/01/2019 2359)\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 55
    }
  },
  {
    "path": "src/main/java/store/Store.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.store;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private static final String SAVE_FILE_PATH \u003d \"data.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static Scanner retrieveDataAsScanner() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return new Scanner(new File(Store.SAVE_FILE_PATH));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      saveDataIntoFile(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      return retrieveDataAsScanner();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static void saveDataIntoFile(String data) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(Store.SAVE_FILE_PATH));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      bufferedWriter.write(data);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      bufferedWriter.flush();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "      System.out.println(\"Opps! Unable to save to file.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 32
    }
  },
  {
    "path": "src/main/java/task/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class DeadlineTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final char DEADLINE_TASK_SYMBOL \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final String ARGUMENTS_SEPARATOR \u003d \"/by\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private LocalDateTime by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public DeadlineTask(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.by \u003d by;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        .format(\"[%c]%s (:by %s)\", DeadlineTask.DEADLINE_TASK_SYMBOL, super.toString(), DateParser.dateToString(by));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String serialise() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        \"%c %s %s %s\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DeadlineTask.DEADLINE_TASK_SYMBOL,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super.serialise(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DeadlineTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DateParser.dateToString(by)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 32
    }
  },
  {
    "path": "src/main/java/task/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": "import main.java.parser.DateParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class EventTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  private LocalDateTime at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final char EVENT_TASK_SYMBOL \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final String ARGUMENTS_SEPARATOR \u003d \"/at\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public EventTask(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    this.at \u003d at;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"[%c]%s (:at %s)\", EventTask.EVENT_TASK_SYMBOL, super.toString(), DateParser.dateToString(at));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String serialise() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        \"%c %s %s %s\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        EventTask.EVENT_TASK_SYMBOL,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        super.serialise(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        EventTask.ARGUMENTS_SEPARATOR,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "openorclose"
        },
        "content": "        DateParser.dateToString(at)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 31
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  private static char DONE_SYMBOL \u003d \u0027\\u2713\u0027; // tick"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  private static char NOT_DONE_SYMBOL \u003d \u0027\\u2718\u0027; //cross"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  private boolean isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  Task(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    this.description \u003d description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public void markAsDone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    this.isDone \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    return String.format(\"[%c] %s\", getStatusIcon(), description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String serialise() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"%b %s\", isDone, description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  private char getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    return isDone ? DONE_SYMBOL : NOT_DONE_SYMBOL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/task/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "openorclose"
        },
        "content": "package main.java.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "openorclose"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public static final char TO_DO_SYMBOL \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public ToDoTask(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"[%c]%s\", ToDoTask.TO_DO_SYMBOL, super.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "openorclose"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  public String serialise() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "openorclose"
        },
        "content": "    return String.format(\"%c %s\", ToDoTask.TO_DO_SYMBOL, super.serialise());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "openorclose"
        },
        "content": "  }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "openorclose"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "openorclose": 19
    }
  }
]
