[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "version \u00270.2.1\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveVersion \u003d \"0.2.1\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 36,
      "-": 13
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Text-based personal assistant with CLI input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "![Duke UI](https://raw.githubusercontent.com/gabrielchao/duke/master/docs/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Duke is a text-based personal assistant that helps you keep track of tasks. Supported task types include:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. Todos"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. Deadlines"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "3. Events"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Duke provides commands to manage your tasks. You can:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* List tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Find tasks by keyword"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Add tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Mark tasks as done"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Delete tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "* Undo the last change"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Duke uses a GUI to display output in a more intuitive way than purely CLI-based programs, while its CLI-based input allows power users to work faster with Duke than with purely GUI-based personal assistants."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "To interact with Duke, enter a command into the text box at the bottom, then press \u0027Enter\u0027 or click the \u0027Send\u0027 button. Documentation for each command is given below."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `list` - Lists all tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Displays all tasks in a numbered list. Each task\u0027s index number can be used to identify it for other commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "````"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "##### If there are tasks in the list:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. [E][✗] Start of Week 7 (at: 30 of September 2019)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. [D][✓] Finalise iP (by: This week)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "##### If there are no tasks in the list:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "No tasks yet."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `find` - Finds and displays a task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Finds the tasks containing the specified text and displays them. The search is not case-sensitive. Each task is listed with its original index number as displayed by `list`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "find iP"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "find september"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example outcome:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "2. [D][✓] Finalise iP (by: This week)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "1. [E][✗] Start of Week 7 (at: 30 of September 2019)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `todo` - Adds a todo"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Add a todo to the list. A todo only has a description."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "todo Read a book"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [T][✗] Read a book"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `deadline` - Adds a deadline"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Add a deadline to the list. A deadline has a description and a due date."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deadline Submit code /by 27/09/19"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deadline Submit code /by 27/09/2019 1430"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "deadline Submit code /by End of the week"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [D][✗] Submit code (by: 27 of September 2019)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [D][✗] Submit code (by: 27 of September 2019 2:30PM)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [D][✗] Submit code (by: End of the week)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `event` - Adds an event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Add an event to the list. An event has a description and a date."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "event Movie night /at 01/10/19"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "event Movie night /at 01/10/2019 2115"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "event Movie night /at Next Tuesday"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [E][✗] Movie night (at: 1 of October 2019)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [E][✗] Movie night (at: 1 of October 2019 9:15PM)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "added: [E][✗] Movie night (at: Next Tuesday)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `done` - Marks a task as done"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Marks a specified task as done. Tasks are specified by their index number as displayed by `list` or `find`. Done tasks will remain in the list until removed by `delete`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "[D][✓] Submit code (by: 27 of September 2019)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `delete` - Deletes a task"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Deletes a specified task. Tasks are specified by their index number as displayed by `list` or `find`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    [D][✓] Submit code (by: 27 of September 2019)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `undo` - Reverts the last change"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Reverts the last change. Commands such as `list` or `find` are not considered changes. Cannot `undo` twice in a row."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "undo"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Okay, I\u0027ve undone the last \u0027delete\u0027 command."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "### `bye` - Quits Duke"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Quits Duke and closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Example usage:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "bye"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "#### Expected outcome:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "Bye! Hope to see you again soon!"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 181,
      "-": 12
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.BufferedStringOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.PreParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Main logic class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./data/tasks.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final String LOADING_ERROR_MESSAGE \u003d \"Couldn\u0027t load tasks from disk.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"\\nYour changes this session may not be saved!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final String COMMAND_ERROR_MESSAGE \u003d \"I couldn\u0027t understand my list of commands! \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"\\nI won\u0027t be very helpful this session :(\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            + \"\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private PreParser preParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private BufferedStringOutput bufferedUiOutput \u003d new BufferedStringOutput();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private BufferedStringOutput startupMessages \u003d new BufferedStringOutput();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a Duke object with the data file residing in the default path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        startupMessages.say(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            preParser \u003d new PreParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            startupMessages.oops(COMMAND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        storage \u003d new Storage(DEFAULT_FILEPATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks \u003d storage.load();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            startupMessages.oops(LOADING_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model \u003d new Model(tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Generates the result of Duke\u0027s action on user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult getResult(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d preParser.parse(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command.execute(model, bufferedUiOutput, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (command.isExit()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                onExit();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                storage.save(model.copyOfCurrentTasks());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Unable to save"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                System.err.println(\"Unable to save.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            bufferedUiOutput.oops(e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new CommandResult(bufferedUiOutput.nextResponse(), command \u003d\u003d null ? false : command.isExit());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getStartupMessages() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return startupMessages.nextResponse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void onExit() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Shutdown preparations here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 85,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * General exception for Duke-related issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeException(Throwable cause) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 18
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.controller.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        System.out.println(\"Main is closing.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 39
    }
  },
  {
    "path": "src/main/java/duke/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * The main data of the current Duke instance. In addition to storing the current TaskList, history data is stored"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * to make undo functionality possible. Data access is controlled to keep track of changes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private TaskList previousTasks \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Command previousCommand \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a new Model with the specified TaskList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param tasks  the TaskList to initialize this Model with"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Model(TaskList tasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the current \u003ccode\u003eTaskList\u003c/code\u003e. Changes to the copy will not affect the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * TaskList stored in this Model. Mutation of the data in this Model must be performed by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * calling {@link #update(Command, TaskList)}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  a deep copy of the current TaskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the current TaskList cannot be copied"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList copyOfCurrentTasks() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return Storage.deepCopy(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Couldn\u0027t copy TaskList!\", e);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Updates the Model with the specified TaskList. The old TaskList is stored along with the calling"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Command object as history metadata. {@link #undo()} is able to reverse the latest call to this method."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param updatingCommand  the Command requesting this update"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param tasks  the TaskList to set as current"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void update(Command updatingCommand, TaskList tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.previousTasks \u003d this.tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.previousCommand \u003d updatingCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Reverses the changes caused by the last call to {@link #update(Command, TaskList)}. Cannot undo further than"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the very previous \u003ccode\u003eupdate\u003c/code\u003e."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the Command that was undone"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IllegalStateException  if there is no more history left to undo"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command undo() throws IllegalStateException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new IllegalStateException(\"No more undo history!\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks \u003d previousTasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        previousTasks \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Command retCommand \u003d previousCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        previousCommand \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return retCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If there a previous \u003ccode\u003eTaskList\u003c/code\u003e stored in the history"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * (i.e. if an {@link #undo()} is currently possible)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  true if there is a previous TaskList in the history"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return previousTasks !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a string representation of this Model."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  a string representation of this Model"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"current tasks: \" + tasks.toString()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                + \"previous tasks\" + previousTasks.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 93
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This class provides all file input/output functionality needed for persistent storage of Duke tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Path path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a Storage using the specified path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param filepath  String containing the path of the file to read and write"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.path \u003d Paths.get(filepath).toAbsolutePath().normalize();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the TaskList loaded from disk. The file on disk must have been written by {@link #save(TaskList)}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * using the current versions of the TaskList and Task classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                         the TaskList loaded from the file data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IOException             if there is an I/O exception. This could occur when the file does not exist or"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                                 exists but cannot be accessed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws ClassNotFoundException  if the data in the file does not match the current TaskList and Task class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                                 definitions. This could mean that the file does not contain valid Duke data or"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                                 was saved by an earlier incompatible version of Duke."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList load() throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new IOException(\"File does not exist.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(path.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(fis);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList taskList \u003d (TaskList) ois.readObject();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ois.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Saves the specified TaskList to disk. The TaskList is serialised using an {@link ObjectOutputStream}. Any"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * non-existent directories specified in the filepath are created. Overwrites the file at the path if it exists."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param taskList      the TaskList to save to disk. It must be {@link Serializable}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IOException  if there is an I/O exception. This could mean that the directories cannot be created or the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                      file cannot be accessed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void save(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (path.getParent() !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(path.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(fos);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.writeObject(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a deep copy of the specified object. The copy is performed by serializing the target object with a stream"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * and then deserializing it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param serializable  the object to copy"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param \u003cT\u003e  class that implements Serializable"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the copied object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws IOException  if an I/O error occurs while writing stream header"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws ClassNotFoundException  if the class of the object cannot be found"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static \u003cT extends Serializable\u003e T deepCopy(T serializable) throws IOException, ClassNotFoundException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectOutputStream oos \u003d new ObjectOutputStream(baos);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oos.writeObject(serializable);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ByteArrayInputStream bais \u003d new ByteArrayInputStream(baos.toByteArray());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObjectInputStream ois \u003d new ObjectInputStream(bais);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return (T) ois.readObject();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 90
    }
  },
  {
    "path": "src/main/java/duke/command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, outputs a goodbye message and signals the app to exit."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ByeCommand(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"bye\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        uiOutput.say(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.ArgumentParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This class provides the skeleton for a Duke Command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * To implement a Command, the programmer only needs to extend this class and provide an implementation for"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * the {@link #getName()} and {@link #execute(Model, UiOutput, Storage)} methods."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected ArgumentParser argumentParser \u003d new ArgumentParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String[] args;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.args \u003d args;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns {@code true} if this Command is a ByeCommand."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  {@code true} if this Command is a ByeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return (this instanceof ByeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the name of this Command. The name can be used when parsing to identify"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the Command type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the name of this Command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public abstract String getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Executes this Command with the given resources."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param model    data model to read and manipulate"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param uiOutput       the user interface to input and output from and to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param storage  the persistent storage to save and load to and from"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if an error occurs during execution"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public abstract void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 48
    }
  },
  {
    "path": "src/main/java/duke/command/CommandMap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Map between Command names and Command classes. Can be used during parsing to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * instantiate Commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CommandMap {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Map\u003cString, Class\u003c? extends Command\u003e\u003e commands \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs an empty CommandMap."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandMap() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Empty constructor"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a CommandMap with the specified Command {@link Class} objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param commandList  list of Command Class objects to insert into this CommandMap"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if a Command cannot be {@link #register(Class)}ed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandMap(List\u003cClass\u003c? extends Command\u003e\u003e commandList) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (Class\u003c? extends Command\u003e cls : commandList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.register(cls);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Inserts the specified Command type into this \u003ccode\u003eCommandMap\u003c/code\u003e. The values returned by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link Command#getName()} and {@link Command#getClass()} are used as the key and value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * of the entry respectively."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The \u003ccode\u003eCommand\u003c/code\u003e may be instantiated with dummy arguments. The dummy \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * is not stored and can be safely discarded afterward."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param command  the Command to insert"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(Command command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commands.put(command.getName(), command.getClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Inserts the specified Command type into this \u003ccode\u003eCommandMap\u003c/code\u003e. The value of {@link Command#getName()}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * is used as the key of the entry while the specified \u003ccode\u003ecommandClass\u003c/code\u003e is used as the value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Because Java does not support abstract static methods, the only way to access the abstract method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003ccode\u003egetName\u003c/code\u003e is to instantiate an object of the class, which this method accomplishes via reflection,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * passing the {@link Command#Command(String[])} constructor a dummy argument."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param commandClass  the Command Class to insert"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the dummy Command cannot be instantiated"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(Class\u003c? extends Command\u003e commandClass) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            command \u003d commandClass.getConstructor(String[].class).newInstance(new Object[]{new String[]{}});"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            // This should never happen"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commands.put(command.getName(), commandClass);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the \u003ccode\u003eCommand\u003c/code\u003e \u003ccode\u003eClass\u003c/code\u003e corresponding to the specified \u003ccode\u003eCommand\u003c/code\u003e name,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * or \u003ccode\u003enull\u003c/code\u003e if this CommandMap contains no mapping for the name."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param name  the Command name whose associated Command is to be returned"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the Command Class to which the name is mapped, or \u003ccode\u003enull\u003c/code\u003e if this CommandMap contains no"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *          mapping for the key"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Class\u003c? extends Command\u003e get(String name) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return commands.get(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 83
    }
  },
  {
    "path": "src/main/java/duke/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public CommandResult(String response, boolean isExit) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.isExit \u003d isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 19
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, adds a new deadline to the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DeadlineCommand(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        argumentParser.register(\"/by\", true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"deadline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d argumentParser.parse(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] byArgs \u003d switchArgs.get(\"/by\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (byArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The date of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Deadline d \u003d new Deadline(ArgumentParser.concatenate(comArgs), ArgumentParser.concatenate(byArgs));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(d);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model.update(this, tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        uiOutput.say(\"added: \" + d);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 48
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, removes the specified task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DeleteCommand(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d argumentParser.parse(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be deleted must be an integer.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            task \u003d tasks.delete(oneIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model.update(this, tasks);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        uiOutput.say(String.format(\"Noted. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d task%s in the list.\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                task.toString(), tasks.size(), tasks.size() \u003d\u003d 1 ? \"\" : \"s\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 54
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, marks a specified task as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DoneCommand(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"done\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d argumentParser.parse(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"An index must be specified.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int oneIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            oneIndex \u003d Integer.parseInt(comArgs[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The index to be marked must be an integer.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            tasks.markDone(oneIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"There is no task with index \" + oneIndex + \".\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model.update(this, tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        uiOutput.say(\"Nice! I\u0027ve marked this task as done:\\n\" + tasks.get(oneIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 50
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, adds a new event to the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public EventCommand(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        argumentParser.register(\"/at\", true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"event\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d argumentParser.parse(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] atArgs \u003d switchArgs.get(\"/at\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (atArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The date of an event cannot be empty.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Event e \u003d new Event(ArgumentParser.concatenate(comArgs), ArgumentParser.concatenate(atArgs));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model.update(this, tasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        uiOutput.say(\"added: \" + e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 49
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Finds tasks that contain a given keyword."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public FindCommand(String[] args) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d argumentParser.parse(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The search keyword cannot be blank.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e foundTaskIndices \u003d tasks.findKeywordOneIndices(comArgs[0], false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (foundTaskIndices.size() \u003e 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            for (int i \u003d 0; i \u003c foundTaskIndices.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                int oneIndex \u003d foundTaskIndices.get(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(oneIndex)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                        .append(tasks.get(oneIndex).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if (i !\u003d foundTaskIndices.size() - 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    sb.append(\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            uiOutput.say(\"Here are the matching tasks in your list:\\n\" + sb.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            uiOutput.say(\"There are no matching tasks in your list.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 52
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, lists tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ListCommand(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            uiOutput.say(tasks.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            uiOutput.say(\"No tasks yet.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 31
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, adds a new todo to the \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TodoCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TodoCommand(String[] args) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"todo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d argumentParser.parse(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] comArgs \u003d switchArgs.get(getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assert comArgs !\u003d null : \"comArgs cannot be null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (comArgs.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo t \u003d new Todo(ArgumentParser.concatenate(comArgs));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        TaskList tasks \u003d model.copyOfCurrentTasks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        model.update(this, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        uiOutput.say(\"added: \" + t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 42
    }
  },
  {
    "path": "src/main/java/duke/command/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.io.UiOutput;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * When executed, undos the last Model mutation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public UndoCommand(String[] args) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return \"undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void execute(Model model, UiOutput uiOutput, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Command undoneCommand \u003d model.undo();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            uiOutput.say(\"Okay, I\u0027ve undone the last \u0027\" + undoneCommand.getName() + \"\u0027 command.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IllegalStateException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            uiOutput.oops(\"I don\u0027t have anything to undo!\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 29
    }
  },
  {
    "path": "src/main/java/duke/controller/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        displayPicture.setClip(new Circle(50, 50,50));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        dialog.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        dialog.setAlignment(Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 66
    }
  },
  {
    "path": "src/main/java/duke/controller/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getStartupMessages(), dukeImage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        CommandResult result \u003d duke.getResult(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String response \u003d result.getResponse();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (result.isExit()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            onExit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private void onExit() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        userInput.setDisable(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Thread thread \u003d new Thread(() -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Thread.sleep(1000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        thread.start();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 74
    }
  },
  {
    "path": "src/main/java/duke/io/BufferedStringOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * A variable-length buffer for UI output strings."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * \u003cp\u003eInstances of \u003ccode\u003eBufferedStringOutput\u003c/code\u003e are not safe for use by multiple threads."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class BufferedStringOutput implements UiOutput {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String OOPS_PREFIX \u003d \"\\u2639 OOPS!!! \"; // ☹"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void say(String text) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        sb.append(text).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void oops(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        sb.append(OOPS_PREFIX).append(text).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a concatenated string consisting of all strings written to this \u003ccode\u003eBufferedStringOutput\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * since the previous call to \u003ccode\u003enextResponse\u003c/code\u003e. Each output string is separated by a newline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003eThe buffer is cleared after this method is called."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  string concatenated from all strings in this buffer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String nextResponse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String response \u003d sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 34
    }
  },
  {
    "path": "src/main/java/duke/io/ConsoleUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This class provides all the input/output functionality needed to interact with the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * It is a thin wrapper over an {@link InputStream} and a {@link PrintStream}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ConsoleUi implements UiInput, UiOutput {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String HORIZONTAL_LINE \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final String OOPS_PREFIX \u003d \"\\u2639 OOPS!!! \"; // ☹"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private InputStream in;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private PrintStream out;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a ConsoleUi using the default {@link System#in} and {@link System#out}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ConsoleUi() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a ConsoleUi using the specified streams."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param inputStream  the stream to receive user input from"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param printStream  the stream to print user output to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public ConsoleUi(InputStream inputStream, PrintStream printStream) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.in \u003d inputStream;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            // Set UTF-8 encoding to print characters like ✓ and ☹"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Charset utf8Charset \u003d Charset.forName(\"UTF-8\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            PrintStream out \u003d new PrintStream(printStream, true, utf8Charset.name());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.out \u003d out;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            this.out \u003d printStream;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        scanner \u003d new Scanner(this.in);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the next line of user input."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the String that was read"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prints a String in a stylised ASCII text box."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param text  the String to be printed"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void say(String text) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(text);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(HORIZONTAL_LINE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        out.println(\"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prepends an exclamatory phrase to a String and prints it in a stylised ASCII text box."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The result is the same as calling {@link #say} with the argument \u003ccode\u003e\"☹ OOPS!!!\" + text\u003c/code\u003e."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param text  the String to be printed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void oops(String text) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(OOPS_PREFIX + text);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prints an error message about the failure to load tasks from disk."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        oops(\"Couldn\u0027t load tasks from disk.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Prints a message welcoming the user to Duke."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        say(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 92
    }
  },
  {
    "path": "src/main/java/duke/io/UiInput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public interface UiInput {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    String readCommand();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 5
    }
  },
  {
    "path": "src/main/java/duke/io/UiOutput.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.io;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public interface UiOutput {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void say(String text);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    void oops(String text);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 7
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Deadline task consisting of a description and a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The deadline this task must be completed by."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * DukeDate allows the user to input custom date strings such as \u0027the day after tomorrow\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected DukeDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Deadline(String desc, String dateString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.date \u003d DukeDate.parse(dateString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), description, date.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.util.DukeDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Task consisting of a description and a date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The date of this event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * DukeDate allows the user to input custom date strings such as \u0027the day after tomorrow\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected DukeDate date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Event(String desc, String dateString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.date \u003d DukeDate.parse(dateString);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), description, date.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 24
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * This class provides the skeleton for a Duke Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * To implement this class, the programmer only needs to extend this class and provide an implementation for"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * the {@link #toString()} method."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task(String d) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        description \u003d d;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a short String representing the status of the Task (e.g. whether it is done or undone)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * It should be as short as possible, ideally a single code point, to facilitate display in a list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  String representing the status of the Task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return isDone ? \"\\u2713\" : \"\\u2717\"; // ✓ or ✗"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the description of the Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the Task description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Marks this Task as done."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the task is already done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone() throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Task is already done!\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 53
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Represents a list of Tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TaskList implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // No-argument constructor for Serializable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a TaskList with a shallow copy of the given List of Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param tasks  the List of Tasks this TaskList should contain"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Appends the specified Task to the end of this TaskList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param t  the Task to be appended to this TaskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void add(Task t) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Marks the Task at the specified index as done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The index is one-based and is as given by the {@link #toString()} method."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param oneIndex  one-based index of the Task to mark"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if there is no Task with the specified index or if the Task is already done"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone(int oneIndex) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        tasks.get(oneIndex - 1).markDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Removes the Task at the specified index from the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The index is one-based and is as given by the {@link #toString()} method."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param oneIndex  one-based index of the Task to remove"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the removed Task"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task delete(int oneIndex) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.remove(oneIndex - 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the Task at the specified index."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The index is one-based and is as given by the {@link #toString()} method."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param oneIndex  one-based index of the Task to return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the Task with the specified index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Task get(int oneIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.get(oneIndex - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns the number of Tasks in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  the number of Tasks in this list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a list of one-based indices of the Tasks in this list matching the specified keyword."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Searches the String returned by each Task\u0027s {@link Task#toString()} method."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The search can be either case-sensitive or non-case-sensitive."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param keyword          String to search for"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param isCaseSensitive  true if the search is to be case-sensitive, false if not"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  list of one-based indices of the Tasks matching the keyword"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List\u003cInteger\u003e findKeywordOneIndices(String keyword, boolean isCaseSensitive) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!isCaseSensitive) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        List\u003cInteger\u003e foundTaskIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            String taskString \u003d tasks.get(i).toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (!isCaseSensitive) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                taskString \u003d taskString.toLowerCase();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (taskString.contains(keyword)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                foundTaskIndices.add(i + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return foundTaskIndices;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a list of Tasks in this list matching the specified keyword."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Searches the String returned by each Task\u0027s {@link Task#toString()} method."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * The search can be either case-sensitive or non-case-sensitive."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param keyword          String to search for"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param isCaseSensitive  true if the search is to be case-sensitive, false if not"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  list Tasks matching the keyword"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public List\u003cTask\u003e findKeywordTasks(String keyword, boolean isCaseSensitive) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return findKeywordOneIndices(keyword, isCaseSensitive)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .map(oneIndex -\u003e get(oneIndex))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a human-readable string representation of this list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Tasks are prefixed with a one-based index."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Each Task is followed by a newline character."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  a String representing this list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(String.format(\"%d. %s\\n\", (i + 1), tasks.get(i).toString()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 138
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Task consisting of a description only."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Todo(String d) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return String.format(\"[T][%s] %s\", getStatusIcon(), getDescription());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 15
    }
  },
  {
    "path": "src/main/java/duke/util/ArgumentParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Parser for {@link duke.command.Command} argument lists. It can convert an entire raw argument list into a multimap"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * between switch names and switch argument lists. Both required and optional switches are supported."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class ArgumentParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e requiredSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    protected Set\u003cString\u003e optionalSwitches \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Registers the specified String as a switch while specifying if it is required or optional."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Commands missing required switches will cause an exception upon parsing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param name        the String that uniquely identifies this switch"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param isRequired  boolean specifying if the switch is required"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void register(String name, boolean isRequired) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (isRequired) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            requiredSwitches.add(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            optionalSwitches.add(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Parses the argument list into a multimap between switch names and switch argument lists. The command name is"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * taken as the first key of the multimap. Switches must have been registered using"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link #register(String, boolean)} before parsing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param args            the command argument list as a String[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                a map with switch names as keys and switch argument lists as values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if there are repeated switches or if required switches are missing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Map\u003cString, String[]\u003e parse(String[] args) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e requiredSwitchesRemaining \u003d new TreeSet\u003c\u003e(requiredSwitches);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Set\u003cString\u003e optionalSwitchesRemaining \u003d new TreeSet\u003c\u003e(optionalSwitches);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Map\u003cString, String[]\u003e switchArgs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        int switchStartIndex \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d 1; i \u003c args.length; i++) { // command name is an implied switch"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            boolean isSwitch \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (requiredSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if (!requiredSwitchesRemaining.remove(args[i])) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } else if (optionalSwitches.contains(args[i])) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                if (!optionalSwitchesRemaining.remove(args[i])) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Repeated switch \" + args[i]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                isSwitch \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (isSwitch) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    // This allows for switches with no arguments"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex + 1, i));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                } catch (IllegalArgumentException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    throw new DukeException(\"Bad arguments for switch \" + args[switchStartIndex]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                switchStartIndex \u003d i;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        // Add last switch"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        switchArgs.put(args[switchStartIndex], Arrays.copyOfRange(args, switchStartIndex + 1, args.length));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (!requiredSwitchesRemaining.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            for (String s : requiredSwitchesRemaining) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(requiredSwitchesRemaining.size() \u003d\u003d 1 ? \"is a required switch\" : \"are required switches\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(sb.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return switchArgs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String formed by concatenating each String in the specified array in sequence while inserting a space"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * (\u003ccode\u003e\" \"\u003c/code\u003e) between each."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param strings  the String[] to concatenate"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return         the concatenated String"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return concatenate(strings, 0, strings.length);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String formed by concatenating the Strings in the array within the specified range in sequence while"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * inserting a space (\u003ccode\u003e\" \"\u003c/code\u003e) between each."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param strings    the String[] containing the range to concatenate"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param fromIndex  the start index, inclusive"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param toIndex    the end index, exclusive"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return           the concatenated String"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String concatenate(String[] strings, int fromIndex, int toIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assert fromIndex \u003c\u003d toIndex : \"fromIndex cannot be greater than toIndex\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (int i \u003d fromIndex; i \u003c toIndex; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            sb.append(strings[i]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            if (i !\u003d toIndex - 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                sb.append(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 118
    }
  },
  {
    "path": "src/main/java/duke/util/DateParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Utility class with various date and datetime parsing methods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e dateFormatters \u003d List.of("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ISO_DATE,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/YYYY\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ofPattern(\"d/M/YYYY\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static List\u003cDateTimeFormatter\u003e dateTimeFormatters \u003d List.of("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ISO_DATE_TIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .appendPattern(\"dd/MM/yyyy HHmm\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .toFormatter(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .appendPattern(\"d/M/yyyy HHmm\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                    .toFormatter()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a LocalDate parsed from the specified String. Attempts to use several default {@link DateTimeFormatter}s"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * to parse the String. An exception is thrown if the input is not in a recognised format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If the input contains both a date and a time, {@link #parseDateTime(String)} should be used instead."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param input           the String to be parsed. It must contain only a date and be in a recognised format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                the LocalDate parsed from the input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the String cannot be parsed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static LocalDate parseDate(String input) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (DateTimeFormatter formatter : dateFormatters) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                date \u003d LocalDate.parse(input, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Format not applicable"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse input as date\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a LocalDateTime parsed from the specified String. Attempts to use several default"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link DateTimeFormatter}s to parse the String. An exception is thrown if the input is not in a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * recognised format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * If the input contains only a date but not a time, {@link #parseDate(String)} should be used instead."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param input           the String to be parsed. It must contain both a date and a time"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                        and be in a recognised format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                the LocalDateTime parsed from the input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the String cannot be parsed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static LocalDateTime parseDateTime(String input) throws DukeException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        LocalDateTime dateTime \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        for (DateTimeFormatter formatter : dateTimeFormatters) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                dateTime \u003d LocalDateTime.parse(input, formatter);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Format not applicable"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse input as date\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a String representing a verbosely formatted version of the specified date or datetime String. It first"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * attempts to parse the input as a {@link LocalDate}. If that fails, it tries to parse it as a"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * {@link LocalDateTime}. Upon successful parsing, it prettily formats the resulting object as a String."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * LocalDates are formatted as \u003ccode\u003e\"d of MMMM yyyy\"\u003c/code\u003e."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003eLocalDateTimes are formatted as \u003ccode\u003e\"d of MMMM yyyy, h:mma\"\u003c/code\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param input           the String to be parsed. It can be either a date or datetime but must be in a"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *                        recognised format."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                String containing the prettily formatted date or datetime"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the input cannot be parsed as either a LocalDate or LocalDateTime"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static String prettifyDateOrDateTimeString(String input) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String parsedString \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            parsedString \u003d parseDate(input).format(DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM yyyy\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                parsedString \u003d parseDateTime(input).format(DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM yyyy, h:mma\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DukeException e2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Cannot be parsed with the default formatters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        if (parsedString \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"Could not parse String as Date or DateTime\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return parsedString;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 122
    }
  },
  {
    "path": "src/main/java/duke/util/DukeDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * A class for representing dates or datetimes regardless of whether they are in a recognised, parsable format or not."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class DukeDate implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM YYYY\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d \u0027of\u0027 MMMM YYYY h:mma\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private boolean hasTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private String displayString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a DukeDate from the specified LocalDateTime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param localDateTime  the LocalDateTime to represent"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeDate(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.localDateTime \u003d localDateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.hasTime \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.displayString \u003d localDateTime.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a DukeDate from the specified LocalDate."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param localDate  the LocalDate to represent"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public DukeDate(LocalDate localDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.localDateTime \u003d localDate.atStartOfDay();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.hasTime \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.displayString \u003d localDateTime.format(DATE_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a DukeDate with the specified string. The string is assumed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * to be an unparsable date and will be stored without further processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param dateString  String representing an unparsable date"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private DukeDate(String dateString) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.localDateTime \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.hasTime \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.displayString \u003d dateString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a DukeDate representing the specified date string. It first attempts to parse the input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * as a {@link LocalDate}. If that fails, it tries to parse it as a {@link LocalDateTime}. If the string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * cannot be parsed, it is stored as a raw string."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param text  the date string to represent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  DukeDate representing the specified date string"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public static DukeDate parse(String text) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            LocalDate localDate \u003d DateParser.parseDate(text);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return new DukeDate(localDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                LocalDateTime localDateTime \u003d DateParser.parseDateTime(text);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                return new DukeDate(localDateTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            } catch (DukeException e2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                // Cannot be parsed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return new DukeDate(text);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a string representation of this DukeDate."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Dates are formatted as \u003ccode\u003e\"d of MMMM yyyy\"\u003c/code\u003e."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003eDatetimes are formatted as \u003ccode\u003e\"d of MMMM yyyy, h:mma\"\u003c/code\u003e."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003eUnparsable dates are formatted as they were given."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return  a string representation of this DukeDate"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        return displayString;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 93
    }
  },
  {
    "path": "src/main/java/duke/util/PreParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.CommandMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.command.UndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * Parser that converts Strings into {@link Command} objects using a {@link CommandMap}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " * as a String-{@link Class} map."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class PreParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private CommandMap commandMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    private static List\u003cClass\u003c? extends Command\u003e\u003e defaultCommands \u003d List.of("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ByeCommand.class,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            ListCommand.class,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DoneCommand.class,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            TodoCommand.class,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DeadlineCommand.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            EventCommand.class,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            DeleteCommand.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            FindCommand.class,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            UndoCommand.class"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a PreParser using the default {@link CommandMap} mapping."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the CommandMap cannot be constructed using the default mapping"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public PreParser() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        commandMap \u003d new CommandMap(defaultCommands);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Constructs a PreParser using the specified {@link CommandMap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param commandMap  a CommandMap that maps command name Strings to {@link Command}s."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public PreParser(CommandMap commandMap) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        this.commandMap \u003d commandMap;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * Returns a {@link Command} object parsed from the specified String. The Command contains all arguments specified"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * in the String, ignoring extraneous spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * \u003cp\u003eSpecifically, the Command arguments are parsed into a String[] by calling {@link String#split} on the input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * with \u003ccode\u003e\" \"\u003c/code\u003e as the delimiter."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @param fullCommand     string to parse"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @return                the parsed Command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     * @throws DukeException  if the command name is not a key in the CommandMap"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String[] args \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Class\u003c? extends Command\u003e cls \u003d commandMap.get(args[0]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            Command command \u003d cls.getConstructor(String[].class).newInstance(new Object[]{args});"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 75
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-width: 1; -fx-border-color: gray;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "      \u003cStackPane prefWidth\u003d\"279.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "              \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER_RIGHT\" prefWidth\u003d\"252.0\" text\u003d\"Label\" textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "               \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "               \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 28
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 19
    }
  },
  {
    "path": "src/test/java/duke/task/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void getStatusIcon_undone() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo todo \u003d new Todo(\"\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"\\u2717\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void getStatusIcon_done() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo todo \u003d new Todo(\"\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        todo.markDone();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"\\u2713\", todo.getStatusIcon());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void toString_ascii() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] Complete JUnit tests\", new Todo(\"Complete JUnit tests\").toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void toString_unicode() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] ✓✗☹\", new Todo(\"✓✗☹\").toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] \\u2713\\u2717\\u2639\", new Todo(\"\\u2713\\u2717\\u2639\").toString());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void toString_largeString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        String largeString \u003d \"The standard Lorem Ipsum passage, used since the 1500s\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\\"\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"Section 1.10.32 of \\\"de Finibus Bonorum et Malorum\\\", written by Cicero in 45 BC\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\\\"\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"1914 translation by H. Rackham\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"But I must explain to you how all this mistaken idea of denouncing pleasure and praising pain was born and I will give you a complete account of the system, and expound the actual teachings of the great explorer of the truth, the master-builder of human happiness. No one rejects, dislikes, or avoids pleasure itself, because it is pleasure, but because those who do not know how to pursue pleasure rationally encounter consequences that are extremely painful. Nor again is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but because occasionally circumstances occur in which toil and pain can procure him some great pleasure. To take a trivial example, which of us ever undertakes laborious physical exercise, except to obtain some advantage from it? But who has any right to find fault with a man who chooses to enjoy a pleasure that has no annoying consequences, or one who avoids a pain that produces no resultant pleasure?\\\"\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"Section 1.10.33 of \\\"de Finibus Bonorum et Malorum\\\", written by Cicero in 45 BC\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus. Temporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae. Itaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\\\"\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"1914 translation by H. Rackham\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "                \"\\\"On the other hand, we denounce with righteous indignation and dislike men who are so beguiled and demoralized by the charms of pleasure of the moment, so blinded by desire, that they cannot foresee the pain and trouble that are bound to ensue; and equal blame belongs to those who fail in their duty through weakness of will, which is the same as saying through shrinking from toil and pain. These cases are perfectly simple and easy to distinguish. In a free hour, when our power of choice is untrammelled and when nothing prevents our being able to do what we like best, every pleasure is to be welcomed and every pain avoided. But in certain circumstances and owing to the claims of duty or the obligations of business it will frequently occur that pleasures have to be repudiated and annoyances accepted. The wise man therefore always holds in these matters to this principle of selection: he rejects pleasures to secure other greater pleasures, or else he endures pains to avoid worse pains.\\\"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        assertEquals(\"[T][\\u2717] \" + largeString, new Todo(largeString).toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    public void markDone_alreadyDone_exceptionThrown() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        Todo todo \u003d new Todo(\"Run this test\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            todo.markDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            todo.markDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "            assertEquals(\"Task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabrielchao"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabrielchao": 65
    }
  }
]
