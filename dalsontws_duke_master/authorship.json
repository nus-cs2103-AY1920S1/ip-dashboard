[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "run {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 30,
      "-": 15
    }
  },
  {
    "path": "list.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "T | 1 | join sports club"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 4
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected Date dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // List of acceptable date formats (for this case, just choosing two common patterns)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected List\u003cString\u003e dateFormats \u003d Arrays.asList(\"dd/MM/yyyy HHmm\", \"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Instantiates a new Deadline Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Convert the date/time provided to a SimpleDateFormat object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Can only convert for certain date \u0026 time formats."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param description The description of the deadline"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param by          The date \u0026 time of which the task has to be completed by"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (String pattern : dateFormats) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            SimpleDateFormat dateTime \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                this.dateTime \u003d dateTime.parse(by);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                System.out.println(\"Unable to convert String to SimpleDateFormat.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return \"D | \" + (isDone ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.by;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 48
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Circle clip \u003d new Circle(50, 50, 45);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 62
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "// For JavaFX"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // String Constants used for Duke output"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // JavaFX Constants"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Instantiates a new Duke object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Load an existing .txt file for the list of tasks stored."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param filePath The file path of the list .txt file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            tasks \u003d new TaskList(storage.loadFile()); // add existing tasks from txt file onto ArrayList"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            size \u003d tasks.getSize(); // get existing size of list"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            storage.closeFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.loadError();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.createFile();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            File file \u003d new File(filePath); // create new .txt file with provided filepath"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } catch (Exception err) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                System.out.println(\"Unable to create new file.\"); // Unlikely"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Run the Duke application."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Accepted commands: list, done, delete, find"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Accepted tasks: todo, event, deadline"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Store command-line input as String"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String input \u003d \"\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Storage storage \u003d this.storage;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        TaskList tasks \u003d this.tasks;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Create new user interface object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Read command-line input with Scanner"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Scanner scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Initial opening introduction and prompt for user input"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ui.openingStatement();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Check for last statement"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        while (!input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            // Get entire line of input from command-line"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            input \u003d scanner.nextLine().trim(); //Remove blank space"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            // Store whatever text entered, except \"bye\", exit loop"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.separator();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                ui.showList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                tasks.printList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else if (input.contains(\"done\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    //Mark task as done"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    tasks.setDone(input);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                } catch (NullPointerException err) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    ui.invalidEntry();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else if (input.contains(\"delete\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    //Mark task as done"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    tasks.deleteTask(input);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                } catch (NullPointerException err) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    ui.invalidEntry();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else if (input.contains(\"todo\") || input.contains(\"deadline\") || input.contains(\"event\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    String action \u003d parser.parseAction(input);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    ui.addTask();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    tasks.addTask(action, input);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                } catch (DukeException err) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    System.out.println(err.getMessage());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else if (input.contains(\"find\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                String keyword \u003d parser.parseDescription(\"find\", input);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                ui.matchingList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                tasks.getList(keyword);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                // Do not fit any commands"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    throw new DukeException(ui.invalidCommand());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                } catch (DukeException err) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    System.out.println(err.getMessage());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    ui.separator();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    System.out.println(\"\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.separator();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            System.out.println();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                storage.saveFile(tasks, this.storage.getFilePath());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                ui.saveError();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Closing statement"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ui.closingStatement();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        new Duke(\"list.txt\").run();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dalsontws": 227,
      "-": 8
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "// Custom exception class for Duke"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class DukeException extends Exception {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 6
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected Date dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // List of acceptable date formats (for this case, just choosing two common patterns)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected List\u003cString\u003e dateFormats \u003d Arrays.asList(\"dd/MM/yyyy HHmm\", \"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Instantiates a new Event Task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Convert the date/time provided to a SimpleDateFormat object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Can only convert for certain date \u0026 time formats."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param description The description of the event"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param at          The date \u0026 time of which the event is held at"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (String pattern : dateFormats) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            SimpleDateFormat dateTime \u003d new SimpleDateFormat(pattern);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                this.dateTime \u003d dateTime.parse(at);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                System.out.println(\"Unable to convert String to SimpleDateFormat.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return \"E | \" + (isDone ? \"1\" : \"0\") + \" | \" + this.description + \" | \" + this.at;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 48
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "//@Override"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Duke duke \u003d new Duke(\"list.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 30
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 50
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parse the input to return the user action as a String."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Ensure that the input has a valid action."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * If invalid, throw DukeException, indicate action is not recognised."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * If action is valid but description is blank, ask for description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param input Entire input command from the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @return action Return the action command of the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws DukeException If action or input is invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String parseAction(String input) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String[] substrings \u003d input.split(\" \");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String action \u003d substrings[0];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (substrings.length \u003d\u003d 0) { // Invalid command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } else if (substrings.length \u003d\u003d 1) { // No description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! The description of a \" + action + \" cannot be empty.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parse the description from the input as a String."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * For Event or Deadline Tasks, important to split substrings into"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * description and date/time, while for Todo Tasks and \"find\" command not required."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param input  The entire user input with action and task full description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param action The designated user action,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @return description/substring The description of the task, without action and dateTime"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String parseDescription(String action, String input) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String substring \u003d input.replace(action, \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //Split task and date or time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String[] parts \u003d substring.split(\"\\\\/..\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (action.equals(\"todo\") || action.equals(\"find\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            return substring.trim(); //no date or time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            description \u003d parts[0].trim(); // Remove blank spaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Parse the date or time as a String."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param input  The entire user input with action and task full description"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param action The designated user action,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @return dateTime The date or time as a String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String parseDateTime(String action, String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String substring \u003d input.replace(action, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        //Split task and date time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String[] parts \u003d substring.split(\"\\\\/..\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String dateTime \u003d parts[1].trim(); // Remove blank spaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 68
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Scanner file;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Instantiates a new Storage object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Storage object will store the path of the list .txt file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * After which, it will scan the list file for the existing tasks."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param filePath the file path"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Storage(String filePath) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            // Delimiters are \"|\" and a new line"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            this.file \u003d new Scanner(new File(filePath)).useDelimiter(\"[|\\\\n]\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DukeException(\"File not found.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Load list of tasks and store into an ArrayList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * If file has a filled, loop through entire file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Check for the type of task in each line:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Either [T] Todo, [D] Deadline, [E] Event,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * and create each type of task and store into the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @return ArrayList of Tasks from the file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws DukeException If file is empty."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public ArrayList loadFile() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (!file.hasNext()) { // Check if file is empty"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                throw new DukeException(\"File is empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DukeException(\"File is empty.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        while (file.hasNext()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            String action \u003d file.next().trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (action.equals(\"T\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                String status \u003d file.next();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                String description \u003d file.next().trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                list.add(new ToDo(description));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                if (status.contains(\"1\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    list.get(index).isDone \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                index +\u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                String status \u003d file.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                String description \u003d file.next().trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                String time \u003d file.next().trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                if (action.equals(\"E\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    list.add(new Event(description, time));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                } else if (action.equals(\"D\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    list.add(new Deadline(description, time));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                if (status.contains(\"1\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                    list.get(index).isDone \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                index +\u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void closeFile() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Save the current list of tasks TaskList into a .txt file."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Fetch the tasks from the list and output into the .txt"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * line by line and close the file once saved."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param tasks    Contains entire list of tasks objects"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @param saveFile The file path of where to save the list. By default same as source."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * @throws DukeException Throws exception if file not found."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void saveFile(TaskList tasks, String saveFile) throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            FileWriter fw \u003d new FileWriter(saveFile);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            BufferedWriter output \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            int size \u003d tasks.getSize();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                output.write(tasks.get(i).toSave());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                output.newLine();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            output.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 117
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    // Invalid task throws DukeException"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Task(String action, int size) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (size \u003d\u003d 1) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            throw new DukeException(\"    ☹ OOPS!!! The description of a \" + action + \" cannot be empty.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return (isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 29
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class TaskList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    protected Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return this.list.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void printList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        int size \u003d this.list.size();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            System.out.print(\"     \" + (i + 1) + \".\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            System.out.println(list.get(i));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void getList(String action) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        int size \u003d this.list.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            if (list.get(i).toString().contains(action)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                System.out.print(\"     \" + (index) + \".\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                System.out.println(list.get(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                index +\u003d 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        if (index \u003d\u003d 1) { // Index did not increment, no match found"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.noMatch();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void setDone(String input) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Assumption: fixed format - remove first 4 characters to get index. i.e. \"done\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String value \u003d input.substring(4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Get integer found in user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            int index \u003d Integer.parseInt(value.trim()); // Remove any blank space"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            list.get(index - 1).isDone \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.completedTask();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            System.out.println(list.get(index - 1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.invalidEntry();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void deleteTask(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Assumption: fixed format - remove first 6 characters to get index. i.e. \"delete\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String value \u003d input.substring(6);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Get integer found in user input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            int index \u003d Integer.parseInt(value.trim()); // Remove any blank space"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            Task delete \u003d list.get(index - 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            list.remove(index - 1); //index start from 0"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.deleteTask();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            System.out.println(delete);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            int n \u003d this.getSize();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.numTasks(n);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            ui.invalidEntry();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void addTask(String action, String input) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            String description1 \u003d parser.parseDescription(action, input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            list.add(new ToDo(description1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            String description2 \u003d parser.parseDescription(action, input);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            list.add(new Deadline(description2, parser.parseDateTime(action, input)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            String description3 \u003d parser.parseDescription(action, input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            list.add(new Event(description3, parser.parseDateTime(action, input)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        int n \u003d this.getSize();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(this.list.get(n - 1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ui.numTasks(n);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dalsontws": 108
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class ToDo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return \"T | \" + (isDone ? \"1\" : \"0\") + \" | \" + this.description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 16
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String INTRODUCTION \u003d \"     Hello! I\u0027m Duke\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String USER_PROMPT \u003d \"     What can I do for you?\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String SEPARATOR \u003d \"    ____________________________________________________________\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String CREATE_FILE \u003d \"     Creating new file.\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String SHOW_LIST \u003d \"     Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String INVALID_LIST_ENTRY \u003d \"     List entry does not exist!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String MATCHING_LIST \u003d \"     Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String NO_MATCH \u003d \"     There is no match in your list!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String LOAD_ERROR \u003d \"     Error loading file.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String SAVE_ERROR \u003d \"     Error saving file.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String MARK_TASK_COMPLETE \u003d \"     Nice! I\u0027ve marked this task as done: \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String ADD_TASK \u003d \"     Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String REMOVE_TASK \u003d \"     Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String CLOSING_STATEMENT \u003d \"     Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private static final String INVALID_COMMAND \u003d \"    ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Opening statement, introduction of Duke."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Includes a user prompt for input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void openingStatement() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(INTRODUCTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(USER_PROMPT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Closing statement."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void closingStatement() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(CLOSING_STATEMENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Invalid entry of the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * When user tries to delete/mark done an entry"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * that does not exist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void invalidEntry() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(INVALID_LIST_ENTRY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Create a .txt file as list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Happens when existing .txt file does not exist."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void createFile() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(CREATE_FILE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Load error occurs when file does not exist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void loadError() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(LOAD_ERROR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Save error occurs when filepath is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void saveError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SAVE_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     * Mark a specific task as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void completedTask() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(MARK_TASK_COMPLETE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.print(\"       \"); //indentation"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void addTask() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(ADD_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.print(\"       \"); // indentation"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void deleteTask() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(REMOVE_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.print(\"       \"); //indentation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void showList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SHOW_LIST);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void separator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(SEPARATOR);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void matchingList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(MATCHING_LIST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void noMatch() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(NO_MATCH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void numTasks(int n) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.println(\"     Now you have \" + (n) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public String invalidCommand() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        return INVALID_COMMAND;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 121
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    Task check \u003d new Deadline(\"return book\", \"04/06/2019 1030\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void ToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expected \u003d \"[D][\" + \"\\u2718\" + \"] return book (by: Tue Jun 04 10:30:00 SGT 2019)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(expected, check.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void toSave() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expected \u003d \"D | 0 | return book | 04/06/2019 1030\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(expected, check.toSave());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 20
    }
  },
  {
    "path": "src/test/java/DukeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "public class DukeTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    public void dummyTest(){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(2, 2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 10
    }
  },
  {
    "path": "src/test/java/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    Task check \u003d new Event(\"project meeting\", \"04/06/2019 1030\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expected \u003d \"[E][\" + \"\\u2718\" + \"] project meeting (at: Tue Jun 04 10:30:00 SGT 2019)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(expected, check.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void toSave() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expected \u003d \"E | 0 | project meeting | 04/06/2019 1030\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(expected, check.toSave());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 20
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    String inputToDo \u003d \"todo go for classes\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    String inputEvent \u003d \"event classes /at 12pm\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void parseAction() throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String actionToDo \u003d parser.parseAction(inputToDo);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String actionEvent \u003d parser.parseAction(inputEvent);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(\"todo\", actionToDo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(\"event\", actionEvent);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void parseToDo() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String desToDo \u003d parser.parseDescription(\"todo\", inputToDo);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(\"go for classes\", desToDo);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void parseDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String des \u003d parser.parseDescription(\"event\", inputEvent);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(\"classes\", des);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void parseDateTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String dateTime \u003d parser.parseDateTime(\"event\", inputEvent);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(\"12pm\", dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 35
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Task one \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Task two \u003d new Deadline(\"return book\", \"June 6th\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Task three \u003d new Event(\"project meeting\", \"Aug 6th 2-4pm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void get() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(one);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(two);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(three);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Task check \u003d tasks.get(1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(two, check);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void getSize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(one);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(two);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(three);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        int size \u003d tasks.getSize();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(3, size);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void getList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(one);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(two);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(three);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Set string as CRLF line separators"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String check \u003d \"     1.[T][\" + \"\\u2718\" + \"] read book\\r\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \"     2.[D][\" + \"\\u2718\" + \"] return book (by: June 6th)\\r\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "                \"     3.[E][\" + \"\\u2718\" + \"] project meeting (at: Aug 6th 2-4pm)\\r\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        // Get print statement as String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        PrintStream ps \u003d new PrintStream(baos);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        PrintStream sout \u003d System.out;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks.printList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        System.setOut(sout);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(check, baos.toString()); //Difference in line separators (CRLF works)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void doneTask() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(one);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(two);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(three);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String notDone \u003d \"[D][\" + \"\\u2718\" + \"] return book (by: June 6th)\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String done \u003d \"[D][\" + \"\\u2713\" + \"] return book (by: June 6th)\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(notDone, two.toString()); // Before marked as done"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks.setDone(\"done 2\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(done, two.toString()); // Marked as done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void deleteTask() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(one);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(two);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(three);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String toDelete \u003d \"delete 2\"; // delete 2nd on the list (index 1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks.deleteTask(toDelete);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Task check \u003d tasks.get(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(check, three);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void addTask() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(one);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(two);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        list.add(three);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks \u003d new TaskList(list);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String toAdd \u003d \"todo go for classes\"; // delete 2nd on the list (index 1)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        ToDo toAddTask \u003d new ToDo(\"go for classes\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        tasks.addTask(\"todo\", toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        Task check \u003d tasks.get(3);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(check.toString(), toAddTask.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 107
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    private Task check \u003d new ToDo(\"read book\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expected \u003d \"[T][\" + \"\\u2718\" + \"] read book\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(expected, check.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    void toSave() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        String expected \u003d \"T | 0 | read book\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "        assertEquals(expected, check.toSave());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 20
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "       [T][?] borrow book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dalsontws": 18
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "todo borrow book"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 1
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dalsontws"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dalsontws"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "dalsontws": 25
    }
  }
]
