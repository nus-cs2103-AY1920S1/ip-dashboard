[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    mainClassName \u003d \"duke.ui.Launcher\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "arjunwangty": 16
    }
  },
  {
    "path": "src/main/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "D | 0 | essay submission | 11/09/2019 0000"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "E | 0 | project meeting | 10/09/2019 1500"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "T | 1 | read book"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Storage storage \u003d new Storage(\"src/main/data/duke.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an instance of Duke with a path to task list file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Loads data from the file and the tasks are stored into a TaskList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * If file is not found or empty, exception is reported."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            System.out.println(\"File not found\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates new instance of Parser and run parse method to read user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Catches and reports DukeExceptions."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return Response to be displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String getResponse(String text) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Command c \u003d Parser.parse(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return c.execute(storage, tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "arjunwangty": 42
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to add a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private String taskInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an AddCommand instance with an input task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskInfo string representing a task to be added."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public AddCommand(String taskInfo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.taskInfo \u003d taskInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Prints out the response when user adds a new task."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param storage the storage storing task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Task task \u003d tasks.add(taskInfo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            storage.writeToFile(tasks.generateInfo());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return \"Got it. I\u0027ve added this task:\\n       \" + task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    + \"\\n     Now you have \" + tasks.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 44
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents command of the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public abstract String execute(Storage storage, TaskList tasklist) throws DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 14
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to delete a task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an DeleteCommand instance with an input integer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param index index of task to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.taskIndex \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Deletes a task with a given index and prints out the response when the user deletes a task from the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param storage the storage storing task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Task task \u003d tasks.delete(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            storage.writeToFile(tasks.generateInfo());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return \"Noted. I\u0027ve removed this task: \\n       \" + task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                + \"\\n     Now you have \" + tasks.getSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 43
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to mark a task as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an DoneCommand instance with an input integer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param index index of task to be marked done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.taskIndex \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Marks a task as done and prints out the response."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param storage the storage storing task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Task task \u003d tasks.done(taskIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            storage.writeToFile(tasks.generateInfo());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return \"Nice! I\u0027ve marked this task as done:\\n       \" + task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 42
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to exit the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Prints out the response when user exits the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasklist) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 20
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to find a task by keyword."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a FindCommand instance with a keyword entered by user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param key keyword entered by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public FindCommand(String key) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.keyWord \u003d key;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Finds a task in the list of tasks which contains a keyword as part of its description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param storage the storage storing task data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks a \u003ccode\u003eTaskList\u003c/code\u003e instance containing a list of tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException Exceptions thrown when there are more than/ less than one keyword specified."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        checkKeyword();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StringBuilder listOfTasks \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n     \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        boolean isFound \u003d findMatchingItems(tasks, listOfTasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (isFound) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            response \u003d removeLineSeparator(listOfTasks).toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            response \u003d \"\\u2639 OOPS!!! There is no matching tasks in your list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Checks whether keyword is in the proper format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException Exceptions thrown when there are more than/ less than one keyword specified."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void checkKeyword() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        boolean containsMultipleKeyword \u003d keyWord.split(\" \").length \u003e 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (containsMultipleKeyword || keyWord.equals(\" \")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! Please include at most/ at least one keyword.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Removes the last line separator from the list of matching tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param listOfTasks StringBuilder storing the list of tasks containing the keyword."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return StringBuilder without a line separator at the end."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private StringBuilder removeLineSeparator(StringBuilder listOfTasks) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        int index \u003d listOfTasks.lastIndexOf(\"\\n     \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (index \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            listOfTasks \u003d new StringBuilder(listOfTasks.substring(0, index));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return listOfTasks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Finds all matching tasks in the list of tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks a \u003ccode\u003eTaskList\u003c/code\u003e instance containing a list of tasks."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param listOfTasks StringBuilder storing the list of tasks containing the keyword."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return a boolean representing whether matching items are found."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private boolean findMatchingItems(TaskList tasks, StringBuilder listOfTasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        boolean isFound \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            String[] words \u003d tasks.getElement(i).getDescription().split(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            boolean containsKey \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            for (String word : words) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (keyWord.equalsIgnoreCase(word)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    containsKey \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            if (containsKey) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                isFound \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                listOfTasks.append(i + 1).append(\".\").append(tasks.getElement(i));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                listOfTasks.append(\"\\n     \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return isFound;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 96
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to list out all the tasks;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Prints out the response showing a list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param storage the storage storing task data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StringBuilder listOfTasks \u003d new StringBuilder(\"Here are the tasks in your list:\\n     \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            listOfTasks.append(i + 1).append(\".\").append(tasks.getElement(i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            if (i !\u003d tasks.getSize() - 1) listOfTasks.append(\"\\n     \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return listOfTasks.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 27
    }
  },
  {
    "path": "src/main/java/duke/command/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a command to sort the tasks;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an SortCommand instance with an input task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param category string representing what the sorting should be based on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public SortCommand(String category) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if(category.equals(\"time\") || category.equals(\"description\") || category.equals(\"type\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(\"\\u2639 The category for sorting can only be time, description, status or type.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Prints out the response showing a sorted list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param storage the storage storing task data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks the list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the response."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String execute(Storage storage, TaskList tasks) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            StringBuilder listOfTasks \u003d new StringBuilder(\"Here are the tasks in your list sorted by \" + category + \":\\n     \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.sortTasks(category);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                listOfTasks.append(i + 1).append(\".\").append(tasks.getElement(i));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (i !\u003d tasks.getSize() - 1) listOfTasks.append(\"\\n     \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            storage.writeToFile(tasks.generateInfo());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return listOfTasks.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 48
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents exception arisen when running the application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Generates an exception with customised message to be shown."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 16
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Deals with reading and making sense of the user input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Reads user input, deciphers input and return an instance of corresponding command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param input string from user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return command to be executed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Make sense of the user input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else if (input.equals(\"list\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else if (input.length() \u003e 5 \u0026\u0026 input.substring(0, 4).equals(\"done\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            validateInput(input, 4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new DoneCommand(Integer.parseInt(input.substring(5)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else if (input.length() \u003e 7 \u0026\u0026 input.substring(0, 6).equals(\"delete\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            validateInput(input, 6);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(input.substring(7)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else if (input.length() \u003e 5 \u0026\u0026 input.substring(0, 4).equals(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            validateInput(input, 4);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new FindCommand(input.substring(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else if (input.length() \u003e 5 \u0026\u0026 input.substring(0, 4).equals(\"sort\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            validateInput(input, 4);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new SortCommand(input.substring(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return new AddCommand(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Validates the format of user input."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param input string from user input."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param min minimum length of user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static void validateInput(String input, int min) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Check if there is a white space following the command word"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (input.charAt(min) !\u003d \u0027 \u0027) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 54
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new Storage instance with the given path to the file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param path path to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Storage(String path) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.filePath \u003d path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new FileWriter for the given file path of the file and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * writes text into the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param text text to be written into the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws IOException exception produced by failed or interrupted I/O operations."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public void writeToFile(String text) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Create a FileWriter for the given file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        fw.write(text);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Loads file from the file path and translates the lines into \u003ccode\u003eTask\u003c/code\u003e objects"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * to be stored into a list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return a list of Tasks."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws FileNotFoundException exception produced by failure of finding a file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException exception produced by reading empty file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public List\u003cTask\u003e load() throws FileNotFoundException, DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Create a File for the given file path"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Create a Scanner using the File as the source"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (!s.hasNext()) throw new DukeException(\"Your task list is currently empty.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            readTasks(s.nextLine());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Reads task info and generates new \u003ccode\u003eTask\u003c/code\u003e instance."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param str String containing information about a task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void readTasks(String str) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            String[] arr \u003d str.split(\" \\\\| \");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            String taskType \u003d arr[0];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            int taskStatus \u003d Integer.parseInt(arr[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            String taskDes \u003d arr[2];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Task task;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            case \"T\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                task \u003d new Todo(taskDes);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (taskStatus \u003d\u003d 1) task.mark();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                task \u003d new Deadline(taskDes, new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(arr[3]));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (taskStatus \u003d\u003d 1) task.mark();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            case \"E\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                task \u003d new Event(taskDes, new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(arr[3]));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                tasks.add(task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (taskStatus \u003d\u003d 1) task.mark();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                throw new AssertionError(taskType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(\"Error when reading data from file\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 106
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a task of the type DeadLine."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new instance of \u003ccode\u003eDeadline\u003c/code\u003e labeled \"D\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param s description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param t time of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Deadline(String s, Date t) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(s, t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.label \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns a line with details of the \u003ccode\u003eDeadline\u003c/code\u003e task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return \"[\" + this.label + \"]\" + this.getStatusIcon() + this.description + \" (by: \" + this.getTimeAsString() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 30
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a task of the type Event."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new instance of \u003ccode\u003eEvent\u003c/code\u003e labeled \"E\"."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param s description of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param t time of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Event(String s, Date t) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(s, t);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.label \u003d \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns a line with details of the \u003ccode\u003eEvent\u003c/code\u003e task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return \"[\" + this.label + \"]\" + this.getStatusIcon() + this.description + \" (at: \" + this.getTimeAsString() + \")\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 31
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Date time;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected String label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new instance of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param s description of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Task(String s) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.description \u003d s;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new instance of \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param s description of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param t time of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Task(String s, Date t) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.description \u003d s;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.time \u003d t;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns a label which is a representation of the task type."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return the label of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns the time of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return time of the task."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (this.time !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return time;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns the time of the task as string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return string representation of the time of the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String getTimeAsString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (this.time !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return convertDateToString(time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return status of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public int getStatus() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return this.isDone ? 1 : 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return description of the task."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Updates status of task by marking this task as done."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Boolean value \u003ccode\u003eisDone\u003c/code\u003e is updated to \u003ccode\u003etrue\u003c/code\u003e."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public void mark() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Update status of task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (!isDone) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns a string representing tick or X symbols."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return string representation of tick or X symbols."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Return tick or X symbols"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return (isDone ? \"[\\u2713] \" : \"[\\u2718] \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Converts the format of date and time."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param date date and time of task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return Reformatted date and time."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws ParseException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private String convertDateToString(Date date) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM yyyy, hh:mm a\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String taskTime \u003d formatter.format(date);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String[] array \u003d taskTime.split(\" \");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        array[0] \u003d getOrdinal(Integer.parseInt(array[0]));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        array[array.length - 1] \u003d array[array.length - 1].toLowerCase();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StringBuilder taskTimeBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        for (String s : array) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            taskTimeBuilder.append(\" \").append(s);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        taskTime \u003d taskTimeBuilder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        taskTime \u003d taskTime.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return taskTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Converts numbers to ordinal numbers."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param n number as integers."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing ordinal number nth."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static String getOrdinal(int n) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assert n \u003e 0 : n;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (n \u003e\u003d 11 \u0026\u0026 n \u003c\u003d 13) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return n + \"th\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        switch (n % 10) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return n + \"st of\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Fallthrough"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return n + \"nd of\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Fallthrough"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return n + \"rd of\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Fallthrough"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return n + \"th of\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Fallthrough"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 162
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Contains the task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an instance of TaskList with empty new arrayList of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates an instance of TaskList with input arrayList of tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param tasks list of tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public TaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns the number of tasks in the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return size of task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns ith Task element from the task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param i index of Task in the list of tasks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return Task at index i of the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Task getElement(int i) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return this.tasks.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Sorts tasks based on a category."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param category category that the sorting should be based on."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public void sortTasks(String category) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"time\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.sort((t1, t2) -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (t1.getTime() \u003d\u003d null || t2.getTime() \u003d\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                return t1.getTime().compareTo(t2.getTime());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.sort((t1, t2) -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (t1.getDescription().equals(t2.getDescription()))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                return t1.getDescription().compareTo(t2.getDescription());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"type\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.sort((t1, t2) -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                if (t1.getLabel().equals(t2.getLabel()))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                return t1.getLabel().compareTo(t2.getLabel());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"status\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.sort(Comparator.comparingInt(Task::getStatus));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new AssertionError(category);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Validates that the task information entered by the user is in proper format."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskType type of task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskDes description of task."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskTime date and time of task"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException self-defined exceptions caused by illegal input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void validateInput(String taskType, String taskDes, String taskTime) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (!(taskType.equals(\"todo\") || taskType.equals(\"deadline\") || taskType.equals(\"event\"))) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if (taskDes.equals(\"\")) throw new DukeException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \"\\u2639 OOPS!!! The description of a \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if ((taskType.equals(\"deadline\") || taskType.equals(\"event\")) \u0026\u0026 taskTime.equals(\"\"))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \"\\u2639 OOPS!!! The time of a \" + taskType + \" cannot be empty.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Converts command of users into Task objects with relevant details."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param s String used by user for creating a new task."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return a Task object with input details"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @throws DukeException Exception thrown when input is of invalid format."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Task add(String s) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String[] arr \u003d s.split(\" \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String taskType \u003d arr[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StringBuilder taskDes \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StringBuilder taskTime \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Get task description"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        for (int i \u003d 1; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            if (arr[i].length() \u003e\u003d 1 \u0026\u0026 arr[i].charAt(0) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                // Get task time"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                for (int j \u003d i + 1; j \u003c arr.length; j++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    taskTime.append(\" \").append(arr[j]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                taskDes.append(\" \").append(arr[i]);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        taskDes \u003d new StringBuilder(taskDes.toString().trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        taskTime \u003d new StringBuilder(taskTime.toString().trim());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Handle exceptions"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        validateInput(taskType, taskDes.toString(), taskTime.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Converts date format"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Date taskDate \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\").parse(taskTime.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            // Creates new task"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return generateTask(taskType, taskDes, taskDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            // Do nothing if the date is not properly formatted"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new DukeException(\"\\u2639 The time of the task is not in proper format. \\n \" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \"example of a valid time: 01/01/2000 0800\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Marks the nth task in the task list as done."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param n the position of task in the list of tasks."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return the task marked as done."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Task done(int n) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Task task \u003d this.tasks.get(n - 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Mark the corresponding task as done"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        task.mark();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Deletes nth task from the list of tasks."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param n the position of task in the list of tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return the task deleted from the list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Task delete(int n) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Task task \u003d this.tasks.get(n - 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Delete task from list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.tasks.remove(task);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Converts task into a String which can be stored in the data file."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return a String representation to be stored in the task list file."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String generateInfo() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // Convert Task into a String which can be stored in the data file"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StringBuilder taskFile \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            String current;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            if (task.getTimeAsString().equals(\"\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                assert task.getLabel().equals(\"T\") : task;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                current \u003d task.getLabel() + \" | \" + task.getStatus() + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                assert (task.getLabel().equals(\"D\") || task.getLabel().equals(\"E\")) : task;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                current \u003d task.getLabel() + \" | \" + task.getStatus() + \" | \" + task.getDescription()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        + \" | \" + convertDateFormat(task.getTime());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            if (i !\u003d tasks.size() - 1) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                taskFile.append(current).append(System.lineSeparator());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                taskFile.append(current);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return taskFile.toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new task instance and add it to the task list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskType type of task."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskDes description of task."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param taskTime time and/or date of task."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return Task added to the task list."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Task generateTask(String taskType, StringBuilder taskDes, Date taskTime) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            task \u003d new Todo(taskDes.toString());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            task \u003d new Deadline(taskDes.toString(), taskTime);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            task \u003d new Event(taskDes.toString(), taskTime);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            return task;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            throw new AssertionError(taskType);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Converts date of a task into string to be stored in file."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param date the date and time of a task;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return string representation of date and time;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private String convertDateFormat(Date date) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"d/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return formatter.format(date);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 243
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Represents a task of the type Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates a new instance of \u003ccode\u003eTodo\u003c/code\u003e labeled \"T\"."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param s description of the task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public Todo(String s) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(s);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.label \u003d \"T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Returns a line with details of the \u003ccode\u003eTodo\u003c/code\u003e task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @return String representing the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return \"[\" + this.label + \"]\" + this.getStatusIcon() + this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 27
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 61
    }
  },
  {
    "path": "src/main/java/duke/ui/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 9
    }
  },
  {
    "path": "src/main/java/duke/ui/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            stage.setResizable(false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 33
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Sets duke to a Duke object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * @param d Duke object to be set."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        displayGreetings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Displays duke dialog box with greetings messages."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void displayGreetings() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                DialogBox.getDukeDialog(\"Hello! I\u0027m Duke\\n\" +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \"     What can I do for you?\", dukeImage)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * the dialog container. Clears the user input after processing. Closes the window if exit command is inputted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        if(input.equals(\"bye\")){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            new Thread(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                try{"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    Thread.sleep(1000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                catch(InterruptedException exc){"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    System.out.println(\"interrupted\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                Platform.exit();}).start();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 85
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                  \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 25
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void add_userTaskInput_success() throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[T][\\u2718] testing1\", new TaskList().add(\"todo testing1\").toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[D][\\u2718] testing2 (by: 10th of October 2020, 11:00 am)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                new TaskList().add(\"deadline testing2 /by 10/10/2020 1100\").toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[E][\\u2718] testing3 (at: midnight)\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                new TaskList().add(\"event testing3 /at midnight\").toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void add_userTaskInput_exceptionThrown() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {assertEquals(\"\", new TaskList().add(\"task testing1 /by 10/10/2020 1100\").toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {assertEquals(\"\", new TaskList().add(\"event\").toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The description of a event cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        try {assertEquals(\"\", new TaskList().add(\"deadline testing2\").toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            assertEquals(\"\\u2639 OOPS!!! The time of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void done_integerInput_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[E][\\u2713] testing (at: tomorrow)\", new TaskList(List.of(new Event(\"testing\", \"tomorrow\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                new Deadline(\"testing2\", \"tomorrow\"), new Todo(\"testing3\"))).done(1).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[T][\\u2713] testing3\", new TaskList(List.of(new Event(\"testing\", \"tomorrow\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                new Deadline(\"testing2\", \"tomorrow\"), new Todo(\"testing3\"))).done(3).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void delete_integerInput_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        List\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ls.add(new Event(\"testing\", \"tomorrow\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ls.add(new Deadline(\"testing2\", \"tomorrow\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ls.add(new Todo(\"testing3\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[E][\\u2718] testing (at: tomorrow)\", new TaskList(ls).delete(1).toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[T][\\u2718] testing3\", new TaskList(ls).delete(2).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void generateInfo() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        List\u003cTask\u003e ls \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ls.add(new Event(\"testing\", \"tomorrow\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ls.add(new Deadline(\"testing2\", \"tomorrow\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ls.add(new Todo(\"testing3\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"E | 0 | testing | tomorrow\\n\" +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \"D | 0 | testing2 | tomorrow\\n\" +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \"T | 0 | testing3\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                new TaskList(ls).generateInfo());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 70
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void testingGetLabel() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"T\", new Todo(\"testing\").getLabel());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"D\", new Deadline(\"testing\", \"tomorrow\").getLabel());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"E\", new Event(\"testing\", \"tomorrow\").getLabel());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void testingGetTime() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"\", new Todo(\"testing\").getTime());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"tomorrow\", new Deadline(\"testing\", \"tomorrow\").getTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"tomorrow\", new Event(\"testing\", \"tomorrow\").getTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void getStatus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Deadline d \u003d new Deadline(\"testing\", \"tomorrow\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        d.mark();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(0, new Deadline(\"testing\", \"tomorrow\").getStatus());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(1, d.getStatus());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"testing\", new Todo(\"testing\").getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"testing\", new Deadline(\"testing\", \"tomorrow\").getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void mark() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Deadline d \u003d new Deadline(\"testing\", \"tomorrow\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(0, d.getStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        d.mark();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(1, d.getStatus());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        Deadline d \u003d new Deadline(\"testing\", \"tomorrow\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        d.mark();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[\\u2718] \", new Deadline(\"testing\", \"tomorrow\").getStatusIcon());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[\\u2713] \", d.getStatusIcon());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[T][\\u2718] testing\", new Todo(\"testing\").toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[D][\\u2718] testing (by: tomorrow)\", new Deadline(\"testing\", \"tomorrow\").toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        assertEquals(\"[E][\\u2718] testing (at: tomorrow)\", new Event(\"testing\", \"tomorrow\").toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 60
    }
  }
]
