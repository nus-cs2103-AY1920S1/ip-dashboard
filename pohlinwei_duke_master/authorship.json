[
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String entries \u003d \"../data/entries.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // set up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        TaskList taskList \u003d TaskList.instanceOf();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cStorage\u003e desiredStorage \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            desiredStorage \u003d Optional.of(new Storage(entries));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Ui.showError(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cStorage\u003e storage \u003d desiredStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e taskList.addPreviousTasks(s.load()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // greet user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.sayHi();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // get first user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Optional\u003cCommand\u003e currentCommand \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean isExitCommand \u003d currentCommand.filter(c -\u003e c instanceof ExitCommand).isPresent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        while (!isExitCommand) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            currentCommand.ifPresent(c -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    c.execute(taskList, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    Ui.showError(e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            currentCommand \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            isExitCommand \u003d currentCommand.filter(c -\u003e c instanceof ExitCommand).isPresent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.sayBye();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 52,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a new task to be added to a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    Task task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a command which allows us to add a task to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param task task to be added"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by adding \u003ccode\u003ethis\u003c/code\u003e task to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that command has been executed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskList task list which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.addTask(task));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.informAdded(taskList.getLastEditedTask(), taskList.getSize());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 38
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This allows commands, as indicated by a user\u0027s input, to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes the intended command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskList task list which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws Exception if command cannot be executed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 19
    }
  },
  {
    "path": "src/main/java/duke/command/CommandType.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * A list of valid command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public enum CommandType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    BYE, DEADLINE, DELETE, DONE, EVENT, LIST, TODO, FIND"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 9
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a task to be deleted from a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a command which allows us to remove a task from \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of \u003ccode\u003etask\u003c/code\u003e to be removed from \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // todo handle exceptions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by removing task with \u003ccode\u003etaskNum\u003c/code\u003e from \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that command has been executed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskList task list which the task should be added to"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskList.deleteTask(taskNum);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.update(taskList.getTasksAsStream()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.informDeleted(taskList.getLastEditedTask(), taskList.getSize());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows us to terminate the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ExitCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Bids farewell to user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskList task list which \u003ccode\u003ethis\u003c/code\u003e task should be added to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.sayBye();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 23
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    String query;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public FindCommand(String query) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.query \u003d query;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        List\u003cString\u003e results \u003d taskList.getTasksAsStream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .map(t -\u003e t.toString())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .filter(t -\u003e t.contains(query))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String resultString \u003d IntStream.range(0, results.size())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", (i + 1), results.get(i)))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + curr);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.showSearchResults(resultString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 30
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a new task to be added to a \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by listing all tasks in \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskList task list which contains all tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.showList(taskList.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 23
    }
  },
  {
    "path": "src/main/java/duke/command/MarkDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.MultipleChecksException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.util.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows a task to be marked as completed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MarkDoneCommand implements Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a command which allows us to add a task to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum id of \u003ccode\u003etask\u003c/code\u003e in \u003ccode\u003etaskList\u003c/code\u003e to be marked as completed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MarkDoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Executes this command by marking \u003ccode\u003etask\u003c/code\u003e with \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that command has been executed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskList task list which contains \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param storage storage which stores all tasks on the local hard disk, if any"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void execute(TaskList taskList, Optional\u003cStorage\u003e storage) throws MultipleChecksException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        taskList.markTaskDone(taskNum);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        storage.ifPresent(s -\u003e s.update(taskList.getTasksAsStream()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Ui.informDone(taskList.getLastEditedTask());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 39
    }
  },
  {
    "path": "src/main/java/duke/exception/DeadlineParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that an error was encountered when trying to parse user\u0027s deadline input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeadlineParseException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public DeadlineParseException(String str) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(str, 0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(super.getMessage() + \"\\n\" +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                \"Please input deadline info in the following format:\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                \"\\tdeadline essay /by 20/1 1800\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 19
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EmptyDescriptionException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public EmptyDescriptionException(String task) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (task.equals(\"event\")) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"an event\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (task.equals(\"todo\")) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"a todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // assumes that there are only 3 possibilities"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            type \u003d \"a deadline\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"The description of %s cannot be empty.\", type);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/exception/EventParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that an error was encountered when trying to parse user\u0027s event input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class EventParseException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public EventParseException(String string) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(string, 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(super.getMessage() + \"\\n\" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                \"Please input event info in the following format:\\n\" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                \"\\tevent dance /at 20/1 1800-1830\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 20
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that an error was encountered when trying to parse user\u0027s command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class InvalidCommandException extends UnsupportedOperationException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public InvalidCommandException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 15
    }
  },
  {
    "path": "src/main/java/duke/exception/MultipleChecksException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This indicates that the task with \u003ccode\u003etaskNum\u003c/code\u003e has previously been marked as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class MultipleChecksException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an exception that indicates \u003ccode\u003etask\u003c/code\u003e with \u003ccode\u003etaskNum\u003c/code\u003e has previously been completed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum id of \u003ccode\u003etask\u003c/code\u003e in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public MultipleChecksException(int taskNum) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"You have completed task %d earlier!\", taskNum);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 24
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks that need to be done before a specific date/time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateBeautifier \u003d new SimpleDateFormat(\"dd/MM/yy h:mma\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar dateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a task with a deadline field."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name of task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details latest completion date and time"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param dateTime formatted version of \u003ccode\u003edetails\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Deadline(String taskName, String details, Calendar dateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"D | %d | %s | %s\", done ? 1 : 0, taskName, details);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing a \u003ccode\u003eDeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param timeInfo latest completion date and time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task stringToTask(String name, String timeInfo) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Deadline(name, timeInfo, Task.parseDate(timeInfo));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[D][%s] %s (by: %s)\", done ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                taskName, dateBeautifier.format(dateTime.getTime()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003eObject o\u003c/code\u003e has the same \u003ccode\u003etaskName\u003c/code\u003e and \u003ccode\u003edetails\u003c/code\u003e as"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared with \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return boolean indicating whether the two objects are \u0027equal\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (o instanceof Deadline) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return this.taskName \u003d\u003d ((Deadline) o).taskName"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    \u0026\u0026 this.details \u003d\u003d ((Deadline) o).details;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 76
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks that start at a specific time and ends at a specific time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateBeautifier \u003d new SimpleDateFormat(\"dd/MM/yy h:mma\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String details;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Calendar endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an event with a task name, start time and end time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName task of name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param details date, start time and end time of event in the format d/M hhmm-hhmm (24h format)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param startTime formatted start time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param endTime formatted end time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Event(String taskName, String details, Calendar startTime, Calendar endTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"E | %d | %s | %s\", done ? 1 : 0, taskName, details);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing an \u003ccode\u003eEvent\u003c/code\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    static Task stringToTask(String name, String timeInfo) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] dateTimeArr \u003d timeInfo.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String date \u003d dateTimeArr[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] times \u003d dateTimeArr[1].split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time1 \u003d times[0];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time2 \u003d times[1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeDate1 \u003d date + \" \" + time1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeDate2 \u003d date + \" \" + time2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Event(name, timeInfo, Task.parseDate(timeDate1), Task.parseDate(timeDate2));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[E][%s] %s (at: %s-%s)\", done ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE, taskName,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                dateBeautifier.format(startTime.getTime()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                dateBeautifier.format(endTime.getTime()).split(\" \")[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 68
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * An \u003ccode\u003eabstract\u003c/code\u003e class representing a task which has name and status (whether it is done) fields."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "abstract public class Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int CURRENT_YEAR \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static final String SYMBOL_COMPLETE \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static final String SYMBOL_INCOMPLETE \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected boolean done \u003d false; // by default it\u0027s false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a task with \u003ccode\u003etaskName\u003c/code\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name of the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    abstract public String getInfo();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Converts a string represented task to an instance of a \u003ccode\u003eTask\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskInfo summarised string representation of task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return an instance of \u003ccode\u003eTask\u003c/code\u003e with fields found in \u003ccode\u003etaskInfo\u003c/code\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task strToTask(String taskInfo) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedInfo \u003d taskInfo.split(\" \\\\| \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String type \u003d parsedInfo[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        boolean done \u003d Integer.parseInt(parsedInfo[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d parsedInfo[2];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String time;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Todo.stringToTask(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            time \u003d parsedInfo[3];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Deadline.stringToTask(name, time);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            time \u003d parsedInfo[3];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task \u003d Event.stringToTask(name, time);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            task.setDone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    protected static Calendar parseDate(String str) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(str);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            c.setTime(date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            c.set(Calendar.YEAR, CURRENT_YEAR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // won\u0027t fall into this block since this function is only used when str is valid"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Marks \u003ccode\u003ethis\u003c/code\u003e as done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a boolean indicating whether \u003ccode\u003ethis\u003c/code\u003e is done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003ethis\u003c/code\u003e is done; otherwise, it returns \u003ccode\u003efalse\u003c/code\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 99
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.MultipleChecksException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class returns a task list which allows us to read, add, delete and update the status of tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Optional\u003cTask\u003e lastEditedTask \u003d Optional.empty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return an instance of \u003ccode\u003eTaskList\u003c/code\u003e that contains no \u003ccode\u003etask\u003c/code\u003es"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static TaskList instanceOf() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new TaskList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds tasks that are retrieved from a \u003ccode\u003eStream\u003c/code\u003e of strings representing a"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * summarised version of \u003ccode\u003etask\u003c/code\u003es."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003cp\u003e\u003c"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * The \u003ccode\u003eStream\u003c/code\u003e can be retrieved from a \u003ccode\u003eStorage\u003c/code\u003e object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param previousTasks \u003ccode\u003eStream\u003c/code\u003e of summarised string representation of \u003ccode\u003etask\u003c/code\u003es"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addPreviousTasks(Stream\u003cString\u003e previousTasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.addAll(toTaskList(previousTasks));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds \u003ccode\u003enewTask\u003c/code\u003e to \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param newTask task to be added"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEditedTask \u003d Optional.of(newTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Deletes task with \u003ccode\u003etaskNum\u003c/code\u003e in \u003ccode\u003ethis\u003c/code\u003e task list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of task to be deleted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void deleteTask(int taskNum) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        lastEditedTask \u003d Optional.of(tasks.get(taskNum));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        tasks.remove(taskNum);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Marks task with \u003ccode\u003etaskNum\u003c/code\u003e as done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskNum index of task to be marked as completed"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws MultipleChecksException if the task with index \u003ccode\u003etaskNum\u003c/code\u003e has been marked as done previously"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void markTaskDone(int taskNum) throws MultipleChecksException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Task completedTask \u003d tasks.get(taskNum);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (completedTask.isDone()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new MultipleChecksException(taskNum + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            completedTask.setDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            lastEditedTask \u003d Optional.of(completedTask);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Gets the last task which has been added, deleted or marked as done."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return last task which has been added, deleted or marked as done"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Task getLastEditedTask() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return lastEditedTask.orElseThrow();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns the number of tasks in this instance of \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return number of tasks in this instance of \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eStream\u003c/code\u003e which represents every task in this instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eStream\u003c/code\u003e which represents every task in this instance of \u003ccode\u003eTaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Stream\u003cTask\u003e getTasksAsStream() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return tasks.stream();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private List\u003cTask\u003e toTaskList(Stream\u003cString\u003e allTasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return allTasks.map(taskInfo -\u003e toTask(taskInfo))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private Task toTask(String taskInfo) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return Task.strToTask(taskInfo);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String listedTask \u003d IntStream.range(0, tasks.size())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .mapToObj(i -\u003e String.format(\"%d. %s\\n\", (i + 1), tasks.get(i)))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + curr);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return listedTask;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 123
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class represents tasks without any date/time attached to it."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a todo."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param taskName name or details of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Summarises the details and status of \u003ccode\u003ethis\u003c/code\u003e task so that it can be stored."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return a summarised version of \u003ccode\u003ethis\u003c/code\u003e task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String getInfo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"T | %d | %s\", done ? 1 : 0, taskName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an instance of \u003ccode\u003eTask\u003c/code\u003e representing a \u003ccode\u003eTodo\u003c/code\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * when given a string representation of it."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param name name of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e representing the given input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Task stringToTask(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Todo(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a formatted string version of \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return formatted string version of \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return String.format(\"[T][%s] %s\", done ? SYMBOL_COMPLETE : SYMBOL_INCOMPLETE, taskName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Checks whether \u003ccode\u003eObject o\u003c/code\u003e has the same \u003ccode\u003etaskName\u003c/code\u003e as \u003ccode\u003ethis\u003c/code\u003e."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param o \u003ccode\u003eObject\u003c/code\u003e to be compared with \u003ccode\u003ethis\u003c/code\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return boolean indicating whether the two objects are \u0027equal\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (o instanceof Todo) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return this.taskName \u003d\u003d (((Todo) o).taskName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 60
    }
  },
  {
    "path": "src/main/java/duke/tests/in1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "deadline blah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "blah"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "done 5"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 22
    }
  },
  {
    "path": "src/main/java/duke/tests/out1.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [T][✘] read book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [T][✘] join sports club"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [T][✔] read book"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [T][✔] join sports club"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [T][✘] borrow book"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     ☹  OOPS!!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     1. [T][✔] read book"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     2. [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     3. [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     4. [T][✔] join sports club"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     5. [T][✘] borrow book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [D][✘] return book (by: June 6th)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     1. [T][✔] read book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     2. [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     3. [T][✔] join sports club"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     4. [T][✘] borrow book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     ☹  OOPS!!! Please include a time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     ☹  OOPS!!! You have completed task 1 earlier!"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [T][✔] read book"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     1. [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     2. [T][✔] join sports club"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     3. [T][✘] borrow book"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     4. [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     ☹  OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     1. [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     2. [T][✔] join sports club"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     3. [T][✘] borrow book"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     4. [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     5. [E][✘] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "       [E][✔] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     1. [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     2. [T][✔] join sports club"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     3. [T][✘] borrow book"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     4. [D][✘] return book (by: Sunday)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     5. [E][✔] project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    ____________________________________________________________"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 114
    }
  },
  {
    "path": "src/main/java/duke/util/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.CommandType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.command.MarkDoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.EmptyDescriptionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.EventParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.DeadlineParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class gives us a parser which we can use to parse user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int CURRENT_YEAR \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns an \u003ccode\u003eOptional\u003c/code\u003e value. If \u003ccode\u003ecommand\u003c/code\u003e can be successfully parsed,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * the result will contain the requested command; otherwise, it will be \u003ccode\u003eempty\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Command can be executed by using the \u003ccode\u003eexecute\u003c/code\u003e method."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param command user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return \u003ccode\u003eOptional\u003c/code\u003ecommand as specified by user, if parsing is successful; otherwise it is empty"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static Optional\u003cCommand\u003e parse(String command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String[] parsedBySpaceArgs \u003d command.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (parsedBySpaceArgs.length \u003c 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            String commandVerb \u003d parsedBySpaceArgs[0].toUpperCase();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            CommandType commandType;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                commandType \u003d CommandType.valueOf(commandVerb);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                throw new InvalidCommandException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            case BYE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                return Optional.of(new ExitCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            case DELETE:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                int deletedTaskNum \u003d Integer.parseInt(parsedBySpaceArgs[1]) - 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                return Optional.of(new DeleteCommand(deletedTaskNum));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            case DONE:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                int completedTaskNum \u003d Integer.parseInt(parsedBySpaceArgs[1]) - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                return Optional.of(new MarkDoneCommand(completedTaskNum));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            case LIST:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                return Optional.of(new ListCommand());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            case FIND:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                String query \u003d parsedBySpaceArgs[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                return Optional.of(new FindCommand(query));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    if (parsedBySpaceArgs.length \u003c 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                        throw new EmptyDescriptionException(commandType.toString().toLowerCase());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    String taskDetails \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    taskDetails \u003d IntStream.range(1, parsedBySpaceArgs.length)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                            .mapToObj(i -\u003e parsedBySpaceArgs[i])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                            .reduce(\"\", (prev, curr) -\u003e prev + curr + \" \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                            .trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    Task newTask \u003d parseTask(commandType, taskDetails);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    return Optional.of(new AddCommand(newTask));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    throw e;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Ui.showError(e);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseTask(CommandType commandType, String taskDetails) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (commandType.equals(CommandType.TODO)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseTodo(taskDetails);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else if (commandType.equals(CommandType.DEADLINE)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseDeadline(taskDetails);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return parseEvent(taskDetails);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseTodo(String taskDetails) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return new Todo(taskDetails);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseDeadline(String taskDetails) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedDetails \u003d taskDetails.split(\" /by \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(\"Missing \u0027/by \u0027 between name and date/time\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d parsedDetails[0];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String dateTimeStr \u003d parsedDetails[1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTimeInfo \u003d parseDate(dateTimeStr);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new Deadline(name, dateTimeStr, dateTimeInfo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new DeadlineParseException(\"Incorrect date/time format for deadline\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Task parseEvent(String taskDetails) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] parsedDetails \u003d taskDetails.split(\" /at \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (parsedDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Missing \u0027/at \u0027 between name and date/time\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d parsedDetails[0];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String dateTimeInfo \u003d parsedDetails[1];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] dateTimeInfoArr \u003d parsedDetails[1].split(\" \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (dateTimeInfoArr.length \u003c 2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Incomplete date/time info\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String date \u003d dateTimeInfoArr[0];"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] times \u003d dateTimeInfoArr[1].split(\"-\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        if (times.length \u003c 2) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Missing start/end time\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar startTime \u003d parseDate(date + \" \" + times[0]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar endTime \u003d parseDate(date + \" \" + times[1]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return new Event(name, dateTimeInfo, startTime, endTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new EventParseException(\"Incorrect date/time format for deadline\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static Calendar parseDate(String str) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Date date \u003d dateFormatter.parse(str);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        c.setTime(date);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        c.set(Calendar.YEAR, CURRENT_YEAR);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return c;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 157
    }
  },
  {
    "path": "src/main/java/duke/util/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class allows us to update and save any changes in \u003ccode\u003etaskList\u003c/code\u003e to a file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private String path \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a storage which we can use to write and read the file stored at \u003ccode\u003epath\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param path path to file which the user would like to store information from \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @throws LoadException if the file cannot be read and or written to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Storage(String path) throws LoadException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            if (!Files.exists(Paths.get(path))) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                String[] parsedPath \u003d path.split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                // determine dirs path"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                String dirPath \u003d IntStream.range(0, parsedPath.length - 1)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                        .mapToObj(i -\u003e parsedPath[i])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                        .reduce(\"\", (prev, curr) -\u003e prev + curr + \"/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                Files.createDirectories(Paths.get(dirPath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                // create file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                Files.createFile(Paths.get(path));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            throw new LoadException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Returns a \u003ccode\u003eStream\u003c/code\u003e of strings. Each string represents a summarised version of a \u003ccode\u003etask\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @return strings of summarised version of all tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public Stream\u003cString\u003e load() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "           return Files.lines(Paths.get(path));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return Stream.of(\"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Adds \u003ccode\u003etask\u003c/code\u003e to file found at \u003ccode\u003ethis\u003c/code\u003e path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param task task to be added to file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            BufferedWriter w \u003d new BufferedWriter(new FileWriter(path, true));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.write(task.getInfo() + System.lineSeparator());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore since we are sure that we can read and write to file"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Rewrites the entire file to save updates made to \u003ccode\u003etaskList\u003c/code\u003e."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasks summarised string representation of all tasks found in \u003ccode\u003etaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void update(Stream\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            BufferedWriter w \u003d new BufferedWriter(new FileWriter(path));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            tasks.forEach(task -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    w.write(task.getInfo() + System.lineSeparator());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    System.err.println(\"Unable to update storage: \" + e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            w.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // we are certain that we are able to read and write to file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private class LoadException extends IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        public LoadException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        public String getMessage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            return String.format(\"Unable to read/write tasks to hard disk.\\nEntries will not be saved.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 101
    }
  },
  {
    "path": "src/main/java/duke/util/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package duke.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " * This class gives us a user interface."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // for formatting purposes"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String line \u003d \"    ____________________________________________________________\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String prependSpace \u003d \"     \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    // default statements"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String hi \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String bye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String listIntro \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String searchResultsIntro \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Says hi to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void sayHi() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(hi));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Says bye to user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void sayBye() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(bye));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Shows user a list of all tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void showList(String tasksAsString) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(listIntro + \"\\n\" + tasksAsString));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that task is completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param completedTask task which has been successfully marked as done"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void informDone(Task completedTask) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(String.format(\"Nice! I\u0027ve marked this task as done:\\n  %s\\n\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                completedTask)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the task has been deleted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param deletedTask task which has been successfully deleted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksNum number of tasks remaining in the list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void informDeleted(Task deletedTask, int tasksNum) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        // update user"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                deletedTask, tasksNum);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(response));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that the task has been added."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param addedTask task which has been successfully added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param tasksNum number of tasks in the list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void informAdded(Task addedTask, int tasksNum) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String response \u003d String.format(\"Got it. I\u0027ve added this task:\\n  %s\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                        \"Now you have %d tasks in the list.\\n\", addedTask, tasksNum);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(response));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * Informs user that an error has occurred."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     * @param e \u003ccode\u003eException\u003c/code\u003e encountered"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void showError(Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.err.print(formatOutput(\"\\u2639  OOPS!!! \" + e.getMessage()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public static void showSearchResults(String tasksAsString) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        System.out.print(formatOutput(searchResultsIntro + \"\\n\" + tasksAsString));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static String formatOutput(String str) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String accum \u003d line;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String[] allLines \u003d str.split(\"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        accum +\u003d Arrays.stream(allLines)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                .reduce(\"\", (prev, curr) -\u003e prev + prependSpace + curr + \"\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        accum +\u003d line;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        return accum;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 99
    }
  },
  {
    "path": "src/test/java/duke/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static final int YEAR \u003d 2019;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    private static SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"d/M HHmm\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_incompleteTask() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime1.set(YEAR, 9, 28, 23, 59);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"D | 0 | return book | 28/9 2359\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Deadline(\"return book\", \"28/9 2359\", dateTime1)).getInfo());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_completedTask() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime.set(YEAR, 9, 28, 23, 59);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"return book\", \"28/9 2359\", dateTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        deadline.setDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"D | 1 | return book | 28/9 2359\", deadline.getInfo());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void stringToTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d \"read book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String timeInfo \u003d \"29/9 1259\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        dateTime.set(YEAR, 9, 29, 12, 59);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(new Deadline(name, timeInfo, dateTime), Deadline.stringToTask(name, timeInfo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_incompleteTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(\"28/9\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.setTime(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.set(Calendar.YEAR, 2019);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assertEquals(\"[D][\\u2718] return book (by: 28/09/19 11:59PM)\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                    (new Deadline(\"return book\", \"28/9 2359\", dateTime)).toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_completedTask() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Calendar dateTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Date date \u003d dateFormatter.parse(\"28/9\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.setTime(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            dateTime.set(Calendar.YEAR, 2019);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            Deadline deadline \u003d new Deadline(\"return book\", \"28/9 2359\", dateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            deadline.setDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            assertEquals(\"[D][\\u2714] return book (by: 28/09/19 11:59PM)\", deadline.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "            // ignore"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 74
    }
  },
  {
    "path": "src/test/java/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_incompleteTask() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"T | 0 | read book\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Todo(\"read book\")).getInfo());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void getInfo_completedTask() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"T | 1 | read book\", todo.getInfo());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void stringToTask() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        String name \u003d \"read book\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(new Todo(name), Todo.stringToTask(name));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_incompleteTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"[T][\\u2718] read book\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "                (new Todo(\"read book\")).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    public void testToString_completedTask() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        Todo todo \u003d new Todo(\"read book\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        todo.setDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "        assertEquals(\"[T][\\u2714] read book\", todo.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pohlinwei"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pohlinwei": 37
    }
  }
]
