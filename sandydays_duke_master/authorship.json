[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    archiveVersion \u003d \"0.2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 38,
      "-": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "#### 1. Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Duke is a **simple desktop app** designed for those who wish to be able to keep track of and manage their tasks. These tasks could entail deadlines, events, or just todos. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "It is mostly **suited for those who prefer to work with a command-line interface** while still having a **user-friendly GUI** for a chat-like simulation with the Duke chatbot. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Sounds interesting? Get started now!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "#### 2. Quick Start"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Source code can be viewed using an IDE (preferred: IntelliJ)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Run the program by typing in `gradlew build` followed by `gradlew run` command in your terminal."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The Duke application will open."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* Alternatively, you can download the jar file `v0.2 Duke ChatBot` from the releases page of this repo and run that file on your local computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The GUI should appear in a few seconds as below:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "![Duke: One app to manage all your tasks](https://raw.githubusercontent.com/sandydays/duke/master/docs/Ui.png)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "#### 3. Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Command Format |"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "---------------|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Words in `UPPER_CASE` are the parameters to be supplied by the user. Ex: In `deadline DESCRIPTION /by DATE_AND_TIME`, `DESCRIPTION` and `DATE_AND_TIME` are parameters which can be used as `deadline ma2202 hw /by 19/09/2019 1800`. |"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Items in square brackets are optional. Ex: `deadline DESCRIPTION /by DATE_AND_TIME [/every FREQUENCY_IN_DAYS]` can be used as `deadline ma2202 hw /by 19/09/2019 1800 /every 7` or as `deadline ma2202 hw /by 19/09/2019 1800`.|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Parameters need to be in the order given. Ex: If the command specifies `DESCRIPTION /by DATE_AND_TIME`, something like `/by DATE_AND_TIME DESCRIPTION` would be invalid input. |"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.1. Adding a todo: `todo`**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Adds a todo to the list of tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `todo DESCRIPTION [/every FREQUENCY_IN_DAYS]`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `DESCRIPTION` can have spaces between it."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `todo buy groceries`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `todo go to gym /every 7`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.2. Adding a deadline: `deadline`**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Adds a deadline to the list of tasks"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `deadline DESCRIPTION /by DATE_AND_TIME [/every FREQUENCY_IN_DAYS]`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `DESCRIPTION` can have spaces between it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `DATE_AND_TIME` must be in the format `Date/Month/Year Time`, where `Time` is in 24-hour time format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `deadline ma2202 hw /by 19/09/2019 1800`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `deadline ma2202 hw /by 19/09/2019 1800 /every 7`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.3. Adding an event: `event`**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Adds an event to the list of tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `event DESCRIPTION /at DATE_AND_TIME [/every FREQUENCY_IN_DAYS]`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `DESCRIPTION` can have spaces between it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `DATE_AND_TIME` must be in the format `Date/Month/Year Time`, where `Time` is in 24-hour time format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `event dine and dance /at 21/09/2019 2100`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `event dine and dance /at 21/09/2019 2100 /every 14`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.4. Listing all tasks: `list`**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Shows list of all tasks in the task list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.5. Marking a task as done: `done`**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Marks a task as done in the list of tasks"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `INDEX` refers to the index number shown when the list of tasks is displayed. The **index must be a positive integer and is bounded by the size of the list**."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The task list will be updated with the task at the index marked as done."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* When a recurring task is marked done, the same task (with the new date if it is a deadline or event) is added to the task list automatically. It is up to the user to delete the older task marked done."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `done 2`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.5. Deleting a task: `delete`**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Deletes a task from the list of tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `INDEX` refers to the index number shown when the list of tasks is displayed. The **index must be a positive integer and is bounded by the size of the list**."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The task list will be updated with the task at the index deleted and the rest of the tasks indices updated based on the size of the updated list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* To delete a recurring task, the latest version of the task that is not yet marked as done should be deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `delete 2`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.6. Locating tasks by keywords: `find`**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Displays the list of tasks that contain the keyword"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `find KEYWORD`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* The `KEYWORD` can have spaces between it."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* If the `KEYWORD` contains more than one word, a task will be displayed in the list of found tasks only if it contains the full `KEYWORD` with all its words in that sequence."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `find groceries`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* `find buy groceries`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**3.7. Exiting the bot: `bye`**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Exits the Duke application"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Format: `bye`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "#### 4. FAQ"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**Q:** Does the application have support for recurring tasks?  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**A:** Yes it does for all types of tasks (todos, deadlines, and events). You can add these kind of tasks by adding `/every FREQUENCY_BY_DAY` after writing the task details. More information in the features list above."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**Q:** Will the tasks I add to the list be saved by the bot so that I can view it the next time I open the application?  "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "**A:** Yes! Tasks are stored to the memory so the next time you open your application, these tasks are loaded back to continue from!"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": " "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "#### 5. Command Summary"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Add todo** `todo DESCRIPTION [/every FREQUENCY_IN_DAYS]`  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Ex: `todo go to gym /every 7`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Add deadline** `deadline DESCRIPTION /by DATE_AND_TIME [/every FREQUENCY_IN_DAYS]`   "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Ex: `deadline ma2202 hw /by 19/09/2019 1800 /every 7`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Add event** `event DESCRIPTION /at DATE_AND_TIME [/every FREQUENCY_IN_DAYS]`   "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Ex: `event dine and dance /at 21/09/2019 2100 /every 14`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **List tasks** `list`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Mark done** `done INDEX`  "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Ex: `done 2`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Delete task** `delete INDEX`  "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Ex: `delete 2`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Find tasks** `find KEYWORD`  "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "Ex: `find groceries`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "* **Exit application** `bye`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 123,
      "-": 11
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Text dialogText;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        dialogText.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Text t \u003d (Text) getChildren().get(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        t.setTextAlignment(TextAlignment.LEFT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 62
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            stage.getIcons().add(new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            stage.setTitle(\"Duke: One app to manage all your tasks\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().openingMessage(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 36
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void openingMessage(String welcome) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                DialogBox.getDukeDialog(welcome, dukeImage)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            closeWindow();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void closeWindow() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        scrollPane.getScene().getWindow().hide();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 67
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Starts execution of the bot."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this(\"data/tasks.txt\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return ui.getStringToPrint();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 38,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * DukeException class that is thrown when any kind of exception is encountered during file loading, parsing of user"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * input, or execution of the command."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "sandydays": 20
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.ShowCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.UnknownCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.lang.ArrayIndexOutOfBoundsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles parsing of user input to commands so that they can be interpreted by the bot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Parses the user input and returns a specific command type upon interpretation (on a case-by-case basis of the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * user input)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param userInput Command given by user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Sub-class of Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws DukeException if error in parsing certain Add Command subclasses."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    static Command parse(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String[] command \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        switch (command[0]) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new ShowCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int i \u003d Integer.parseInt(command[1]) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new DoneCommand(i);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int j \u003d Integer.parseInt(command[1]) - 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new DeleteCommand(j);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String[] detailsTRecurs \u003d command[1].split(\" /every \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                if (detailsTRecurs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return new TodoCommand(detailsTRecurs[0]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    int freq \u003d Integer.parseInt(detailsTRecurs[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return new TodoCommand(detailsTRecurs[0], freq);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String[] detailsD \u003d command[1].split(\" /by \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String[] detailsDRecurs \u003d detailsD[1].split(\" /every \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                if (detailsDRecurs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return new DeadlineCommand(detailsD[0], detailsDRecurs[0]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    int freq \u003d Integer.parseInt(detailsDRecurs[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return new DeadlineCommand(detailsD[0], detailsDRecurs[0], freq);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The description of the deadline is incomplete.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String[] detailsE \u003d command[1].split(\" /at \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String[] detailsERecurs \u003d detailsE[1].split(\" /every \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                if (detailsERecurs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return new EventCommand(detailsE[0], detailsERecurs[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    int freq \u003d Integer.parseInt(detailsERecurs[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    return new EventCommand(detailsE[0], detailsERecurs[0], freq);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(\"\\u2639 OOPS!!! The description of the event is incomplete.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new FindCommand(command[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 91
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles interactions of the duke bot\u0027s list of tasks and the file that saves these tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Loads file with previously saved list of tasks, if any, or creates a new file in the desired location."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws DukeException If unable to create new file or read from an existing file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public LinkedList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LinkedList\u003cTask\u003e tasks \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        file.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                tasks \u003d readData(file, tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private LinkedList\u003cTask\u003e readData(File file, LinkedList\u003cTask\u003e tasks) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Scanner readFile \u003d new Scanner(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        while (readFile.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String nextTask \u003d readFile.nextLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String[] details \u003d nextTask.split(Pattern.quote(\" | \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            assert details.length \u003d\u003d 4 || details.length \u003d\u003d 5;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String type \u003d details[0];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int freq \u003d Integer.parseInt(details[3]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Task task \u003d new Task(\"dummy task\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (type.equals(\"T\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                task \u003d new Todo(details[2], freq);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                task \u003d new Deadline(details[2], details[4], freq);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                task \u003d new Event(details[2], details[4], freq);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (details[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            tasks.add(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Writes tasks in the taskList to a file in the hard drive that can be retrieved by the user when they use the bot"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * again."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws IOException If unable to write updated taskList to the file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void writeToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String toWrite \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int lastTask \u003d tasks.size() - 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            toWrite +\u003d tasks.get(i).toSave();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (i !\u003d lastTask) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                toWrite +\u003d \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        fw.write(toWrite);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sandydays": 113
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.DateAndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Stores list of tasks and handles changes to this list (such as addition, deletion, modification of tasks) based on"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private LinkedList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.taskList \u003d new LinkedList\u003cTask\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public TaskList(LinkedList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Gets list of tasks stored in this instance of the TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return List of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public LinkedList\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private boolean isValidTaskNum(int taskNum) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean isTooBig \u003d taskNum + 1 \u003e taskList.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean isTooSmall \u003d taskNum + 1 \u003c\u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return isTooBig || isTooSmall;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Marks a certain task as done in the taskList when user inputs done command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param taskNum Task to be marked done."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Task marked done."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws DukeException if the taskNum passed in is not valid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Task markDone(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (isValidTaskNum(taskNum)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! This task does not exist.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Task t \u003d taskList.remove(taskNum);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int freq \u003d t.getFrequency();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        taskList.add(taskNum, t);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert t.getStatusIcon().equals(\"\\u2713\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (freq !\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Task tRecur \u003d new Task(\"dummy task\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (t instanceof Todo) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                tRecur \u003d new Todo(t.getDescription(), freq);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                DateAndTime dt \u003d ((Deadline) t).getDateAndTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String nextDateAndTime \u003d dt.getNext(freq);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                tRecur \u003d new Deadline(t.getDescription(), nextDateAndTime, freq);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else if (t instanceof Event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                DateAndTime dt \u003d ((Event) t).getDateAndTime();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                String nextDateAndTime \u003d dt.getNext(freq);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                tRecur \u003d new Event(t.getDescription(), nextDateAndTime, freq);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                assert false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            taskList.add(tRecur);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Deletes a certain task from the taskList when user inputs delete command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param taskNum Task to be deleted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Task deleted."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws DukeException if the taskNum passed in is not valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Task deleteTask(int taskNum) throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int taskListSize \u003d taskList.size();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (isValidTaskNum(taskNum)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(\"\\u2639 OOPS!!! This task does not exist.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Task t \u003d taskList.remove(taskNum);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert taskList.size() \u003d\u003d taskListSize - 1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Adds a certain task to the taskList when user inputs an add command (more specifically deadline, event, and todo)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param t Task to add."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int taskListSize \u003d taskList.size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert taskList.size() \u003d\u003d taskListSize + 1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public LinkedList\u003cTask\u003e findTasks(String toFind) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int taskListSize \u003d taskList.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LinkedList\u003cTask\u003e result \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        CharSequence cs \u003d toFind;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (int k \u003d 0; k \u003c taskListSize; k++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            Task t \u003d taskList.get(k);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (t.getDescription().contains(cs)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                result.add(t);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                result.add(new Task(\"fake task\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert taskList.size() \u003d\u003d taskListSize;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 135
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles user\u0027s interactions with the bot\u0027s ui, printing appropriate messages when needed to indicate"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * the result of a command typed in by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private String stringToPrint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getStringToPrint() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return stringToPrint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void addNewLine() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint +\u003d \"\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints loading error message if any exception thrown when file with tasks is loaded from storage or created."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d \"\\u2639 OOPS!!! Unable to load file. Try again!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints error message for any error thrown from the parsing or execution of a user command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param error Error message to be printed to screen."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d error;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints exit message before the bot is closed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showExit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints all tasks in the list when user inputs list command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param taskList List of tasks."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LinkedList\u003cTask\u003e tasks \u003d taskList.getTasks();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            result +\u003d (i + 1) + \".\" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert !stringToPrint.equals(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints a modified task if the task\u0027s status has changed (to completed) when the user inputs done command."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param t Changed Task."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showChangedTask(Task t) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d t;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert !stringToPrint.equals(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints a task that was deleted by the user through the delete command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param t Deleted task."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showDeletedTask(Task t) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d t;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d result;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert !stringToPrint.equals(\"\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints number of tasks left in the list once a task has been deleted through the delete command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param tasks List of tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void showNumTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int taskListSize \u003d tasks.getTasks().size();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d \"Now you have \" + taskListSize;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (taskListSize \u003d\u003d 1) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            result +\u003d \" task \";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            result +\u003d \" tasks \";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d \"in the list.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint +\u003d result;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert !stringToPrint.equals(\"\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Prints a task that was added to task list through the commands deadline, event, or todo."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param task Added task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void printAddedTask(Task task) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        result +\u003d task;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        stringToPrint \u003d result;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        addNewLine();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert !stringToPrint.equals(\"\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void printFoundTasks(LinkedList\u003cTask\u003e foundTasks) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (foundTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            stringToPrint \u003d \"No matching tasks found!\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            addNewLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            result +\u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                Task t \u003d foundTasks.get(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                if (!t.getDescription().equals(\"fake task\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                    result +\u003d (i + 1) + \".\" + t + \"\\n\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            stringToPrint \u003d result;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assert !stringToPrint.equals(\"\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 163
    }
  },
  {
    "path": "src/main/java/duke/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles commands that require adding a task to the list of tasks, namely deadline, event, and todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private Task addedTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public AddCommand(Task t) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.addedTask \u003d t;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        tasks.addTask(addedTask);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.printAddedTask(addedTask);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.showNumTasks(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Defines the two basic methods, execute and isExit, that all commands inheriting from this class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * must implement."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Executes a command (based on the command type and the current status of the TaskList, Ui, and Storage)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param tasks List of Tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param ui Ui instance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @param storage Storage instance that holds access to file in hard drive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @throws DukeException If there is a problem in the format of the command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 24
    }
  },
  {
    "path": "src/main/java/duke/command/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles the command to add a deadline to the list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DeadlineCommand(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(new Deadline(description, by));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DeadlineCommand(String description, String by, int freq) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(new Deadline(description, by, freq));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 18
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles command that requires deleting a task from the list of tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DeleteCommand(int taskNum) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Task taskChanged \u003d tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.showDeletedTask(taskChanged);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.showNumTasks(tasks);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 35
    }
  },
  {
    "path": "src/main/java/duke/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles command that marks a task from the list of tasks as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private int taskNum;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DoneCommand(int taskNum) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.taskNum \u003d taskNum;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Task taskChanged \u003d tasks.markDone(taskNum);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.showChangedTask(taskChanged);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 34
    }
  },
  {
    "path": "src/main/java/duke/command/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles the command that requires adding an event to the list of tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class EventCommand extends AddCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public EventCommand(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(new Event(description, at));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public EventCommand(String description, String by, int freq) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(new Event(description, by, freq));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 19
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles the command to exit from the program and close the bot."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            ui.showExit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 24
    }
  },
  {
    "path": "src/main/java/duke/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private String toFind;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public FindCommand(String toFind) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.toFind \u003d toFind;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LinkedList\u003cTask\u003e tasksWithKeyword \u003d tasks.findTasks(toFind);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.printFoundTasks(tasksWithKeyword);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 23
    }
  },
  {
    "path": "src/main/java/duke/command/ShowCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles the command to show the list of all tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        ui.showTasks(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 17
    }
  },
  {
    "path": "src/main/java/duke/command/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles the command to add a todo to the list of tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class TodoCommand extends AddCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public TodoCommand(String command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(new Todo(command));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public TodoCommand(String command, int freq) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(new Todo(command, freq));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 18
    }
  },
  {
    "path": "src/main/java/duke/command/UnknownCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles the command that is not recognised by duke bot."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        throw new DukeException(\"\\u2639 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 18
    }
  },
  {
    "path": "src/main/java/duke/task/DateAndTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Converts dd/mm/yyyy XXXX hours to Date of Month, Year, Time in 12-hour format."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class DateAndTime {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected String dateAndTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int hourNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int minNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected String timeDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected String[] monthMappings \u003d new String[]{\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                                                    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int[] monthToMaxDays \u003d new int[]{0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateAndTime(String dateAndTime) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.dateAndTime \u003d dateAndTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String[] split \u003d dateAndTime.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            String date[] \u003d split[0].split(\"/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.time \u003d split[1];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int hours \u003d Integer.parseInt(this.time) / 100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int mins \u003d Integer.parseInt(this.time) % 100;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int dateToCheck \u003d Integer.parseInt(date[0]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int monthToCheck \u003d Integer.parseInt(date[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            int yearToCheck \u003d Integer.parseInt(date[2]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            validateDate(dateToCheck, monthToCheck, yearToCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            validateTime(hours, mins);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(\"Date and time not in correct format.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void validateDate(int date, int month, int year) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean isDateIncorrect \u003d date \u003e monthToMaxDays[month] || date \u003c\u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean isMonthIncorrect \u003d month \u003c\u003d 0 || month \u003e 12;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        boolean isDateIncorrectForNonLeapYear \u003d (month \u003d\u003d 2) \u0026\u0026 (year % 4 \u003d\u003d 0) \u0026\u0026 (date \u003e 28);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (isDateIncorrect || isMonthIncorrect || isDateIncorrectForNonLeapYear) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(\"Incorrect date entered\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private void validateTime(int hour, int min) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (hour \u003c 12 \u0026\u0026 hour \u003e\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.hourNumber \u003d (hour \u003d\u003d 0) ? 12 : hour;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.timeDay \u003d \"am\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else if (hour \u003c 24 \u0026\u0026 hour \u003e\u003d 12) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.hourNumber \u003d (hour \u003d\u003d 12) ? 12 : hour - 12;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.timeDay \u003d \"pm\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(\"Incorrect time entered\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        if (min \u003c 60 \u0026\u0026 min \u003e\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            this.minNumber \u003d min;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            throw new DukeException(\"Incorrect time entered\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    private String getDateSuffix() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return (date \u003d\u003d 1) ? \"st\" : (date \u003d\u003d 2) ? \"nd\" : (date \u003d\u003d 3) ? \"rd\" : \"th\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getNext(int freq) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int nextDate \u003d date + freq;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int nextMonth \u003d month;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int nextYear \u003d year;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        int diff \u003d nextDate - monthToMaxDays[month];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        while (diff \u003e 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            nextDate \u003d diff;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            nextMonth +\u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            if (nextMonth \u003e 12) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                nextYear +\u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                nextMonth \u003d 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            diff \u003d nextDate - monthToMaxDays[nextMonth];"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return nextDate + \"/\" + nextMonth + \"/\" + nextYear + \" \" + time;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Saves the original dd/mm/yyyy XXXX hours as a string to use when saving these tasks into"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * the hard drive."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return String format in which Date and Time was received in the constructor."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return dateAndTime;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String extra \u003d getDateSuffix();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        String min \u003d String.format(\"%02d\", minNumber);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return date + extra + \" of \" + monthMappings[month] + \" \" + year + \", \" + hourNumber + \":\" + min+ timeDay;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 121
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles a certain type of Task with a description and date and time when deadline will happen."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected DateAndTime by;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Deadline(String description, String by) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.by \u003d new DateAndTime(by);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Deadline(String description, String by, int freq) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(description, freq);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.by \u003d new DateAndTime(by);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateAndTime getDateAndTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"D | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \" + frequency + \" | \" + by.toSave();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles a certain type of Task with a description and date and time when event will happen."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected DateAndTime at;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Event(String description, String at) throws DukeException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.at \u003d new DateAndTime(at);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Event(String description, String by, int freq) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(description, freq);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.at \u003d new DateAndTime(by);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public DateAndTime getDateAndTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"E | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \" + frequency + \" | \" + at.toSave();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 34
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles different types of Tasks, including events, deadlines, and todos."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    protected int frequency;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this(description, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Task(String description, int frequency) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Returns a status icon based on boolean value of isDone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Unicode character check mark if isDone is true, else returns unicode character heavy ballot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Gets the description of this Task\u0027s instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return String description of the Task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Marks this task\u0027s instance as done by toggling the isDone attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public int getFrequency() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return frequency;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * Saves a dummy string (is overridden by subclasses of Task)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     * @return Empty string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sandydays"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 64
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": " * Handles a certain type of Task with only a description."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public Todo(String description, int frequency) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        super(description, frequency);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toSave() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"T | \" + (isDone ? 1 : 0) + \" | \" + description + \" | \" + frequency;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 25
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cText fx:id\u003d\"dialogText\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"RIGHT\" wrappingWidth\u003d\"275.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sandydays": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sandydays": 19
    }
  },
  {
    "path": "src/test/data/tasksTestExpected.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "T | 0 | buy groceries"
      }
    ],
    "authorContributionMap": {
      "sandydays": 1
    }
  },
  {
    "path": "src/test/java/TodoCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.command.TodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class TodoCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    // Since this method returns void, testing it using its side effects"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void executingCommand_todoCommand_success() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // Setting up actual TaskList"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        TaskList t \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Storage s \u003d new Storage(\"data/tasksTest.txt\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        new TodoCommand(\"buy groceries\").execute(t, ui, s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // Setting up expected list of tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        LinkedList\u003cTask\u003e tExpected \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        tExpected.add(new Todo(\"buy groceries\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        // Comparing the list of tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assertEquals(tExpected.get(0).toString(), t.getTasks().get(0).toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 33
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sandydays"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sandydays"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void todoSavingAsString_todo_expectedString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Task t \u003d new Todo(\"buy groceries\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assertEquals(\"T | 0 | buy groceries | 0\", t.toSave());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assertEquals(\"T | 1 | buy groceries | 0\", t.toSave());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    public void todoPrintingAsString_todo_expectedString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        Task t \u003d new Todo(\"buy groceries\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assertEquals(\"[T][\\u2718] buy groceries\", t.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sandydays"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sandydays"
        },
        "content": "        assertEquals(\"[T][\\u2713] buy groceries\", t.toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sandydays"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sandydays"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sandydays": 26
    }
  },
  {
    "path": "src/test/tasksTestExpected.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sandydays"
        },
        "content": "T | 0 | buy groceries"
      }
    ],
    "authorContributionMap": {
      "sandydays": 1
    }
  }
]
