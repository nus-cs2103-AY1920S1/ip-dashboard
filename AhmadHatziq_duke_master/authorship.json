[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\tid \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\ttoolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"seedu.duke.Duke\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "test {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 28,
      "-": 20
    }
  },
  {
    "path": "data/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "event type | isDone | description | extra description"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T | 0 | c"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T | 0 | d"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T | 0 | e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T | 0 | f"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "E | 0 | sleep | sdad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "D | 1 |  | 12th of September 2019, 12.01pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "E | 0 | Sleep | wjekwe"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T | 0 | falcon"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "T | 0 | fresh"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 10
    }
  },
  {
    "path": "src/main/java/seedu/duke/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Add padding between label and image"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        l.setPadding(new Insets(20,50,20,50));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Clips the imageView into a circle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "         Circle clip \u003d new Circle(50,35,35);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "         iv.setClip(clip);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Creates the DialogBox object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Outer border"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        HBox hBox_outer \u003d new HBox();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String style_outer \u003d \"-fx-border-color: black;\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"-fx-border-width: 5;\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        hBox_outer.setStyle(style_outer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        hBox_outer.getChildren().add(iv);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.getChildren().add(hBox_outer);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Sets a padding of 25 above and below the User DialogBox"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setPadding(new Insets(25,0,25,0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Adds background colour to DialogBox."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String style_background \u003d \"-fx-background-color: #f7fac5;\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"-fx-padding: 15;\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"fx-spacing: 10;\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setStyle(style_background);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Add padding between label and image"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        l.setPadding(new Insets(20,50,20,50));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Creates the DialogBox object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Outer border"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        HBox hBox_outer \u003d new HBox();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String style_outer \u003d \"-fx-border-color: black;\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"-fx-border-width:5;\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        hBox_outer.setStyle(style_outer);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        hBox_outer.getChildren().add(iv);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.getChildren().add(hBox_outer);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Sets a padding of 25 above and below the Duke DialogBox"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setPadding(new Insets(25,0,25,0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Adds background colour to DialogBox."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String style_background \u003d \"-fx-background-color: #abffcd;\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"-fx-padding: 15;\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"fx-spacing: 10;\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setStyle(style_background);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "*/"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Sets a padding of 25 above and below the User DialogBox"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setPadding(new Insets(25,0,25,0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Adds background colour to DialogBox."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String style_background \u003d \"-fx-background-color: #f7fac5;\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"-fx-padding: 15;\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"fx-spacing: 10;\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setStyle(style_background);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Adds background colour to DialogBox."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String style_background \u003d \"-fx-background-color: #abffcd;\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"-fx-padding: 15;\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"fx-spacing: 10;\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setStyle(style_background);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Sets a padding of 25 above and below the Duke DialogBox"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.setPadding(new Insets(25,0,25,0));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 186
    }
  },
  {
    "path": "src/main/java/seedu/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Project Duke is a Personal Assistant Chatbot that helps a person to keep track of various things."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * storage attribute is a Storage object, which helps read and write data to the text file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/117.jpg\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/commando.jpg\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Default constructor to support seedu.duke.Launcher of javaFX."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Duke(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String filePath \u003d \"C:\\\\Users\\\\hatzi\\\\Documents\\\\Sourcetree\\\\duke\\\\data\\\\tasks.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Instantiates a Duke object with filePath."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param filePath absolute filepath of the where the text file is stored."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *                 Eg \"C:\\\\Users\\\\hatzi\\\\Documents\\\\Sourcetree\\\\duke\\\\data\\\\tasks.txt\"."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Iteration 1:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param text String containing text to add"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String response \u003d getResponse(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                // new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                // new DialogBox(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                DialogBox.getUserDialog(input, user),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                DialogBox.getDukeDialog(response, duke)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String command \u003d Parser.parseCommand(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Loads the data from txt file to the TaskList object, tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            tasks \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            output \u003d executeTasksGUI(input);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            this.storage.clearFileBeforeSaving();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            for (int i \u003d 0; i \u003c this.tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                this.storage.writeToFile(this.tasks.getTask(i).toSaveString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (IOException e){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Executes the Duke Command Line Interface."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Boolean isBye \u003d false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Loads the data from txt file to the TaskList object, tasks."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            tasks \u003d new TaskList(this.storage.load());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Creates scanner object to handle input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String fullCommand \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        while (isBye \u003d\u003d false) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                isBye \u003d executeTasksCLI(fullCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                ui.showLoadingError(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                System.out.println(e.getCause());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (isBye){"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            fullCommand \u003d in.nextLine().trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Executes the CLI for duke."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand User input string."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean isBye."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws DukeException To catch some invalid commands."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IOException To catch file error when interacting with Storage class."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Boolean executeTasksCLI(String fullCommand) throws DukeException, IOException{"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String taskType \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (taskType.equals(PossibleTasks.LIST.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // LIST command."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            listRoutineCLI(ui, tasks);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.DONE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // DONE command."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            doneRoutineCLI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.TODO.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // TODO command"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            todoRoutineCLI(ui, tasks, fullCommand);;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.DEADLINE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // DEADLINE command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            deadlineRoutineCLI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.EVENT.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // EVENT command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            eventRoutineCLI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.DELETE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // DELETE command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            deleteRoutineCLI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.FIND.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // FIND command"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            findRoutineCLI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.BYE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // BYE command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            byeRoutineCLI(ui, tasks, storage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // An unrecognizable command is detected."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            unknownCommandRoutine();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Executes the Graphical User Interface logic for Duke"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input string obtained from GUI."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Output string from Ui class."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws DukeException "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String executeTasksGUI(String fullCommand) throws DukeException, IOException{"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String taskType \u003d Parser.parseCommand(fullCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (taskType.equals(PossibleTasks.LIST.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // LIST command."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return listRoutineGUI(ui, tasks);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.DONE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // DONE command."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return doneRoutineGUI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.TODO.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // TODO command"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return todoRoutineGUI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.DEADLINE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // DEADLINE command."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return deadlineRoutineGUI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.EVENT.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // EVENT command."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return eventRoutineGUI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.DELETE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // DELETE command."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return deleteRoutineGUI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.FIND.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // FIND command"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return findRoutineGUI(ui, tasks, fullCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (taskType.equals(PossibleTasks.BYE.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // BYE command"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return byeRoutineGUI(ui, tasks, storage);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Exits while loop once \"bye\" is entered."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // An unrecognizable command is detected."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            unknownCommandRoutine();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void unknownCommandRoutine() throws DukeException{"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void listRoutineCLI(Ui ui, TaskList tasks){"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printList(tasks);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String listRoutineGUI(Ui ui, TaskList tasks){"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return ui.getPrintList(tasks);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void byeRoutineCLI(Ui ui, TaskList tasks, Storage storage) throws IOException{"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printByeSequence();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        storage.clearFileBeforeSaving();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Clear the txt file and adds headers."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Saves the task list to the file, following the pre-defined format."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            storage.writeToFile(tasks.getTask(i).toSaveString());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String byeRoutineGUI(Ui ui, TaskList tasks, Storage storage) throws IOException{"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // For GUI, txt file is always saved after each change"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getByeSequence());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void findRoutineCLI(Ui ui, TaskList tasks, String fullCommand){"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Parser will parse the command and obtain the searchString."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // findSimilarTasks will return a TaskList containing only matching tasks."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        TaskList similarTasks \u003d tasks.findSimilarTasks(Parser.getFindTask(fullCommand));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printFoundTasks(similarTasks);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String findRoutineGUI(Ui ui, TaskList tasks, String fullCommand){"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        TaskList similarTasks \u003d tasks.findSimilarTasks(Parser.getFindTask(fullCommand));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getFoundTasks(similarTasks));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void deleteRoutineCLI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int taskNum \u003d Parser.getDeletedTaskNum(fullCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // taskList index (starts from 0) differs from taskNum (starts from 1) by 1."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (taskNum \u003e\u003d tasks.getSize()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // taskNum does not exist."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"Task no. \" + (taskNum + 1) + \" does not exist\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Task taskToDelete \u003d tasks.getTask(taskNum);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printDeleteSequence(tasks, taskToDelete);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskToDelete \u003d null;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String deleteRoutineGUI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int taskNum \u003d Parser.getDeletedTaskNum(fullCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (taskNum \u003e\u003d tasks.getSize()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"Task no. \" + (taskNum + 1) + \" does not exist\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Task taskToDelete \u003d tasks.getTask(taskNum);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.deleteTask(taskNum);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getDeleteSequence(tasks,taskToDelete));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void eventRoutineCLI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if ((fullCommand.length() \u003c 6)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Input is only \"event\"."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand contains only the string \"event\"."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if ((fullCommand.lastIndexOf(\u0027/\u0027) \u003c 1)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || (4 + fullCommand.lastIndexOf(\u0027/\u0027) \u003e fullCommand.length()))  {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand does not contain \u0027/\u0027 char or there are no chars after \"/at\"."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time period of an event cannot be empty.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d Parser.getEventDescription(fullCommand);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String extraDescription \u003d Parser.getEventLocation(fullCommand);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Event newEvent \u003d new Event(description, extraDescription);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.addTask(newEvent);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printEventSequence(tasks, newEvent);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String eventRoutineGUI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if ((fullCommand.length() \u003c 6)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if ((fullCommand.lastIndexOf(\u0027/\u0027) \u003c 1)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || (4 + fullCommand.lastIndexOf(\u0027/\u0027) \u003e fullCommand.length()))  {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time period of an event cannot be empty.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d Parser.getEventDescription(fullCommand);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String extraDescription \u003d Parser.getEventLocation(fullCommand);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Event newEvent \u003d new Event(description, extraDescription);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.addTask(newEvent);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getEventSequence(tasks, newEvent));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void deadlineRoutineCLI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if ((fullCommand.length() \u003c 9)) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand contains only the string \"deadline\"."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if ((fullCommand.lastIndexOf(\u0027/\u0027) \u003c 1)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || (4 + fullCommand.lastIndexOf(\u0027/\u0027) \u003e fullCommand.length()))  {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand does not contain \u0027/\u0027 chars or there are no char after \"/by\"."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time period of an event cannot be empty.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d Parser.getDeadlineDescription(fullCommand);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String extraDescription \u003d Parser.getDeadlineDateTime(fullCommand);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(description, extraDescription);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.addTask(newDeadline);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printDeadlineSequence(tasks, newDeadline);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String deadlineRoutineGUI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if ((fullCommand.length() \u003c 9)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand contains only the string \"deadline\"."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if ((fullCommand.lastIndexOf(\u0027/\u0027) \u003c 1)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                || (4 + fullCommand.lastIndexOf(\u0027/\u0027) \u003e fullCommand.length()))  {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand does not contain \u0027/\u0027 chars or there are no char after \"/by\"."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The time period of an event cannot be empty.\");"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d Parser.getDeadlineDescription(fullCommand);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String extraDescription \u003d Parser.getDeadlineDateTime(fullCommand);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert description !\u003d null : \"Description should not be null\";"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert extraDescription !\u003d null : \"Extra Description should not be null\";"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Deadline newDeadline \u003d new Deadline(description, extraDescription);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.addTask(newDeadline);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getDeadlineSequence(tasks, newDeadline));"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void todoRoutineCLI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (fullCommand.length() \u003c 5) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand contains only the string \"todo\"."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d Parser.getTodoDescription(fullCommand);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Todo newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.addTask(newTodo);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printTodoSequence(tasks, newTodo);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String todoRoutineGUI(Ui ui, TaskList tasks, String fullCommand) throws DukeException{"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (fullCommand.length() \u003c 5) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // fullCommand contains only the string \"todo\"."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d Parser.getTodoDescription(fullCommand);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Todo newTodo \u003d new Todo(description);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.addTask(newTodo);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getTodoSequence(tasks, newTodo));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void doneRoutineCLI(Ui ui, TaskList tasks, String fullCommand){"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int taskNum \u003d Parser.getFinishedTaskNum(fullCommand);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // taskList index (starts from 0) differs from taskNum (starts from 1) by 1,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.getTask(taskNum).setDone();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ui.printDoneSequence(tasks, taskNum);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String doneRoutineGUI(Ui ui, TaskList tasks, String fullCommand){"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int taskNum \u003d Parser.getFinishedTaskNum(fullCommand);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // taskList index (starts from 0) differs from taskNum (starts from 1) by 1,"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskNum--;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        tasks.getTask(taskNum).setDone();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (ui.getDoneSequence(tasks, taskNum));"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Main method to run Duke."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param args Main entry point."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static void main (String args[]) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        new Duke(\"C:\\\\Users\\\\hatzi\\\\Documents\\\\Sourcetree\\\\duke\\\\data\\\\tasks.txt\").run();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * possibleTasks  is an enumeration of the constant, pre-defined, recognizable commands."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    enum PossibleTasks {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        BYE,"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        LIST,"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        DONE,"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        DELETE,"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        EVENT,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        TODO,"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        DEADLINE,"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        FIND"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 482,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/duke/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * DukeException class is a custom Exception class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Current implementation will only construct the String message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param message String that will be printed during exception handling."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 15
    }
  },
  {
    "path": "src/main/java/seedu/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 14
    }
  },
  {
    "path": "src/main/java/seedu/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            duke \u003d new Duke(\"C:\\\\Users\\\\hatzi\\\\Documents\\\\Sourcetree\\\\duke\\\\data\\\\tasks.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 36
    }
  },
  {
    "path": "src/main/java/seedu/duke/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import com.sun.javafx.scene.ImageViewHelper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.DialogBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.Duke;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Controller for seedu.duke.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/117.jpg\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/commando.jpg\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Label inputText \u003d new Label(input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        inputText.setWrapText(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Label responseText \u003d new Label(response);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        responseText.setWrapText(true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 64
    }
  },
  {
    "path": "src/main/java/seedu/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Parser class helps to parse the user string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Default constructor of the Parser class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Parser(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the first word of the string fullCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return First word of a string, delimited by whitespaces, \" \"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String parseCommand(String fullCommand) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.split(\" \")[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the todo task description of a Todo object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Substring from index 5 (whitespace after \"todo\") to end of string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String getTodoDescription(String fullCommand) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.substring(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the deadline task description of a Deadline string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Substring from index 9 (whitespace after \"deadline\") to the \u0027/\u0027 char inside \"/by\"."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String getDeadlineDescription(String fullCommand) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.substring(9, fullCommand.indexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the unparsed DateTime string of a Deadline string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Substring from 4 chars after \u0027/\u0027 in \"/by\"."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String getDeadlineDateTime(String fullCommand) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.substring(4 + fullCommand.indexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the event task description of an Event string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Substring from index 6 (whitespace after \"event\") to the \u0027/\u0027 char inside \"/at\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String getEventDescription(String fullCommand) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.substring(6, fullCommand.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the event location of an Event string."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Substring from 4 chars after \u0027/\u0027 in \"/at\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String getEventLocation(String fullCommand) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.substring(4 + fullCommand.lastIndexOf(\u0027/\u0027)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the specified task number for a \"done\" string command."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Int of the substring from index 5 ( whitespace after \"done\" string)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static int getFinishedTaskNum(String fullCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (Integer.parseInt(fullCommand.substring(5)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the specified task number for a \"delete\" string command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param fullCommand Input of the user, read from Scanner object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Int of the substring from index 7 ( whitespace after \"delete\" string)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static int getDeletedTaskNum(String fullCommand) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (Integer.parseInt(fullCommand.substring(7)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public static String getFindTask(String fullCommand) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (fullCommand.substring(5));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 92
    }
  },
  {
    "path": "src/main/java/seedu/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Storage class is used to read and write data from the text file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * filePath attribute stores the String of the absolute path of the text file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Constructor for the Storage class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param filepath Absolute filepath of the text file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *                 Eg. \"C:\\\\Users\\\\hatzi\\\\Documents\\\\Sourcetree\\\\duke\\\\data\\\\tasks.txt\"."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *  Creates a text file at that location, if the text file does not exist at the specified location."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param filepath Absolute filepath of the text file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IOException An IOException may occur when trying to write the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void createFile(String filepath) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert filepath !\u003d null : \"Filepath should not be null\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String data \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // If the file does not exist, create sa new text file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (f.exists() \u003d\u003d false) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                Files.write(Paths.get(filepath), data.getBytes());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Appends the String text to the text file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param text The text to be appended to the txt file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IOException An IOException may occur when trying to write the file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void writeToFile(String text) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert text.isEmpty() : \"Text to be written should at least have | |\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.getFilePath(), true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        fw.write(text + System.lineSeparator());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Clears and appends headers to the text file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws IOException An IOException may occur when trying to write the file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void clearFileBeforeSaving() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Overwrites text file and adds headers before saving tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.getFilePath(), false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        fw.write(\"event type | isDone | description | extra description\" + System.lineSeparator());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns an ArrayList(Task) from the data loaded from the filePath."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return ArrayList(Task) parsed from text file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @throws FileNotFoundException An FilenotFoundException may occur when if filePath is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Initialises variables to handle the txt input file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cString\u003e inputsFromFile \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String extraDescription \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Creates a scanner object to read the txt file from filePath."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Scanner scanner \u003d new Scanner(new File(getFilePath()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            inputsFromFile.add(scanner.nextLine());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (String input : inputsFromFile) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // A Possible input string is: \"D | 0 | CS2103 Ip  | Wed 2359\"."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            String[] words \u003d input.split(\"\\\\|\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            Boolean isDone \u003d false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            if (words[0].length() \u003c 3) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                // If condition to avoid reading in the header."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                if (words[0].contains(\"T\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    // Create a Todo class."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    if (words[1].contains(\"1\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    } else if (words[1].contains(\"0\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        isDone \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    description \u003d words[2].trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    Todo newTodo \u003d new Todo(description, isDone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    tasks.add(newTodo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                } else if (words[0].contains(\"E\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    // Create an Event class."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    if (words[1].contains(\"1\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    } else if (words[1].contains(\"0\")) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        isDone \u003d false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    description \u003d words[2].trim();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    extraDescription \u003d words[3].trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    Event newEvent \u003d new Event(description, extraDescription, isDone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    tasks.add(newEvent);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                } else if (words[0].contains(\"D\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    // Create a Deadline class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    if (words[1].contains(\"1\")) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        isDone \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    } else if (words[1].contains(\"0\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                        isDone \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    description \u003d words[2].trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    extraDescription \u003d words[3].trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    Deadline newDeadline \u003d new Deadline(description, extraDescription, isDone);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                    tasks.add(newDeadline);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the filePath attribute."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String filePath attribute."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.filepath;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 170
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Deadline class is a subclass of Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Additional attribute is the String dateTime, which holds the dateTime of the Deadline task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    protected String dateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Deadline object after initializing with 2 Strings, description and dateTime."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param dateTime dateTime String of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Deadline(String description, String dateTime) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Sets isDone to the default value, false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Possible String for dateTime \u003d 2/12/2019 1800."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // Sample fullCommand \u003d \"deadline cs /by 21/12/2019 0800\"."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!dateTime.contains(\"of\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Checks if the String has already been formatted."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // If \"of\" is present, this indicated that dateTime has already been formatted."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Main purpose is for creating Deadline objects when reading from saved data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            this.dateTime \u003d parseBy(dateTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Deadline object after initializing with 2 Strings, description and dateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * and Boolean status of the task."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String of the task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param dateTime dateTime String of the task."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param isDone isDone Boolean status of the task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Deadline(String description, String dateTime, Boolean isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!dateTime.contains(\"of\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Checks if the String has already been formatted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // If \"of\" is present, this indicated that dateTime has already been formatted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            // Main purpose is for creating Deadline objects when reading from saved data."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            this.dateTime \u003d parseBy(dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String of the Deadline object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. description \u003d \"Assignment\", dateTime \u003d \"0th of December 2012, 6.42pm\", isDone \u003d false."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parsed String \u003d \"[D][✘] Assignment  (by: 20th of December 2012, 6.42pm)\"."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed String of the Deadline object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateTime + \")\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String, meant for saving, of the Task object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *Eg. description \u003d \"Assignment\", dateTime \u003d \"0th of December 2012, 6.42pm\", isDone \u003d true."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parsed saved String \u003d \"D | 1 | Assignment  | 20th of December 2012, 6.42pm\"."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed string for saving."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (\"D\" + super.toSaveString() + \" | \" + this.dateTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed dateTime String."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * String \"by\" must be of the format DD/MM/YYYY HHHH Eg. \"31/08/2019 1215\"."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Will be converted to \"31st of August 2019, 12.15pm\"."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param by Unparsed dateTime String."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed dateTime String."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String parseBy(String by) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskType \u003d PossibleTaskTypes.DEADLINE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] words \u003d dateTime.split(\"/\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] years \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int day \u003d Integer.parseInt(words[0]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert day \u003e 0 : \"Day should be strictly positive\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert day \u003c 32 : \"Day should be less than 32\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String hour \u003d years[1];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String dayString;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if ((day \u003d\u003d 1) || (day \u003d\u003d 21) || (day \u003d\u003d 31)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            dayString \u003d \"st\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if ((day \u003d\u003d 2) || (day \u003d\u003d 22)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            dayString \u003d \"nd\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if ((day \u003d\u003d 3) || (day \u003d\u003d 23)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            dayString \u003d \"rd\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            dayString \u003d \"th\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String hoursString \u003d hour;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String amOrpm \u003d \"\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (Integer.parseInt(hoursString.substring(0, 2)) \u003c 12) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            amOrpm \u003d \"am\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else if (Integer.parseInt(hoursString.substring(0, 2)) \u003c 24) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            amOrpm \u003d \"pm\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String minuteString \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (Integer.parseInt(hoursString.substring(2)) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            minuteString \u003d \"\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            minuteString \u003d \".\" + hoursString.substring(2);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int hourString \u003d -1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (Integer.parseInt(hoursString.substring(0, 2)) \u003e 12) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            hourString \u003d (Integer.parseInt(hoursString.substring(0, 2)) - 12);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            hourString \u003d Integer.parseInt(hoursString.substring(0, 2));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int year \u003d Integer.parseInt(words[2].split(\" \")[0]);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int month \u003d Integer.parseInt(words[1]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String[] possibleMonths \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                                   \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String monthString \u003d possibleMonths[month - 1];"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (day + dayString + \" of \" + monthString + \" \" + year + \", \" + hourString + minuteString + amOrpm);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 151
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Event class is a subclass of Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Additional attribute is the String location, which holds the venue of the Event task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns an Event object after initializing with 2 Strings; description and location."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param location Location String of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Event(String description, String location) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskType \u003d PossibleTaskTypes.EVENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns an Event object after initializing with 2 Strings; description and location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * and Boolean status of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param location Location String of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param isDone isDone status of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Event(String description, String location, Boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskType \u003d PossibleTaskTypes.EVENT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *  Returns a parsed String of the Event object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *  Eg. description \u003d \"meeting\", location \u003d \"LT19\", isDone \u003d false."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *  Parsed string \u003d \"[E][✘] meeting  (at: LT19)\"."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed String of the Event object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert this.location.isEmpty() : \"Empty location should be handled by Duke Exception during input\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + location + \")\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String, meant for saving, of the Event object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. description \u003d \"meeting\", location \u003d \"LT19\", isDone \u003d false."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parsed saved string \u003d \"E | 0 | meeting  | LT19\"."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed saved String of the Event object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert this.location.isEmpty() : \"Empty location should be handled by Duke Exception during input\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (\"E\" + super.toSaveString() + \" | \" + this.location);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 63
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Task class represents a Task created by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Attribute description holds the Task description."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Attribute isDone holds the status of completion of a task."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Attribute possibleTaskTypes is an enumerated list of the possible task types ie DEFAULT, DEADLINE, EVENT, TODO."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    protected PossibleTaskTypes taskType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Task object after initializing with the String description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * By default, isDone is set to false."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.taskType \u003d PossibleTaskTypes.DEFAULT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Task object after initializing with the String description and isDone status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String of the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param isDone Boolean status of the task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Task(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.taskType \u003d PossibleTaskTypes.DEFAULT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the Task description String."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String containing the task description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert this.description.isEmpty() : \"Empty description should be handled by Duke Exception during input\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a String, which is a tick if isDone is true, or a cross, if isDone is false."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String representation of isDone."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return (\"✓\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            return (\"✘\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        // return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Setter function for setting a Task isDone from false to true."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        if (!this.isDone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String of the Task object, depending on the subclass implementation."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. [T][✘] (Task Description)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (\"[\" + this.getStatusIcon() + \"] \" + this.description);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String, meant for saving, of the Task object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed string for saving."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        int booleanNum \u003d (this.isDone ? 1 : 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (\" | \" + booleanNum + \" | \" + this.description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the state of a Task, if it is a Default type or not."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean status if TaskType is default."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Boolean isDefault() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.taskType.equals(PossibleTaskTypes.DEFAULT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the state of a Task, if it is a Default type or not."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean status if TaskType is default."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Boolean isTodo() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.taskType.equals(PossibleTaskTypes.TODO);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the state of a Task, if it is a Event type or not."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean status if TaskType is Event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Boolean isEvent() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.taskType.equals(PossibleTaskTypes.EVENT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the state of a Task, if it is a Deadline type or not."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Boolean status if TaskType is deadline."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Boolean isDeadline() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.taskType.equals(PossibleTaskTypes.DEADLINE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * An enumeration of the possible task types."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    enum PossibleTaskTypes {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        DEFAULT, DEADLINE, EVENT, TODO"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 143
    }
  },
  {
    "path": "src/main/java/seedu/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Todo class is a subclass of Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Has no additional attributes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Todo object after initializing with the String description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String ot the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        taskType \u003d PossibleTaskTypes.TODO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a Todo object after initializing with the String description and Boolean status of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param description Description String ot the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param isDone isDone status of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Todo(String description, Boolean isDone) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String of the Todo object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. description \u003d \"(Task Description)\", isDone \u003d false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parsed string \u003d \"[T][✘] (Task Description)\"."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed String of the Todo object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert this.description.isEmpty() : \"Empty description should be handled by Duke Exception during input\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns a parsed String, meant for saving, of the Todo object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. description \u003d \"(Task Description)\", isDone \u003d true."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Parsed saved string \u003d \"T | 1 | (Task Description)\"."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Parsed saved string of the Todo object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String toSaveString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (\"T\" + super.toSaveString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 55
    }
  },
  {
    "path": "src/main/java/seedu/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * TaskList class contains the list of Tasks (stored as an ArrayList) and methods to add, delete Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private ArrayList\u003cTask\u003e listOfTasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Constructor for TaskList class. Returns a TaskList object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param taskList An ArrayList of Task objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        this.listOfTasks \u003d taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the number of Task objects currently stored in the list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Number of Task objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return getArrayList().size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the object Task at the specified int index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param i Integer index."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Task object which is located at index i."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Task getTask(int i) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert i \u003e\u003d 0 : \"Task index should be \u003e\u003d 0\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return getArrayList().get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Adds a new Task object into the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param newTask Task object that needs to be added into the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        getArrayList().add(newTask);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Deletes a Task object from a specified index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param i Integer index of where the Task object (to be deleted) is in."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void deleteTask(int i) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assert i \u003e\u003d 0 : \"Task index should be \u003e\u003d 0\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        getArrayList().remove(i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the ArrayList(Task) inside the TaskList object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Is a getter function to get the private attribute, listOfTasks."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return ArrayList(Task) object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public ArrayList\u003cTask\u003e getArrayList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return this.listOfTasks;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns another TaskLIst object which contains Task objects that is similar to the search string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param searchTerm String that needs to be inside the Task description of similar Tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return Tasklist object, which has an ArrayList (Task) that only contains matching Task objects."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public TaskList findSimilarTasks(String searchTerm) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cTask\u003e listOfTasks \u003d this.getArrayList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        List\u003cTask\u003e T \u003d listOfTasks.stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .filter(o -\u003e o.getTaskName().contains(searchTerm))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        Iterator iter \u003d T.iterator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        while(iter.hasNext()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            matchingTasks.add((Task) iter.next());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return new TaskList(matchingTasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 95
    }
  },
  {
    "path": "src/main/java/seedu/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Ui class is responsible of printing UI related Strings, such as the Welcome String."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    private final String underscore \u003d \"    ____________________________________________________________\" + \"\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Default constructor, takes in no arguments."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public Ui(){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the error prompt, along with the associated error message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param e DukeException object, which is a subclass of the Exception class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void showLoadingError(DukeException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Welcome Sequence."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String intro \u003d underscore"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"      Hello! I\u0027m Duke \" + \"\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"      What can I do for you?\" + \"\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + underscore;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(logo + intro);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getWelcome(){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String intro \u003d underscore"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"      Hello! I\u0027m Duke \" + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"      What can I do for you?\" + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + underscore;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (logo + intro);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the list of Task objects from the TaskList object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList class, which contains a list of Task objects."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printList(TaskList tasks) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        output +\u003d getTasksInList(tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getPrintList(TaskList tasks){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        output +\u003d getTasksInList(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Done Sequence, when the user command \"done\" is entered."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList class, which contains a list of Task objects."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param taskNum Integer index of the task which has been selected as \"done\"."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printDoneSequence(TaskList tasks, int taskNum){"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"       [\" + tasks.getTask(taskNum).getStatusIcon() + \"] \" + tasks.getTask(taskNum).getTaskName()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"\\n\" + underscore;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getDoneSequence(TaskList tasks, int taskNum){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"[\" + tasks.getTask(taskNum).getStatusIcon() + \"] \" + tasks.getTask(taskNum).getTaskName()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + \"\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Todo Sequence, when the user command \"Todo\" is entered."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList class, which contains a list of Task objects."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param newTodo Todo class, which has been newly created."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printTodoSequence(TaskList tasks, Todo newTodo) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Got it. I\u0027ve added this task:\\n       \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + newTodo.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getTodoSequence(TaskList tasks, Todo newTodo){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + newTodo.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Deadline sequence, when the user command \"deadline\" is entered."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList class, which contains a list of Task objects."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param newDeadline Deadline class, which has been newly created."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printDeadlineSequence(TaskList tasks, Deadline newDeadline) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Got it. I\u0027ve added this task:\\n       \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + newDeadline.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getDeadlineSequence(TaskList tasks, Deadline newDeadline){"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + newDeadline.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Event sequence, when the user command \"event\" is entered."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList class, which contains a list of Task objects."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param newEvent Event class, which has been newly created."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printEventSequence(TaskList tasks, Event newEvent) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Got it. I\u0027ve added this task:\\n       \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + newEvent.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getEventSequence(TaskList tasks, Event newEvent) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + newEvent.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Delete sequence, when the user command \"delete\" is entered."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList class, which contains a list of Task objects."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param taskToDelete Task class, which will be deleted from the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printDeleteSequence(TaskList tasks, Task taskToDelete) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Noted. I\u0027ve removed this task.\\n       \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + taskToDelete.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getDeleteSequence(TaskList tasks, Task taskToDelete) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Noted. I\u0027ve removed this task.\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + taskToDelete.toString() + getTasksRemainingSequence(tasks.getSize());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Bye sequence, when the user command \"bye\" is entered."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printByeSequence() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"\\n\" + \"     \" + \"Bye. Hope to see you again soon!\" + \"\\n\" + underscore + \"\\n\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.print(output);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getByeSequence() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"\\n\" + \"Bye. Hope to see you again soon!\" + \"\\n\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the Task Remaining Sequence. Is used by previous methods such as printDeleteSequence."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param numOfTaskRemaining Integer number of the number of Task objects in the TaskList class."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String (parsed) of the number of tasks left."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getTasksRemainingSequence(int numOfTaskRemaining) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"\\n     Now you have \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                + numOfTaskRemaining + \" tasks in the list.\\n\" + underscore;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Returns the string containing tasks in a pre-formatted form."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Eg. \"1.[E][✘] Run (at: ERC)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *      2.[D][✓] IPPT (by: 21st of December 2004, 8.15am)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *      3.[E][✓] Lecture (at: LT7A)\"."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @return String of tasks"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getTasksInList(TaskList tasks) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            output +\u003d \"     \" + (i + 1) + \".\" + tasks.getTask(i).toString() + \"\\n\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        output +\u003d underscore;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Prints the tasks which are similar for the \"find\" command."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * @param tasks TaskList object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public void printFoundTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d underscore + \"     Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        output +\u003d getTasksInList(tasks);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    public String getFoundTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        String output \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        output +\u003d getTasksInList(tasks);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        return (output);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 235
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.effect.InnerShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"600.0\" prefWidth\u003d\"498.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" prefHeight\u003d\"747.0\" prefWidth\u003d\"279.0\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"111.0\" layoutX\u003d\"70.0\" layoutY\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" x\u003d\"700.0\" y\u003d\"700.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "      \u003cInnerShadow /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"-2.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" snapToPixel\u003d\"false\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" fillWidth\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"600.0\" prefWidth\u003d\"384.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 23
    }
  },
  {
    "path": "src/test/java/seedu/duke/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * EventTest is used to test the methods in Event Class"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Test how the attributes are initialized when a String description is supplied."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    void initializeAttributes_stringDescription_correctAttributes() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(\"[E][✘] description (at: location)\", new Event(\"description\", \"location\").toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Tests if the parsed saved String matches the method output."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    void saveStringOutput_stringDescription_correctSavedString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(\"E | 0 | description | location\", new Event(\"description\", \"location\").toSaveString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 28
    }
  },
  {
    "path": "src/test/java/seedu/duke/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "package seedu.duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import seedu.duke.task.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * TodoTest is used to test the methods in Todo Class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Test how the attributes are initialized when a String description is supplied."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    void initializeAttributes_stringDescription_correctAttributes(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(\"[T][✘] description\", new Todo(\"description\").toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     * Tests if the parsed saved String matches the method output."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    void saveStringOutput_stringDescription_correctSavedString(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "        assertEquals(\"T | 0 | description\", new Todo(\"description\").toSaveString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 28
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart1.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial Part 1 – Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## JavaFX lifecycle of an application"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Imagine yourself as a director of a play. First you provision the props that you will feature in your play. These can be hand props for your actors to interact with or even set dressings just to liven up the background. You then decide where to layout the props for every scene. With a proper script in hand, you can finally approach a theatre and request for a stage. There on, it’s just a matter of pulling the curtains on your masterpiece."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "![Hierarchy of Objects in JavaFX](assets/JavaFxHierarchy.png)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "A JavaFX application is like a play you are directing. Instead of creating props, you create `Nodes` (`Nodes` are the fundamental building blocks of a JavaFX application), and place them onto a `Scene` (a scene is a graph of `Node`s). Then, you set your `Scene` on a `Stage` provided by JavaFX. When you call `Stage#show()` method, JavaFX renders a window with your `Stage` on it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up Java FX"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are not using Gradle"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Download the [JavaFX 11 SDK](https://gluonhq.com/products/javafx/) and unzip it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Import the `libs` folder from the SDK into your project (note: `JAVAFX_HOME` is the directory in which you have unzipped the JavaFX SDK). "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   `File` \u003e `Project Structure` \u003e `Libraries` \u003e `+` \u003e `Java` \u003e `{JAVAFX_HOME}/lib`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. From `Run` \u003e `Edit Configurations`, add the following line into your `VM options` for each of the `main` classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   `--module-path {JAVAFX_HOME}/lib --add-modules javafx.controls,javafx.fxml`\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g., `--module-path C:/javafx-sdk-11.0.2/lib --add-modules javafx.controls,javafx.fxml`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### If you are using Gradle"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Update your `build.gradle` to include the following lines:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing your first program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "As customary, let’s start off with a simple “Hello World” program. Modify your `Duke` class to extend `javafx.application.Application`. This requires you to override the `Application#start()` method and provide a concrete implementation. Notice that the method signature for `Application#start()` has a parameter `Stage`. This is the _primary stage_ that JavaFX provides."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.setScene(scene); // Setting the stage to show our screen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        stage.show(); // Render the stage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Note how we have created a `Label` to contain the text that we want to show. We then create the `Scene` and set its content. Finally, we set the stage and show it. "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Next, we create another Java class, `seedu.duke.Launcher`, as an entry point to our application."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "The `seedu.duke.Launcher` class is reproduced below in its entirety."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class seedu.duke.Launcher {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Run `seedu.duke.Launcher` and you should see something like this:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "![Hello World](assets/HelloWorld.png) "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! You have created your first GUI application!"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. We mentioned that `Node`s are the fundamental building blocks of JavaFX and used a `Label` as our root node in the HelloWorld application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What are some of the other types of `Node`s?"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   1. How does JavaFX group them?"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Node`s can be interacted with like Plain Old Java Objects (POJO)."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "   1. What properties of a `Label` can you change programmatically?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try changing the `Label` to have a font of Arial at size 50."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. You’ve learnt that a `Stage` can be thought of as a window. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Can you have more than one `Stage` an application?"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Try creating another stage and showing it! What happens?"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 4,
      "-": 106
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "**seedu.duke.MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"seedu.duke.MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/seedu.duke.MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "   ![SceneBuilder opening seedu.duke.MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `seedu.duke.MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "   ![Controller for seedu.duke.MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Let\u0027s implement the `seedu.duke.MainWindow` controller class that we specified in `seedu.duke.MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "**seedu.duke.MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": " * Controller for seedu.duke.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "public class seedu.duke.MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Notice how in `seedu.duke.MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `seedu.duke.MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/seedu.duke.MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            fxmlLoader.\u003cseedu.duke.MainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(seedu.duke.MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "The last change that we have to make is to point our `seedu.duke.Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "In `seedu.duke.Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. Convert `seedu.duke.MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "AhmadHatziq"
        },
        "content": "1. Extend `seedu.duke.MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "AhmadHatziq": 19,
      "-": 275
    }
  }
]
