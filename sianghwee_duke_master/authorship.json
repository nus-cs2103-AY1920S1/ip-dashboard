[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "# DUKE"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "[![Build Status](https://travis-ci.com/sianghwee/duke.svg?branch\u003dmaster)](https://travis-ci.com/sianghwee/duke)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "## Tutorials "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "## Feedback, Bug Reports"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7,
      "-": 36
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    mainClassName \u003d \"duke.driver.Launcher\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "test {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 29,
      "-": 15
    }
  },
  {
    "path": "src/main/java/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent a command to add a task to the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class AddCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a command to add the task specified in the parameter to the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param task the new task to be added"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Execute the command and add the task. Takes in a tasklist to which the task"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * will be added, a ui which will output the message and a storage which writes"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * the task to a file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tasks.addTask(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.addMessage(task, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 38
    }
  },
  {
    "path": "src/main/java/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ByeCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Leaves the program upon execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string with the message when the program finishes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws DukeException throw a DukeException if it faces any issues"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.byeMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Method to verify if it is an exit command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value that returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 31
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An interface for all commands. Contains the execute method which needs to be"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * implemented by the individual classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public interface Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * The execute method which needs to be implemented by the classes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * A default method to check if a command is an exit command. By default, it"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * returns false as most of the commands are not exit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a boolean value of false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public default boolean isExit() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 31
    }
  },
  {
    "path": "src/main/java/CorruptedData.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class CorruptedData extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String data;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Create a new CorruptedData object. It contains the string representation of"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * the data that is corrupted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param data a string representation of the data that is taken in by the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *             loading of the db file"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public CorruptedData(String data) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the message that is printed out when the excpetion is met."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation that the data is corrupted"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return String.format(\"This data (%s) is corrupted. Skipping...\", data);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 25
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.MissingPreposition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent a deadline object to be created. Extends from the Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a deadline object. The description should be in the form (description"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * /by time) for the object to be created correctly. The deadline can be given"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * in text or given in dd/mm/yyyy hhmm to be recognized as a DukeDate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param deadline    the time in which the task needs to be completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws MissingPreposition if time does not contain a preposition by"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Deadline(String description, String deadline) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] temp \u003d deadline.split(\" \", 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            deadline \u003d temp[0] + \": \" + temp[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new MissingPreposition(\"deadline\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the deadline object to a text format. Allows the object to be saved"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * more easily in a text file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a text representing the object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"D|\" + super.toText() + \"|\" + String.join(\" \", this.deadline.split(\": \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Express the deadline object in its string representation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representing the object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"[D]\" + super.toString() + String.format(\"(%s)\", this.deadline);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 50
    }
  },
  {
    "path": "src/main/java/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a command to delete a task from the list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a command to delete the specified task from the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index integer value of the task index in the list"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Execute the command and delete the task. Takes in a tasklist to which the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * task will be deleted, a ui which will output the message and a storage which"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * remove the task from the file"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task t \u003d tasks.removeTask(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.deleteMessage(t, tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 38
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An example of a custom control using FXML. This control represents a dialog"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(duke.ui.MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * right."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Outputs the dialog box for the Duke\u0027s response."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param text a string representation of the Duke\u0027s response"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param img  a image to represent the Duke"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a dialog box where the image is on the left and the response on the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *         right"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 70
    }
  },
  {
    "path": "src/main/java/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent a command to mark a task as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DoneCommand implements Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a command to mark the task specified as done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index an integer value of the index of the task in the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Execute the command and mark the task as done. Takes in a tasklist to which"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * the task will be mark as done, a ui which will output the message and a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * storage which updates the task in the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task t \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        t.doneTask();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.updateMessage(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 40
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.driver;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a instance of Duke which is the main driver of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this(\"test.txt\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates the Duke object which has a db file tagged to it."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param filename the filename of the file to be referenced to"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Duke(String filename) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage \u003d new Storage(filename);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Runs the program."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ui.welcome();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String fullCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while (ui.hasNext() \u0026\u0026 !(fullCommand \u003d ui.readCommand()).equals(\"bye\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                System.out.println(c.execute(tasks, ui, storage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                ui.errorMessage(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            ui.printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ui.byeMessage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * The main driver of the program. Takes in the file to be referenced as a"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * command line argument. If no file is given, then the default file \"test.txt\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * is used."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param args command line arguments that could include the filename of the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *             file to be used"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (args.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            new Duke().run();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            new Duke(args[0]).run();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String getResponse(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return ui.errorMessage(e);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 80,
      "-": 1
    }
  },
  {
    "path": "src/main/java/DukeDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a date that can be recognized by the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class DukeDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String dateString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a DukeDate object by taking in a string of format dd/mm/yyyy hhmm."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param dateString a string of the format dd/mm/yyyy hhmm"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public DukeDate(String dateString) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.dateString \u003d dateString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String getMonth(int month) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return new DateFormatSymbols().getMonths()[month - 1];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String getDate(int date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (date % 10) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"st\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"nd\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"rd\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"th\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return date + output;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String getTime(int time) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String output;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (time \u003e\u003d 1200) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"pm\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"am\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (time \u003c 100) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d String.format(\"12.%02d\", time) + output;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (time \u003e 1300) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                time \u003d time - 1200;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d String.format(\"%d.%02d\", (time / 100), (time % 100)) + output;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the date object as a string object in the form (date of month year,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * hour min)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] dateComponent \u003d dateString.split(\"/| \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int date \u003d Integer.parseInt(dateComponent[0]);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int month \u003d Integer.parseInt(dateComponent[1]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String year \u003d dateComponent[2];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int time \u003d Integer.parseInt(dateComponent[3]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return String.format(\"%s of %s %s, %s\", getDate(date), getMonth(month), year, getTime(time));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 76
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An abstract class as a general DukeException."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7
    }
  },
  {
    "path": "src/main/java/ErrorCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent a command to show errors in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ErrorCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private DukeException exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a command with the error to be handled."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param e a DukeException that is to be handled"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ErrorCommand(DukeException e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.exception \u003d e;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Executes the command and display the error message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.errorMessage(exception);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 33
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.MissingPreposition;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent an Event that can be added to the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates an event with the specified description and time."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param time        the time of the event either in plain text or dd/mm/yyyy"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *                    hhmm"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @throws MissingPreposition if time does not contain a preposition at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Event(String description, String time) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] temp \u003d time.split(\" \", 2);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            time \u003d temp[0] + \": \" + temp[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            this.time \u003d time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new MissingPreposition(\"event\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the event object to a text format. Allows the object to be saved"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * more easily in a text file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation of the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"E|\" + super.toText() + \"|\" + String.join(\" \", this.time.split(\": \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Express the event object in its string representation."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representing the object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"[E]\" + super.toString() + String.format(\"(%s)\", this.time);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 49
    }
  },
  {
    "path": "src/main/java/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class FindCommand implements Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String search;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FindCommand(String search) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.search \u003d search;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.searchMessage(tasks.find(search));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 18
    }
  },
  {
    "path": "src/main/java/FindPair.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class FindPair {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean found;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public FindPair(Task task, boolean found) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.found \u003d found;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean isFound() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.found;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Task getTask() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 19
    }
  },
  {
    "path": "src/main/java/InsufficientArgument.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An exception that is thrown when the command requires more arguments than was"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * provided by the user."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class InsufficientArgument extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the message that is printed out when the excpetion is met."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation that more detail is needed"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"OOPS!!! I need more than this.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 17
    }
  },
  {
    "path": "src/main/java/InvalidArgument.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class InvalidArgument extends DukeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"OOPS!!! Invalid argument\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7
    }
  },
  {
    "path": "src/main/java/InvalidCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An exception that is thrown when the command is not recognized."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class InvalidCommand extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the message that is printed out when the excpetion is met."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation that the command is unclear"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 16
    }
  },
  {
    "path": "src/main/java/InvalidDescription.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An exception that is thrown when the description is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class InvalidDescription extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a new exception that the description is invalid. Takes in the command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * that was used so that the user is clear that this command requires a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * description"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param command the command that was entered by the user"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public InvalidDescription(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the message that is printed out when the excpetion is met."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation that the description cannot be empty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return String.format(\"OOPS!!! The description of a %s cannot be empty.\", command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 28
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.driver;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 13
    }
  },
  {
    "path": "src/main/java/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent a command to list all the tasks in the list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ListCommand implements Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Execute the command and list all the task. Takes in a tasklist to which the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * task will be referenced, a ui which will output the message and a storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * which writes the task to a file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.printList(tasks);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 25
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.driver.Duke;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 33
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.driver.Duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Duke\u0027s reply and then appends them to the dialog container. Clears the user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * input after processing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (input.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 58
    }
  },
  {
    "path": "src/main/java/MissingPreposition.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * An exception that is thrown when the a preposition is required but is not"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * given."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class MissingPreposition extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a new exception that the command requires a preposition. Takes in the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * command that was used so that the user is clear that this command requires a"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * preposition"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param command the command that was entered by the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public MissingPreposition(String command) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the message that is printed out when the excpetion is met."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation that the command requires a preposition"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return String.format(\"Oops!! %s requires a preposition for the time.\", command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 30
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.PriorityCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.date.DukeDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InsufficientArgument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents a parser class that is able to parse the string commands into"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * actual commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Process a string command and return back a command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param fullCommand the full command that the user inputs in string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a command which could be executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public static Command parse(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] split \u003d fullCommand.split(\" \", 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] desc;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assert split.length !\u003d 0 : \"Empty command\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (split[0].toLowerCase()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DeleteCommand(Integer.parseInt(split[1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new DoneCommand(Integer.parseInt(split[1]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new AddCommand(new Todo(split[1]));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            desc \u003d splitDescription(split[1]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new AddCommand(new Event(desc[0], desc[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            desc \u003d splitDescription(split[1]);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new AddCommand(new Deadline(desc[0], desc[1]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new FindCommand(split[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            verifyDescription(split, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            desc \u003d splitDescription(split[1]);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new PriorityCommand(Integer.parseInt(desc[0].strip()), desc[1]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InvalidCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static String[] splitDescription(String description) throws InsufficientArgument {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] split \u003d description.split(\"/\", 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InsufficientArgument();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (split[1].split(\" |/\").length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String[] temp \u003d split[1].split(\" \", 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            DukeDate dd \u003d new DukeDate(temp[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            temp[1] \u003d dd.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            split[1] \u003d String.join(\" \", temp);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assert split.length \u003c 2 : \"Split function incorrect\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return split;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static void verifyDescription(String[] description, int size) throws InsufficientArgument {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (description.length \u003c size) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InsufficientArgument();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 91
    }
  },
  {
    "path": "src/main/java/PriorityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class PriorityCommand implements Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public PriorityCommand(int index, String priority) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Execute the command and update the task priority. Takes in a tasklist to which"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * the task will be updated, a ui which will output the message and a"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * storage which updates the task in the file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param tasks   a tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param ui      a ui which will output the message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param storage a storage object which will write to the file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task t \u003d tasks.getTask(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (priority.toLowerCase()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            t.setHighPriority();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            t.setMedPriority();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            t.setLowPriority();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InvalidArgument();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        storage.write(tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return ui.updatePriorityMessage(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 47
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.CorruptedData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/** Represents the storage class that is used to read and write from a file. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private File dbFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Create a storage object to read and write from the specified file. If the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * directory is not found, the dirctory will be created. If the specified file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * is not found, an empty file will be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param filename the filename of the file to read from and write to"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Storage(String filename) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String currDirPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // Creates a new directory to store all the files if it does not exist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String dbDirPath \u003d currDirPath + \"/db\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        File dbDir \u003d new File(dbDirPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (!dbDir.exists()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            dbDir.mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assert dbDir.exists() : \"Directory missing\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        // Creates a new text file within the database directory if it does not exist"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        File dbFile \u003d new File(dbDir, filename);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            dbFile.createNewFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.dbFile \u003d dbFile;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Loads the data from the database file into a ArrayList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ArrayList of tasks containing all the data converted to tasks"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cTask\u003e load() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ArrayList\u003cTask\u003e db \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            BufferedReader readData \u003d new BufferedReader(new FileReader(dbFile));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            fillList(db, readData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            readData.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            db \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            db \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private void fillList(ArrayList\u003cTask\u003e db, BufferedReader reader) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        while ((input \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                db.add(textToTask(input));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                // prints out to console if a data point is corrupted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                System.out.println(ui.errorMessage(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Writes the data from a tasklist to the file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param db the tasklist containing all the existing tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void write(TaskList db) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            BufferedWriter writeData \u003d new BufferedWriter(new FileWriter(dbFile));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            for (Task t : db.getList()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                writeData.write(t.toText());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                writeData.newLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            writeData.flush();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            writeData.close();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private static Task textToTask(String text) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String[] textComponent \u003d text.split(\"\\\\|\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (textComponent[0]) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            newTask \u003d new Todo(textComponent[3]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            newTask \u003d new Deadline(textComponent[3], textComponent[4]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            newTask \u003d new Event(textComponent[3], textComponent[4]);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new CorruptedData(text);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (textComponent[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            newTask.doneTask();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (textComponent[2]) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"L\": newTask.setLowPriority();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case \"H\": newTask.setHighPriority();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default: newTask.setMedPriority();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 137
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidDescription;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents the abstract class of Tasks which are used to represent different"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    enum Priority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        HIGH, MEDIUM, LOW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private boolean done;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a task object with the supplied description. By default, the task is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * marked as undone."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param description string representation of the task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Task(String description) throws InvalidDescription {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.description \u003d description.strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (this.description.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InvalidDescription(this.getClass().getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Marks a task as done."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void doneTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.done \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setHighPriority() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setLowPriority() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.priority \u003d Priority.LOW;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void setMedPriority() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the task object to a text format. Allows the object to be saved more"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * easily in a text file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a text representation of the task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String output \u003d \"0\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"1\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        output +\u003d \"|\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output +\u003d \"L\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output +\u003d \"M\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output +\u003d \"H\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // no default as all cases are taken care of within the enum"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return output + \"|\" + this.description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Express the task object in its string representation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representing the object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String output \u003d \"[X]\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output \u003d \"[O]\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case LOW:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output +\u003d \"[L]\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case MEDIUM:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output +\u003d \"[M]\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        case HIGH:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            output +\u003d \"[H]\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            // no default as all cases are taken care of within the enum"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return output + \" \" + this.description;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 112
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents the TaskList object. Contains method to add, remove and mark a"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * task within the tasklist as done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private ArrayList\u003cTask\u003e tasklist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a tasklist object that contains all the tasks in an ArrayList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param list an ArrayList with all the tasks normally generated from the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     *             storage file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.tasklist \u003d list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the list of all the tasks within the tasklist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an ArrayList of all the tasks within the tasklist"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return this.tasklist;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Adds a task to the tasklist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param task the task to be added to the tasklist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        tasklist.add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Removes a task from the tasklist based on its index and return that task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index an integer value of the index of the task to be removed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the task that was removed from the task list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Task removeTask(int index) throws InvalidArgument {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return tasklist.remove(index - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InvalidArgument();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Retrieves a task from the tasklist based on its index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param index an integer value of the index of the task to be retrieved"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return the task that was specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Task getTask(int index) throws InvalidArgument {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return tasklist.get(index - 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            throw new InvalidArgument();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Returns the number of task within the task list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return an integer value of the number of task within the list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return tasklist.size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Find tasks based on their description."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param search the string to search for among the description"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public ArrayList\u003cFindPair\u003e find(String search) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        ArrayList\u003cFindPair\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Task t : tasklist) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            FindPair temp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (t.toString().contains(search)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                temp \u003d new FindPair(t, true);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                temp \u003d new FindPair(t, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            result.add(temp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 97
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represents the todo object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a todo object with the supplied description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param description string representation of the task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Todo(String description) throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Converts the todo object to a text format. Allows the object to be saved more"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * easily in a text file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a text representation of the todo object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toText() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"T|\" + super.toText();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Express the todo object in its string representation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representing the object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 37
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.FindPair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * Represent the Ui object that is used for the user interaction i.e. the input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " * and the output from the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Creates a Ui object and initialize the scanner."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints a horizontal line."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        System.out.println(\"\\t\" + line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the welcome message between two horizontal lines."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void welcome() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.printLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        System.out.println(\"\\t Hello, I\u0027m Duke!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        System.out.println(\"\\t What can I do for you?\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        this.printLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the list of tasks within a tasklist."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param db the tasklist which contains all the tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String printList(TaskList db) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        if (db.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            return \"\\t You have no tasks in your list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (Task task : db.getList()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            String output \u003d String.format(\"\\t %d. %s\\n\", index, task.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            result.append(output);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Reads the command from the user input and return it to the parser."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string containing all the user\u0027s command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Checks if there is a next line for file inputs."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return true if there is a next value, else false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return sc.hasNext();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Print the message when a task is deleted from the task list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param task the task that is deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param db   the tasklist where the task is deleted from"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String deleteMessage(Task task, TaskList db) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t Noted. I\u0027ve removed this task:\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(String.format(\"\\t Now you have %d tasks in your list\\n\", db.size()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the message when a task is marked as done."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param task the task that is to be mark as done"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String updateMessage(Task task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t Nice! I\u0027ve marked this task as done:\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the message when a task is added to the tasklist."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param task the task that is to be added to the tasklist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param db   the tasklist that contains all the tasks"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String addMessage(Task task, TaskList db) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t  \" + task + \"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(String.format(\"\\t Now you have %d tasks in your list\\n\", db.size()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the error message when an exception is faced."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param e the exception that is faced"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String errorMessage(DukeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return (\"\\t \" + e.toString() + \"\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the bye message when the user leaves the program between two line."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String byeMessage() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return (\"\\t Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the message when the tasks are found."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param db the list which the tasks are to be searched from"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String searchMessage(ArrayList\u003cFindPair\u003e db) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t Here are the matching tasks in your list:\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        for (FindPair temp : db) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            if (temp.isFound()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                Task task \u003d temp.getTask();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                String output \u003d String.format(\"\\t %d. %s\\n\", index, task.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "                result.append(output);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * Prints the message when a task priority is updated."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @param task the task that has its priority updated"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     * @return a string representation of the message to be printed"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public String updatePriorityMessage(Task task) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(String.format(\"\\t Nice! I\u0027ve marked this task as %s priority:\\n\", task.getPriority()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        result.append(\"\\t  \" + task.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 169
    }
  },
  {
    "path": "src/main/java/db/test.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "D|0|return book|by June 6th"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "E|0|project meeting|at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "T|1|join sports club"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "T|0|borrow book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "D|0|return book |by Sunday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "E|0|project meeting |at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "D|0|return book |by 2/12/2019"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 7
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 19
    }
  },
  {
    "path": "src/test/java/ExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InsufficientArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.InvalidDescription;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.MissingPreposition;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ExceptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testInsufficientArgument() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"OOPS!!! I need more than this.\", new InsufficientArgument().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testInvalidCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\", new InvalidCommand().toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testInvalidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"OOPS!!! The description of a test cannot be empty.\", new InvalidDescription(\"test\").toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testMissingPreposition() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"Oops!! test requires a preposition for the time.\", new MissingPreposition(\"test\").toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 31
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.AddCommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.DeleteCommand;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.DoneCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testListCommand() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(Parser.parse(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(Parser.parse(\"todo test\") instanceof AddCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testDeleteCommand() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testDoneCommand() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertTrue(Parser.parse(\"done 1\") instanceof DoneCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testErrorCommand() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "            Parser.parse(\"hi\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 40
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testDone() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        Task test \u003d new Todo(\"test\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        test.doneTask();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"[T][O][M] test\", test.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 15
    }
  },
  {
    "path": "src/test/java/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testToString() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"[T][X][M] test\", new Todo(\"test\").toString());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sianghwee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    public void testToText() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "        assertEquals(\"T|0|M|test\", new Todo(\"test\").toText());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sianghwee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sianghwee": 18
    }
  }
]
