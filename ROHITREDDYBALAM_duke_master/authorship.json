[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    testImplementation(\u0027org.junit.jupiter:junit-jupiter-api:5.4.2\u0027)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    testRuntime(\u0027org.junit.jupiter:junit-jupiter-engine:5.4.2\u0027)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    mainClassName \u003d \"Launcher\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 22,
      "-": 12
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Inherits from the Task class and contains information about the Deadline tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private String byDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates a deadline task with description, deadline and status (done or not done) ."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param by the deadline for the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param b the status of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Deadline(String description, String by, boolean b) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.byDate \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //used while loading data from file to update the status of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.isDone \u003d b;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.byDate \u003d by;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Method to display the information in the required form."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return the description of the task with a prefix D indicating the nature of task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + byDate + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 36
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains information related to JavaFX dialog box."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Flips the position of user and Duke profile pictures."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 52
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Represents the personal assistant and contains JavaFX details for the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private TaskList list;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates a duke object which stores data in the specified path ."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Duke() throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        list \u003d new TaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        storage \u003d new Storage(\"data/Duke.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        // file contains user data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        File file \u003d new File(\"data/Duke.txt\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //read and load the existing data into the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        list.readDataFromFile(file,parser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Contains the JavaFX elements\u0027 details."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param stage the stage where the scene of the application is set."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            userInput.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                handleUserInput();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Method to get responses and queries in the form of a label."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param text the string to be displayed in the label"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return label consisting of required data"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return textToAdd;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void handleUserInput() throws IOException, ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String dukeText \u003d getResponse(userInput.getText());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String response \u003d parser.readUserCommand(dukeText,ui,list,storage);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Label dukeResponse \u003d new Label(response);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Label welcomeText \u003d new Label(ui.greet());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                DialogBox.getDukeDialog(dukeResponse, new ImageView(duke))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        );"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static void main(String[] args) throws IOException, ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Scanner scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String command \u003d scan.nextLine();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Duke d \u003d new Duke();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String output \u003d d.parser.readUserCommand(command,d.ui,d.list,d.storage);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 167,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains exceptions specific to Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 11
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Inherits from the Task class and contains information about the Event tasks."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    private Date onDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates a event task with description, event time and status (done or not done) ."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param on time of the event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param b status of the event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Event(String description, Date on, boolean b) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.onDate \u003d on;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.isDone \u003d b;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Event(String description, Date on) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.onDate \u003d on;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Method to display information in the required format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return the description of the event along with time and prefix E to indicate the nature of the event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"E, MMM dd yyyy HH:mm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + df.format(onDate) + \")\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 41
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * A launcher class to work around classpath issues"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 11
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Represents the class used to read data from the file and process it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Contains the methods to read the input and process it into the form required for the algorithm."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param userInput The information to be read and processed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param tasks The list where the information is stored after being processed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException If date for event is not in the specified format i.e. MM/dd/yyyy HH:mm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void readTask(String userInput, TaskList tasks) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        DateFormat df \u003d new SimpleDateFormat(\"E, MMM dd yyyy HH:mm\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert userInput.length() \u003e 0 : \"Enter something\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        //T stands for to do type of tasks, E stands for event and D stands for deadline tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (userInput.contains(\"[T]\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            //verify the status of the task before loading into task list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (userInput.contains(\"[\" + \"1\" + \"]\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "             //if task is already done, instantiate with true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                tasks.add(new ToDo(userInput.substring(7), true));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                tasks.add(new ToDo(userInput.substring(7)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (userInput.contains(\"[E]\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int start \u003d userInput.indexOf(\u0027(\u0027);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String event \u003d userInput.substring(7, start - 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            //every event task is associated with a date and time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String date \u003d userInput.substring(start + 5, start + 27);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Date at \u003d df.parse(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (userInput.contains(\"[\" + \"1\" + \"]\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                tasks.add(new Event(event, at, true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                tasks.add(new Event(event, at));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int sl \u003d userInput.indexOf(\u0027(\u0027);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String d \u003d userInput.substring(7, sl - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int sec \u003d userInput.indexOf(\u0027)\u0027);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String by \u003d userInput.substring(sl + 5, sec);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (userInput.contains(\"[\" + \"1\" + \"]\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                tasks.add(new Deadline(d, by, true));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                tasks.add(new Deadline(d, by));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Method to read and process user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param ui      the UI of the Duke object that interacts with the user"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param list    the task list of the Duke object which stores the tasks"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param storage the object responsible for reading file data and saving data to file when user exits"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws IOException    if File not found or other input output exceptions"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if thee data for event type of tasks not in the specified format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String readUserCommand(String command, Ui ui, TaskList list, Storage storage) throws IOException, ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert command.length() \u003e 0 : \"Please enter something\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d ui.exit();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            // returns all the tasks in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.getList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int numberToBeMarked \u003d Integer.parseInt(command.substring(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.markAsDone(numberToBeMarked - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String eventGiven \u003d command.substring(6);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            //reads and stores the event in the list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.readEvent(eventGiven);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String deadlineGiven \u003d command.substring(9);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.readDeadline(deadlineGiven);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String todoDetails \u003d command.substring(5);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.readTodo(todoDetails);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int numberToBeDeleted \u003d Integer.parseInt(command.substring(7));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.deleteTask(numberToBeDeleted);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String requiredWord \u003d command.substring(5);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.find(requiredWord);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else if (command.startsWith(\"archive\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int taskToBeArchived \u003d Integer.parseInt(command.substring(8));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d list.archiveTask(taskToBeArchived);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d (\" OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String writeDataToFile \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        for (Task t : list.taskList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            writeDataToFile \u003d writeDataToFile + t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        storage.writeFile(writeDataToFile,storage.filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 112
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains the method to update data to the file when the user exits."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates a storage object with a specified file path."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "      * @param filePath the absolute path of the file which stores user data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Writes data to the file when user exits."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "      * @param content the information to be updated"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *  @param  filePath file where data is to be stored"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws IOException if file not found, insufficient disk space and other failed input output operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void writeFile(String content,String filePath) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        fw.write(content);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 33
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains the information and methods of a task object."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Task(String description, boolean b) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.isDone \u003d b;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Method to get the status of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return an icon to indicate the status of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return (isDone ? \"1\" : \"0\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Changes the task status as done."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Method to display information in the required format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return the description of the task along with the status icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 44
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains the methods to execute user\u0027s commands and store the information while the program runs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Adds the task to the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *  @param t the task to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected void add(Task t) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Prints the addition of a task and number of tasks in the list after addition."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String addMessage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (taskList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return \" Got it. I\u0027ve added this task: \\n\" + taskList.get(taskList.size() - 1) + \"\\n\" + \"Now you have 1 task in your list.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return \" Got it. I\u0027ve added this task: \\n\" + taskList.get(taskList.size() - 1) + \"\\n\" + \"Now you have \" + taskList.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Marks the task as done upon user\u0027s request and prints the message upon successful completion."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param x the position of the task in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String markAsDone(int x) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert x \u003c taskList.size() : \"There is no task corresponding to that number\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        taskList.get(x).markAsDone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done:\\n\" + taskList.get(x);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Deletes the task in the list upon user\u0027s request and prints the number of tasks remaining upon deletion."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param y the position of the task in the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String deleteTask(int y) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assert y \u003c taskList.size() : \"There is no task corresponding to that number\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return \"The task list is empty\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            taskList.remove(y - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (taskList.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return (\"Noted. I\u0027ve removed this task:\\n\" + taskList.get(y - 1) + \"\\n\" + \"Now you have 1 task in your list.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                return (\"Noted. I\u0027ve removed this task:\\n\" + taskList.get(y - 1) + \"\\n\" + \"Now you have \"+ taskList.size() + \" task in your list.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Finds and prints all the tasks containing the word requested by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param s The word that the user wants to find."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String find(String s) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String relevant \u003d \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            if (t.description.contains(s)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                count +\u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "                relevant \u003d relevant + t +\"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return (\"There are no matching tasks in your list\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return \"Here are the matching tasks in your list:\\n\" + relevant;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Deletes a certain task in the list and stores it in a different file for future reference."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param number the position of the task in the list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return the details of the task archived"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws IOException if the file to which data must be written to cannot be found"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String archiveTask(int number) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String showUser \u003d \"Got it, I\u0027ve archived task \" + number + \" .\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        showUser \u003d showUser + taskList.get(number - 1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        FileWriter storeArchivedTask \u003d new FileWriter(\"data/DukeArchive.txt\",true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        BufferedWriter out \u003d new BufferedWriter(storeArchivedTask);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        out.write(taskList.get(number - 1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        out.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        taskList.remove(number - 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return showUser;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Prints all the tasks in the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String getList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String list \u003d \"Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d taskList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Task t \u003d taskList.get(i-1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            list \u003d list + i + \". \" + t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return list ;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Reads and processes the event given by the user."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Stores the information in the list after processing."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param eventDetails The information of the event being processed."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException If the data is not in the required format i.e. MM/dd/yyyy HH:mm."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String readEvent(String eventDetails) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (eventDetails.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d (\" OOPS!!! the description of a event cannot be empty.\\n \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int first \u003d eventDetails.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String desc \u003d eventDetails.substring(0, first - 1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String on \u003d eventDetails.substring(first + 4);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(\"MM/dd/yyyy HH mm\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Date at \u003d df.parse(on);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Task t1 \u003d new Event(desc, at, false);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.add(t1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d this.addMessage();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Reads and processes the deadline given by the user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Stores the information in the list after processing."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param deadlineDetails the information of the Deadline input by the user."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String readDeadline(String deadlineDetails) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (deadlineDetails.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d (\" OOPS!!! the description of a deadline cannot be empty. \\n\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            int first \u003d deadlineDetails.indexOf(\u0027/\u0027);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String description \u003d deadlineDetails.substring(0, first - 1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String byTime \u003d deadlineDetails.substring(first + 4);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Task t1 \u003d new Deadline(description, byTime, false);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.add(t1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            output \u003d this.addMessage();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Reads and processes the To Do task given by the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param todoDetails The information regarding the to do task."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    protected String readTodo(String todoDetails) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        if (todoDetails.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            return (\" OOPS!!! the description of a todo cannot be empty. \\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            Task t1 \u003d new ToDo(todoDetails, false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            this.add(t1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "           output \u003d this.addMessage();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Reads data from the specified file."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param userData the file where user data is stored"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param parser parser object to process commands"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws FileNotFoundException if the file specified in userData cannot be found"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @throws ParseException if the date in the Event tasks cannot be parsed by Duke."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void readDataFromFile(File userData, Parser parser) throws FileNotFoundException, ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Scanner loadData \u003d new Scanner(userData);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        while (loadData.hasNextLine()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            String tasks \u003d loadData.nextLine();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "            parser.readTask(tasks,this);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 209
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Inherits from the Task class and contains methods for To Do category of tasks."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates a to do event with description and status."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param b the state of the task, i.e. whether it is done or has to be done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ToDo(String description, boolean b) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        this.isDone \u003d b;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Creates the task with only description and default state of the task being not done."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @param description the description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *Method to display information in the required format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * @return The task description with the prefix letter T indicating the type of task which corresponds to Todo here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 36
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains methods to interact with the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Prints a hello message at the beginning of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String greet() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Prints a bye message when the user leaves."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public String exit() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 26
    }
  },
  {
    "path": "src/test/java/TestTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains the JUnit tests for the Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class TestTask {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Tests the toString method."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(\"[\" + \"0\" + \"] test\",new Task(\"test\").toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Tests the markAsDone method."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void testMarkAsDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        Task t \u003d new Task(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        t.markAsDone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(true, t.isDone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 27
    }
  },
  {
    "path": "src/test/java/TestToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " * Contains the JUnit tests for ToDo class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "public class TestToDo {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     * Tests the toString method of Todo class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    public void testStringConversion() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "        assertEquals(\"[T][\" +  \"0\" + \"] test\",new ToDo(\"test\").toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ROHITREDDYBALAM"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ROHITREDDYBALAM": 16
    }
  }
]
