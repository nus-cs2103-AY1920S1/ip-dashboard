[
  {
    "path": "DukeOutput.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "E | 1 | party  | 04/07/2019 2359"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 3
    }
  },
  {
    "path": "TestOutput.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "T | 0 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "E | 0 | party | 04/07/2019 2359"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 2
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "run {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "test {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "version \u00270.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 37,
      "-": 14
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 17,
      "-": 83
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "rootProject.name \u003d \u0027duke\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "include \u0027resources\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 2,
      "-": 1
    }
  },
  {
    "path": "src/main/java/Command/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ByeCommand(String command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String executeAsString(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return ui.showConclusionFX();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 23
    }
  },
  {
    "path": "src/main/java/Command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Command(String command){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public abstract String executeAsString(TaskList tasks, Ui ui, Storage storage) throws Exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public abstract boolean isExit();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 19
    }
  },
  {
    "path": "src/main/java/Command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DeleteCommand extends Command{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DeleteCommand(String command) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            int val \u003d Integer.parseInt(splitWords[1]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ui.deleteMessage(val-1, tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.remove(val - 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Error, you have entered an invalid number\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String executeAsString(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            int val \u003d Integer.parseInt(splitWords[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d ui.deleteMessageFX(val-1, tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.remove(val - 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return \"Error, you have entered an invalid number\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            //return e.getMessage() + \"\\n\" + tasks.size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 46
    }
  },
  {
    "path": "src/main/java/Command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DoneCommand(String command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            int val \u003d Integer.parseInt(splitWords[1]);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.taskDone(val-1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ui.doneMessage(val-1, tasks);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Error, you have entered an invalid number\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String executeAsString(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            int val \u003d Integer.parseInt(splitWords[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks.taskDone(val-1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            storage.updateFile(tasks);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return ui.doneMessageFX(val-1, tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return \"Error, you have entered an invalid number\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 43
    }
  },
  {
    "path": "src/main/java/Command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public FindCommand(String command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String wordToFind \u003d splitWords[1];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        TaskList findResults \u003d new TaskList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String taskCommand \u003d tasks.get(i).getCommand();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (taskCommand.contains(wordToFind) ){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                findResults.add(tasks.get(i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui.FindCommand(findResults);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String executeAsString(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.split(\" \",2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String wordToFind \u003d splitWords[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        TaskList findResults \u003d new TaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for(int i \u003d 0; i \u003c tasks.size(); i++){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String taskCommand \u003d tasks.get(i).getCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (taskCommand.contains(wordToFind) ){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                findResults.add(tasks.get(i));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return ui.FindCommandFX(findResults);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 49
    }
  },
  {
    "path": "src/main/java/Command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ListCommand(String command) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui.ListCommand(tasks);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String executeAsString(TaskList tasks, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return ui.ListCommandFX(tasks);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 24
    }
  },
  {
    "path": "src/main/java/Command/TaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class TaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public TaskCommand(String command) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (splitWords[0].equals(\"todo\")) {                                                                 //IF TODO"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ToDo.createTodo(command, tasks, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if (splitWords[0].equals(\"deadline\")) {                                                      //IF DEADLINE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Deadline.createDeadline(command, tasks, storage);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if (splitWords[0].equals(\"event\")) {                                                         //IF EVENT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Event.createEvent(command, tasks, storage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new DukeException(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\" + \"\\n\" + tasks.printLatest()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    + \"\\n\" + \"Now you have \" + tasks.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (IllegalArgumentException e){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"☹ OOPS!!! The date format is wrong.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String executeAsString(TaskList tasks, Ui ui, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (splitWords[0].equals(\"todo\")) {                                                                 //IF TODO"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ToDo.createTodo(command, tasks, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if (splitWords[0].equals(\"deadline\")) {                                                      //IF DEADLINE"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Deadline.createDeadline(command, tasks, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if (splitWords[0].equals(\"event\")) {                                                         //IF EVENT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Event.createEvent(command, tasks, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new DukeException(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return \"Got it. I\u0027ve added this task:\" + \"\\n\" + tasks.printLatest()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                    + \"\\n\" + \"Now you have \" + tasks.size() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (IllegalArgumentException e){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return \"☹ OOPS!!! The date format is wrong.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 69
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 59
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Command.Command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Main entry point"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Duke /*extends Application*/{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Attributes for storage, tasks, and ui"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/daduke.png\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for Duke"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param filePath is the filename of the text file"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case file is not able to load"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Duke(String filePath) throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Dummy constructor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Duke() throws Exception{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        storage \u003d new Storage(\"DukeOutput.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * asks ui to run the application"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException in case text file is not found"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void run() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                c.execute(tasks, ui, storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                System.out.println(\"fml\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }finally {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui.showConclusion();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ui.showLine();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * entry point of Duke"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param args are standard feature"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case file is not found"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void main(String[] args) throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        new Duke(\"DukeOutput.txt\").run();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput , 1.0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        });"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*/"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/*    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Iteration 2:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/*    private void handleUserInput() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String userText \u003d new String(userInput.getText());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String dukeText \u003d new String(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(duke))"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        );"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "*/"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        //return \"Duke heard : \" + input;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Command c \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return c.executeAsString(tasks, ui, storage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return ui.showErrorFX(e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return \"fml\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 201,
      "-": 2
    }
  },
  {
    "path": "src/main/java/Exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Exception class for incorrect date format"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * exception for incorrect date format"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param message is dummy parameter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public DukeException(String message){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 14
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 11
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Main() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 31
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void setDuke(Duke d) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (response.equals(\"Bye. Hope to see you again soon!\")){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 52
    }
  },
  {
    "path": "src/main/java/Task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * contains actions for deadline task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * midCommand is attribute for the string command after \"deadline\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * formattedDate is attribute for the date"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String midCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String formattedDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for child class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * defines the midcommand, and calculates the formattedDate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case date is not entered in the correct format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Deadline(String command) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitUpDate \u003d command.split(\"/\",2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Date formalDate \u003d ft.parse(splitUpDate[1].substring(3));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            formattedDate \u003d dateFormat.format(formalDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        midCommand \u003d splitUpDate[0];"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for \"list\" command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[D][✓] \" + midCommand + \"(by: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[D][✗] \" + midCommand + \"(by: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for text file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"D | 1 | \" + midCommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"D | 0 | \" + midCommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * read user input as convert it into a Task.Task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param s is the user input string"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return a Task.Task (Task.Deadline) object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case segments[3] is not in the proper date format"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Task outputAsDeadline(String s) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]segments \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String taskCommand \u003d segments[2].trim() + \" /by: \" + segments[3].trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Deadline newTask \u003d new Deadline(taskCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (segments[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            newTask.taskDone();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates a new deadline task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user string input to be processed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case user inputs in an incorrect format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void createDeadline(String command, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String midCommand \u003d splitWords[1].trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (midCommand.length() !\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                tasks.add(new Deadline(midCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                storage.updateFile(tasks);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new Exception();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch(Exception e){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks when task is done"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 122
    }
  },
  {
    "path": "src/main/java/Task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * contains actions for event task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * midCommand is attribute for the string command after \"deadline\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * formattedDate is attribute for the date"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String midCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String formattedDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for child class"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * defines the midCommand, and calculates the formattedDate"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case date is not entered in the correct format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Event(String command) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitUpDate \u003d command.split(\"/\",2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            SimpleDateFormat ft \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Date formalDate \u003d ft.parse(splitUpDate[1].substring(3));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            formattedDate \u003d dateFormat.format(formalDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        midCommand \u003d splitUpDate[0];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for \"list\" command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (done) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[E][✓] \" + midCommand + \"(at: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                String result \u003d \"[E][✗] \" + midCommand + \"(at: \" + formattedDate + \")\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for text file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"E | 1 | \" + midCommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"E | 0 | \" + midCommand + \" | \" + formattedDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * read user input as convert it into a Task.Task"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param s is the user input string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return a Task.Task (Task.Event) object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws DukeException in case segments[3] is not in the proper date format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Task outputAsEvent(String s) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]segments \u003d s.split(\"\\\\|\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String taskCommand \u003d segments[2].trim() + \" /at: \" + segments[3].trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Event newTask \u003d new Event(taskCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (segments[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            newTask.taskDone();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates a new event task"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user string input to be processed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case user inputs in an incorrect format"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void createEvent(String command, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String midCommand \u003d splitWords[1].trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (midCommand.length() !\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                tasks.add(new Event(midCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                storage.updateFile(tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new Exception();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }catch (Exception e){"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks if task is done"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 120
    }
  },
  {
    "path": "src/main/java/Task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * parent class for all tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * attributes for the user input string and to flag whether task is done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    protected String command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    protected Boolean done;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is teh user input string"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Task(String command){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints a task in the format required for a list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the string to print"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[✓] \" + command;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[✗]\" + command;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * dummy method to be overriden by child class"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return dummy String"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks the task as done;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String getCommand(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 55
    }
  },
  {
    "path": "src/main/java/Task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * contains actions for the todo task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor for the child class"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ToDo(String command){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        super(command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for \"list\" command"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printer(){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(done){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[T][✓] \" + command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"[T][✗] \" + command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print for text file"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return string in the format required"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printToOutput(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (done) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"T | 1 | \" + command;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            String result \u003d \"T | 0 | \" + command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * read user input as convert it into a Task.Task"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return a Task.Task (Task.ToDo) object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Task outputAsToDo(String command){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]segments \u003d command.split(\"\\\\|\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ToDo newTask \u003d new ToDo(segments[2].trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (segments[1].equals(\" 1 \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            newTask.taskDone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Creates a new Task.ToDo task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command is the user string input to be processed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case user inputs in an incorrect format"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static void createTodo(String command, TaskList tasks, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]splitWords \u003d command.trim().split(\"\\\\s\",2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String midCommand \u003d splitWords[1].trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if (midCommand.length() !\u003d 0) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                tasks.add(new ToDo(midCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                storage.updateFile(tasks);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                throw new DukeException(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (Exception e){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            throw new DukeException(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks task as done"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        done \u003d true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 91
    }
  },
  {
    "path": "src/main/java/Utilities/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Utilities.Parser processes the user commands and carries out the specific functions on it"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Class Constructor"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Parser(){}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * Interprets the command and calls the executing class"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the command as an object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static Command parse(String command){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String[]words \u003d command.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if (command.equals(\"bye\")) {                                                                                    //IF BYE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new ByeCommand(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else if ( (words.length\u003d\u003d2) \u0026\u0026 (words[0].equals(\"done\")) \u0026\u0026 (isNumeric(words[1])) ) {                         //IF DONE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new DoneCommand(command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else if ((words.length\u003d\u003d2)\u0026\u0026(words[0].equals(\"delete\"))\u0026\u0026(isNumeric(words[1]))){                              //IF DELETE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new DeleteCommand(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else if (command.equals(\"list\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new ListCommand(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else if(words[0].equals(\"find\")){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new FindCommand(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return new TaskCommand(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * determines whether parameter is an integer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param str takes in the string that will be checked"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return boolean value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public static boolean isNumeric(String str) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            Integer.parseInt(str);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 52
    }
  },
  {
    "path": "src/main/java/Utilities/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "//import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.ToDo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Utilities.Storage enables data to be retrieved and stored in the text file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * variable is the filename to output to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private String filename;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param filename is the name of hard drive file to output to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Storage(String filename){"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to load the list from output"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return ArrayList of tasks to create Utilities.TaskList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws Exception in case BufferedReader is unable to read the filename"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws Exception  {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ArrayList\u003cTask\u003elist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        BufferedReader br \u003d Files.newBufferedReader(Paths.get(filename));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String lineToRead;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        while ((lineToRead \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            if ( (!lineToRead.equals(\"\")) \u0026\u0026 (lineToRead.charAt(0) \u003d\u003d \u0027T\u0027) ) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Task newTask \u003d ToDo.outputAsToDo(lineToRead);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if ( (!lineToRead.equals(\"\")) \u0026\u0026 (lineToRead.charAt(0) \u003d\u003d \u0027D\u0027) ) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Task newTask \u003d Deadline.outputAsDeadline(lineToRead);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else if ( (!lineToRead.equals(\"\")) \u0026\u0026 (lineToRead.charAt(0) \u003d\u003d \u0027E\u0027) ) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                Task newTask \u003d Event.outputAsEvent(lineToRead);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                list.add(newTask);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            } else {}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints list on the output text file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param tasks is the list of tasks to be printed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException in case filename is not found"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void updateFile(TaskList tasks) throws FileNotFoundException {      //previously named as printToOutput"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PrintStream outputTo \u003d new PrintStream(filename);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.println(tasks.printForOutput());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * empties out the output if required, but not the Utilities.TaskList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @throws FileNotFoundException in case the filename is not found"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void emptyOutput() throws FileNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        PrintStream outputTo \u003d new PrintStream(filename);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.println(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        outputTo.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 82
    }
  },
  {
    "path": "src/main/java/Utilities/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * An arrayList like feature which contains the tasks and also carries out certain activities on it"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * variable list contains all of user\u0027s tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private ArrayList\u003cTask\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor if the hard drive already contains tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param list is the input list from hard drive"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e list){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * constructor in case the hard drive file is not read"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public TaskList(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * outputs the tasks on the list in the format for hard drive output"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the string which then will be outputted on the text file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printForOutput(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        StringBuilder result\u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d list.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            result.append(list.get(i - 1).printToOutput()).append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * marks the specific task as done"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of the task to be marked as done"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void taskDone(int x){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        list.get(x).taskDone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * returns the task details in a list-printable format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of task to be printed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the task details"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String taskPrint(int x){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.get(x).printer();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print latest task addition to the list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return task details in string format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String printLatest(){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.get(list.size() - 1).printer();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * size of the Arraylist"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return int value of the size"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Integer size(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * remove task from list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of the task in the list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void remove(int x){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        list.remove(x);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * adds a new task to the list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param newTask is the Task.Task to add"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void add(Task newTask){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        list.add(newTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to retrieve the Task.Task"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param x is the digit of the task in the list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return the Task.Task"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public Task get(int x){"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.get(x);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * checks whether list is empty"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @return boolean value"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public boolean isEmpty(){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 110
    }
  },
  {
    "path": "src/main/java/Utilities/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "package Utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " * Shows the interface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    private final String LINE_BORDER \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void showWelcome(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final String DUKE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"Hello from\\n\" + DUKE_LOGO);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(LINE_BORDER + \"\\n\" + \"Hello! I\u0027m Duke\" + \"\\n\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \"What can I do for you?\" + \"\\n\" + LINE_BORDER);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String showWelcomeFX(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        final String DUKE_LOGO \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"Hello from\\n\" + DUKE_LOGO + LINE_BORDER + \"\\n\" + \"Hello! I\u0027m Duke\" + \"\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \"What can I do for you?\" + \"\\n\" + LINE_BORDER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void showConclusion(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String showConclusionFX(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String readCommand(){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        String fullCommand \u003d sc.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return fullCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void showLine(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(LINE_BORDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void showError(String message){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-()\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String showErrorFX(String message){"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-()\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints error message if file is not available"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"File not available\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String showLoadingErrorFX(){"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"File not available\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * print method for done message"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param n"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void doneMessage(int n, TaskList tasks){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \\n\" + tasks.taskPrint(n));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String doneMessageFX(int n, TaskList tasks){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\" + tasks.taskPrint(n);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void deleteMessage(int n, TaskList tasks){"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\"+ \"\\n\" + tasks.taskPrint(n) +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \"\\n\"+ \"Now you have \" + (tasks.size()-1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String deleteMessageFX(int n, TaskList tasks){"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return \"Noted. I\u0027ve removed this task:\"+ \"\\n\" + tasks.taskPrint(n) +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \"\\n\"+ \"Now you have \" + (tasks.size()-1) + \" tasks in the list.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * prints all contents in list format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void ListCommand(TaskList tasks){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (int i\u003d1; i\u003c\u003dtasks.size(); i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(i + \". \" + tasks.get(i-1).printer());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String ListCommandFX(TaskList tasks){"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        for (int i\u003d1; i\u003c\u003dtasks.size(); i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            s.append(i).append(\". \").append(tasks.get(i - 1).printer()).append(\"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * to print the find command results"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     * @param tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void FindCommand(TaskList tasks){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(tasks.isEmpty()){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Sorry, we couldn\u0027t find any results!\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            this.ListCommand(tasks);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public String FindCommandFX(TaskList tasks){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        if(tasks.isEmpty()){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return \"Sorry, we couldn\u0027t find any results!\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            return \"Here are the matching tasks in your list:\" + \"\\n\" + this.ListCommandFX(tasks);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 128
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 19
    }
  },
  {
    "path": "src/test/java/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Exceptions.DukeException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Deadline;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void printToOutputTest() throws DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(\"D | 0 | submission  | 04/07/2019 2359\" ,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new Deadline(\"submission /by 4/7/2019 2359\").printToOutput());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 13
    }
  },
  {
    "path": "src/test/java/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void isNumericTest(){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(true, Parser.isNumeric(\"1\"));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 11
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Task.Task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import Utilities.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    public void loadTest() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        ArrayList\u003cTask\u003etestTask \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        testTask.add(new ToDo(\" read book\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        testTask.add(new Event(\" party /at 04/07/2019 2359\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "        assertEquals(new TaskList(testTask).printForOutput(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "                new TaskList(new Storage(\"TestOutput.txt\").load()).printForOutput());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ArunBeCoding"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ArunBeCoding": 20
    }
  }
]
