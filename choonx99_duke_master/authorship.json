[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "run {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 25,
      "-": 15
    }
  },
  {
    "path": "data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[T][1] read again"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[D][1] work (by: 12th November 2012, 3:00pm)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[T][0] work"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[T][0] read"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[T][0] read"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[T][0] list"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "[D][0] work (by: 5th December 2019, 12:00pm-4:00pm)"
      }
    ],
    "authorContributionMap": {
      "choonx99": 7
    }
  },
  {
    "path": "src/main/java/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a date and time object to store and convert"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * date and time to a pleasant format e.g., 12/11/2019 1700"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * becomes 12th November 2019, 5:00pm."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public DateTime(String date, String time) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Creates a DateTime object out of a string representing date and time"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * e.g., 11/12/2019 1800 will give a DateTime object with date being"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * 11th December 2019 and time being 6:00pm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param dateTime String that represents a date and a time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws InvalidInputException occurs when an invalid date is input"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public DateTime(String dateTime) throws InvalidInputException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String[] splitDateAndTime \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String[] splitDate \u003d splitDateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String day \u003d splitDate[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String month \u003d splitDate[1];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        final String year \u003d splitDate[2];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String dateStr \u003d splitDateAndTime[0];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            LocalDateTime date \u003d LocalDateTime.parse(dateStr, formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new InvalidInputException(\"OOPS!!! The Date field is invalid\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (day.equals(\"1\") || day.equals(\"21\") || day.equals(\"31\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            day \u003d day + \"st\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (day.equals(\"2\") || day.equals(\"22\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            day \u003d day + \"nd\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (day.equals(\"3\") || day.equals(\"23\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            day \u003d day + \"rd\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            day \u003d day + \"th\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"January\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"February\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"March\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"4\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"April\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"5\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"May\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"6\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"June\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"7\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"July\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"8\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"August\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"9\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"September\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"10\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"October\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"11\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"November\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        case \"12\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            month \u003d \"December\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new InvalidInputException(\"OOPS!!! The Date/Time field is invalid\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.date \u003d day + \" \" + month + \" \" + year;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (splitDateAndTime.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            time \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String[] timings \u003d splitDateAndTime[1].split(\"-\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (timings.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String hour \u003d splitDateAndTime[1].substring(0, 2);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String mins \u003d splitDateAndTime[1].substring(2);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String period \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (hour.equals(\"00\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    hour \u003d \"12\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    period \u003d \"am\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else if (hour.equals(\"12\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    period \u003d \"pm\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    if (Integer.parseInt(hour) \u003e 12) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        period \u003d \"pm\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        hour \u003d (Integer.parseInt(hour) % 12) + \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        period \u003d \"am\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                this.time \u003d hour + \":\" + mins + period;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (timings.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String startHour \u003d timings[0].substring(0, 2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String startMins \u003d timings[0].substring(2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String endHour \u003d timings[1].substring(0, 2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String endMins \u003d timings[1].substring(2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String startPeriod \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String endPeriod \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (startHour.equals(\"00\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    startHour \u003d \"12\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    startPeriod \u003d \"am\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else if (startHour.equals(\"12\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    startPeriod \u003d \"pm\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    if (Integer.parseInt(startHour) \u003e 12) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        startPeriod \u003d \"pm\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        startHour \u003d (Integer.parseInt(startHour) % 12) + \"\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        startPeriod \u003d \"am\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (endHour.equals(\"00\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    endHour \u003d \"12\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    endPeriod \u003d \"am\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else if (endHour.equals(\"12\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    endPeriod \u003d \"pm\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    if (Integer.parseInt(endHour) \u003e 12) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        endPeriod \u003d \"pm\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        endHour \u003d (Integer.parseInt(endHour) % 12) + \"\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                        endPeriod \u003d \"am\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                this.time \u003d startHour + \":\" + startMins + startPeriod + \"-\" + endHour + \":\" + endMins + endPeriod;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (time \u003d\u003d null || time.equals(\"\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return date + \", \" + time;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 166
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a task categorised as deadline."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A deadline object includes a date to specify"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * when the task is due."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    protected DateTime by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Represents a deadline task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param by date and time of a deadline task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Deadline(String description, DateTime by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assert by !\u003d null : \"the dateTime of a deadline cannot be empty\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 24
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Creates a dialog box representing Duke\u0027s responses."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param text the text to be responded"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param img the image of Duke"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @return the dialog box representing Duke\u0027s responses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 66
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents Duke the main program for users to save and load tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Represents a Duke assistant."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        storage \u003d new Storage(\"data/duke.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        //Step 1. Setting up required components"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        //Step 2. Formatting the window to look as expected"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        // You will need to import `javafx.scene.layout.Region` for this."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            // handleUserInput();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            // handleUserInput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return ui.readInput(input);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 105,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents an exception that occurs during the running of Duke."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 8
    }
  },
  {
    "path": "src/main/java/EmptyFieldException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents an exception that occurs when there are missing data from user\u0027s input."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class EmptyFieldException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public EmptyFieldException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 8
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a task categorised as event. An Event object"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * includes a date to specify when the event will happen"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    protected DateTime at;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Represents an event task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param at date and time of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Event(String description, DateTime at) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assert at !\u003d null : \"the dateTime of an event cannot be empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 23
    }
  },
  {
    "path": "src/main/java/InvalidInputException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents an exception that occurs when a user\u0027s input is invalid."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class InvalidInputException extends DukeException {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public InvalidInputException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 8
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 10
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 29
    }
  },
  {
    "path": "src/main/java/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            Storage.save();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            System.out.println(\"An error occurred while saving\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 58
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a parser that checks the validity of users\u0027 inputs."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Checks validity of users\u0027 input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param type refers to the commands of user inputs e.g., \"done\", \"delete\", \"deadline\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param userInput refers to the actual input sentence from user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws EmptyFieldException occurs when there are missing data from user input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws InvalidInputException occurs when user input is invalid"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws ParseException occurs when user input date is invalid"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void handleInput(String type, String userInput) throws"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            EmptyFieldException, InvalidInputException, ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assert type !\u003d \"\" : \"type of command cannot be empty\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assert userInput !\u003d \"\" : \"user input cannot be empty\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (type.equals(\"find\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! You have to type something that you want to find\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"done\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            int taskNum \u003d Integer.parseInt(userInput.substring(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (taskNum \u003e TaskList.getTaskListSize()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new InvalidInputException(\"OOPS!!! You do not have that many tasks.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (taskNum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new InvalidInputException(\"OOPS!!! Your task number is invalid.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.substring(6).isBlank()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The task number cannot be empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            int taskNum \u003d Integer.parseInt(userInput.substring(7));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (taskNum \u003e TaskList.getTaskListSize()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new InvalidInputException(\"OOPS!!! You do not have that many tasks.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (taskNum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new InvalidInputException(\"OOPS!!! Your task number is invalid.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.substring(4).isBlank()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.substring(8).isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The new deadline cannot be empty.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (!userInput.contains(\"/by\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The deadline of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String description \u003d userInput.substring(9, userInput.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"by\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The deadline of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String formatString \u003d \"dd/mm/yyyy\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(formatString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            format.parse(userInput.split(\" \")[0]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.substring(5).isBlank()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The new event cannot be empty.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (!userInput.contains(\"/at\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The \u0027at\u0027 field of an event cannot be empty.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String description \u003d userInput.substring(6, userInput.indexOf(\u0027/\u0027));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (description.isBlank()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.equals(\"at\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                throw new EmptyFieldException(\"OOPS!!! The \u0027at\u0027 field of an event cannot be empty.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String formatString \u003d \"dd/mm/yyyy\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            SimpleDateFormat format \u003d new SimpleDateFormat(formatString);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            format.setLenient(false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            format.parse(userInput.split(\" \")[0]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (type.isBlank() \u0026\u0026 userInput.isBlank()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new EmptyFieldException(\"OOPS!!! I\u0027m sorry, but you have to input something\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            throw new InvalidInputException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 91
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a storage for users\u0027 tasklist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static String filePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Represents a storage for users\u0027 tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assert filePath !\u003d \"\" : \"file path cannot be empty\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns user\u0027s tasklist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @return arraylist of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws IOException occurs when file does not exist or is corrupted"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BufferedReader reader \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        while ((line \u003d reader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            char taskType \u003d line.charAt(1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            char isDone \u003d line.charAt(4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (taskType \u003d\u003d \u0027T\u0027) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String description \u003d line.substring(7);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                Task todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (isDone \u003d\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    taskList.add(todo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    todo.markAsDone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    taskList.add(todo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String date \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String time \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String description \u003d line.substring(7, line.indexOf(\u0027(\u0027) - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String by \u003d line.substring(line.indexOf(\u0027:\u0027) + 2, line.indexOf(\u0027)\u0027)).trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String[] dateTimeSplit \u003d by.split(\" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (dateTimeSplit.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    date \u003d dateTimeSplit[0] + \" \" + dateTimeSplit[1] + \" \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                   + dateTimeSplit[2].substring(0, dateTimeSplit[2].length() - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    time \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else if (dateTimeSplit.length \u003d\u003d 4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    date \u003d dateTimeSplit[0] + \" \" + dateTimeSplit[1] + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                                   + dateTimeSplit[2].substring(0, dateTimeSplit[2].length() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    time \u003d dateTimeSplit[3];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                Task task \u003d taskType \u003d\u003d \u0027D\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    ? new Deadline(description, new DateTime(date, time))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    : new Event(description, new DateTime(date, time));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                if (isDone \u003d\u003d \u00270\u0027) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    taskList.add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    task.markAsDone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    taskList.add(task);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        reader.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Saves the current tasks in tasklist to the file specified by user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @throws IOException occurs when file does not exist or is corrupted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void save() throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        BufferedWriter writer \u003d new BufferedWriter(new FileWriter(filePath));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Task task : TaskList.getCurrentTasks()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            writer.write(task + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 92
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a basic task. A task object includes its task description"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * and a boolean to declare whether the task is done"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Represents a Task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param description description of task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        assert description !\u003d \"\" : \"description of task cannot be empty\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return (isDone ? \"1\" : \"0\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 35
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Contains all tasks added in by the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    private static ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.taskList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds task into current tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param task Task to be added into tasklist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void addTask(Task task) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Deletes task from current tasklist."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param taskNum Task number of task to be deleted from tasklist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static void delTask(int taskNum) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        taskList.remove(taskNum - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns the current number of tasks in tasklist."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @return number of tasks in tasklist"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static int getTaskListSize() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static Task getTaskAt(int taskNum) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return taskList.get(taskNum - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static ArrayList\u003cTask\u003e getCurrentTasks() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Returns all the tasks currently in the tasklist."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @return all tasks currently in tasklist"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String printTasks() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return \"task list is empty\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String output \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                output +\u003d (i + 1) + \".\" + taskList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Search in a tasklist for the tasks that matches the term provided."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param term Used to search for tasks that matches the term"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String findTasks(String term) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        ArrayList\u003cTask\u003e searchedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (task.getDescription().contains(term)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                searchedTasks.add(task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (searchedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return \"There is no tasks\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String output \u003d \"Here are the matching tasks in your list:\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            for (int i \u003d 0; i \u003c searchedTasks.size(); i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                output +\u003d (i + 1) + \".\" + searchedTasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 91
    }
  },
  {
    "path": "src/main/java/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * Represents a task categorised as Todo."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 13
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * The Ui deals with interactions with the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * A Ui object includes greetings and a read input function"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": " * to receive user interactions and respond accordingly."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void greet() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        System.out.println(\"Hello! I\u0027m Duke\\nWhat can i do for you?\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public void goodbye() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Prints all tasks currently in the tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String printTaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return TaskList.printTasks();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Search in a tasklist for the tasks that matches the term provided."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param term Used to search for tasks that matches the term"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String findTasks(String term) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return TaskList.findTasks(term);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Adds a task into the tasklist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param task The task to be added into tasklist"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String addTaskToTaskList(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        TaskList.addTask(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String output \u003d \"Got it. I\u0027ve added this task: \\n\" + task + \"\\n\" + \"Now you have \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    + TaskList.getTaskListSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Deletes a task from the tasklist by calling delTask from TaskList class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * @param taskNum The task number of the task to be deleted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String delTaskInTaskList(int taskNum) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        Task taskToRemove \u003d TaskList.getTaskAt(taskNum);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        TaskList.delTask(taskNum);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        String output \u003d \"Noted. I\u0027ve removed this task: \\n\" + taskToRemove + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    + \"Now you have \" + TaskList.getTaskListSize() + \" tasks in the list.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     * Reads users\u0027 commands and respond accordingly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "choonx99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String readInput(String userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        if (userInput.equals(\"bye\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return \"goodbye!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else if (userInput.equals(\"list\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            return printTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            String[] userInputSplit \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                Parser.handleInput(userInputSplit[0], userInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return ex.getMessage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } catch (ParseException ex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return \"OOPS!!! The Date/Time field is invalid\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            if (userInput.startsWith(\"find\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return findTasks(userInputSplit[1]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (userInput.startsWith(\"done\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(userInput.substring(5));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                Task selectedTask \u003d TaskList.getTaskAt(taskNumber);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                selectedTask.markAsDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return \"Nice! I\u0027ve marked this task as done: \\n\" + selectedTask;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (userInput.startsWith(\"delete\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                int taskNumber \u003d Integer.parseInt(userInput.substring(7));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return delTaskInTaskList(taskNumber);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (userInput.startsWith(\"todo\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String description \u003d userInput.substring(5);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return addTaskToTaskList(new ToDo(description));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (userInput.startsWith(\"deadline\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String description \u003d userInput.substring(9, userInput.indexOf(\u0027/\u0027) - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String by \u003d userInput.substring(13 + description.length()).trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    Parser.handleInput(\"by\", by);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return addTaskToTaskList(new Deadline(description, new DateTime(by)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } catch (DukeException ex) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } catch (ParseException ex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return \"OOPS!!! The Date/Time field is invalid\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else if (userInput.startsWith(\"event\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String description \u003d userInput.substring(6, userInput.indexOf(\u0027/\u0027) - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                String at \u003d userInput.substring(10 + description.length()).trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    Parser.handleInput(\"at\", at);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return addTaskToTaskList(new Event(description, new DateTime(at)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } catch (DukeException ex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return ex.getMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                } catch (ParseException ex) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                    return \"OOPS!!! The Date/Time field is invalid\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                return \"Something went wrong\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String showLoadingError() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return \"Unable to load file from file path\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    public static String showSavingError() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        return \"Unable to save onto file\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "choonx99"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "choonx99": 126
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.effect.Blend?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" focusTraversable\u003d\"true\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" focusTraversable\u003d\"true\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 0);\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "   \u003ceffect\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "      \u003cBlend /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "   \u003c/effect\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "choonx99": 23
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "choonx99": 19
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//public class TaskTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    public void testStringConversion() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"[✘] sleep\", new Task(\"sleep\").toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"[✘] run at the gym\", new Task(\"run at the gym\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    public void markAsDone_null_success() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        Task task \u003d new Task(\"sleep\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        task.markAsDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"[✓] sleep\", task.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    public void getStatusIcon_null_success() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        Task task \u003d new Task(\"sleep\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"✘\", task.getStatusIcon());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        task.markAsDone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"✓\", task.getStatusIcon());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 26
    }
  },
  {
    "path": "src/test/java/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//public class ToDoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    public void testStringConversion() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"[T][✘] sleep\", new ToDo(\"sleep\").toString());"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//        assertEquals(\"[T][✘] run at the gym\", new ToDo(\"run at the gym\").toString());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "choonx99"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "choonx99": 11
    }
  }
]
