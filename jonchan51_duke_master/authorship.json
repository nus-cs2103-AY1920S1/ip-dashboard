[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveBaseName \u003d \u0027duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveVersion \u003d \u00270.1.3\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "group \u0027duke\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 23,
      "-": 13
    }
  },
  {
    "path": "src/main/java/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected LocalDateTime by;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Deadline(String description, LocalDateTime by) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, by, false);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Deadline(String description, LocalDateTime by, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns deadline of task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Deadline of task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return DATE_TIME_FORMATTER.format(this.by);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[D]%s (by: %s)\", super.toString(), DATE_TIME_FORMATTER.format(this.by));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 27
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    // Messages"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_GREETING \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_BYE      \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_ADD      \u003d \"Got it. I\u0027ve added this task:\\n  %s\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Now you have %d %s in the list.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_LIST     \u003d \"Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_NO_TASKS \u003d \"You have no tasks in your list yet!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_DONE     \u003d \"Nice! I\u0027ve marked this task as done:\\n  %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String MESSAGE_DELETE   \u003d \"Noted. I\u0027ve removed this task:\\n  %s\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            + \"Now you have %d %s in the list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    // Errors"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_INVALID_INPUT \u003d \"I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION \u003d \"The description cannot be empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DESCRIPTION_AND_TIME \u003d \"The description and time cannot be empty.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_TASK_ID \u003d \"The id of the task must be provided.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_INVALID_TASK_ID \u003d \"The id of the task must be a number. e.g. done 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_DEADLINE \u003d \"The deadline must be present. e.g. task /by Monday\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_MISSING_EVENT_TIME \u003d \"The event time must be present. e.g. meeting /at Monday\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_TOO_MANY_ARGUMENTS \u003d \"There are too many arguments for this command.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_FAILED_SAVE        \u003d \"Failed to save file.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_FAILED_TO_READ     \u003d \"Failed to read save data. Creating new task list.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_FAILED_TO_FIND     \u003d \"Failed to find save data. Creating new task list.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String ERROR_WRONG_DATE_FORMAT  \u003d \"The date time provided is in the wrong format. \" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            \"Expected d/m/yyyy hh:mm.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private static final String SAVE_LOCATION \u003d \"tasks.txt\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private final static DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/uuuu HH:mm\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Setups Duke."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param args Setup arguments"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        duke.run();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Runs Duke."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Handles command management."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        sayGreeting();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        loadTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            input \u003d sc.nextLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            String[] line \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                switch (line[0]) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    if (line.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                        throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    addTask(line[0], line[1]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    if (line.length !\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                        throw new DukeException(ERROR_TOO_MANY_ARGUMENTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    printTasks();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"done\": {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    doTask(getId(line));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"delete\": {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    deleteTask(getId(line));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    if (line.length !\u003d 1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                        throw new DukeException(ERROR_TOO_MANY_ARGUMENTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_INVALID_INPUT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                saveTasks();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (DukeException ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                printFormatted(ex.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } while (!input.equals(\"bye\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        sayBye();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Prints the greeting message for starting Duke."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void sayGreeting() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        printFormatted(MESSAGE_GREETING);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Prints the bye message for exiting Duke."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void sayBye() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        printFormatted(MESSAGE_BYE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Prints output in a standardised format."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param output String to be printed by Duke."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void printFormatted(String output) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String horLine \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        String[] lines \u003d output.split(\"\\n\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        stringBuilder.append(String.format(\"%s\\n\", horLine));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            stringBuilder.append(String.format(\"\\t %s\\n\", line));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        stringBuilder.append(String.format(\"%s\\n\", horLine));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        System.out.println(stringBuilder);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Adds task to task list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param command Type of task."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param description Description of task."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If invalid description."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void addTask(String command, String description) throws DukeException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"event\": {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (!description.matches(\".+\\\\s/at\\\\s.+$\")) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.length() \u003d\u003d 0 || description.matches(\"^\\\\s?/at\\\\s?$\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION_AND_TIME);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.matches(\"^\\\\s?/at.*\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (!description.contains(\"/at\") || description.matches(\".*/at\\\\s?\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_EVENT_TIME);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            String[] desc \u003d description.split(\" /at \");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            LocalDateTime time;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                System.out.println(desc[1]);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                time \u003d LocalDateTime.parse(desc[1], DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task \u003d new Event(desc[0], time);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        case \"deadline\": {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            if (!description.matches(\".+\\\\s/by\\\\s.+$\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.length() \u003d\u003d 0 || description.matches(\"^\\\\s?/by\\\\s?$\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION_AND_TIME);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (description.matches(\"^\\\\s?/by.*\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DESCRIPTION);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (!description.contains(\"/by\") || description.matches(\".*/by\\\\s?\")) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_MISSING_DEADLINE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            String[] desc \u003d description.split(\" /by \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            LocalDateTime time;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                time \u003d LocalDateTime.parse(desc[1], DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                throw new DukeException(ERROR_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task \u003d new Deadline(desc[0], time);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            task \u003d new Todo(description);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        printFormatted(String.format(MESSAGE_ADD,  task.toString(), this.tasks.size(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                this.tasks.size() !\u003d 1 ? \"tasks\" : \"task\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Prints current task listing."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void printTasks() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        StringBuilder lines \u003d new StringBuilder();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (this.tasks.isEmpty()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            lines.append(MESSAGE_NO_TASKS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            printFormatted(lines.toString());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        lines.append(MESSAGE_LIST);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            lines.append(String.format(\"%d. %s\\n\", i + 1, this.tasks.get(i).toString()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        printFormatted(lines.toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Marks task as completed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param id Id of task to mark completed."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void doTask(int id) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Task task \u003d this.tasks.get(id - 1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        task.markAsDone();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        printFormatted(String.format(MESSAGE_DONE, task.toString()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Deletes task from task list."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param id Id of task to delete."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void deleteTask(int id) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        Task task \u003d this.tasks.get(id - 1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.tasks.remove(id - 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        printFormatted(String.format(MESSAGE_DELETE, task.toString(), this.tasks.size(),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                this.tasks.size() !\u003d 1 ? \"tasks\" : \"task\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Saves tasks onto disk."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Tasks will be saved in the following format: T | 1 | read book."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Save location is determined by constant SAVE_LOCATION"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void saveTasks() throws DukeException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            FileWriter fw \u003d new FileWriter(SAVE_LOCATION);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            for (Task task : this.tasks) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    fw.append(String.format(\"D | %d | %s | %s\\n\","
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.isDone() ? 1 : 0,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.getDescription(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            ((Deadline) task).getDeadline()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    fw.append(String.format(\"E | %d | %s | %s\\n\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.isDone() ? 1 : 0,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.getDescription(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            ((Event) task).getTime()));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    fw.append(String.format(\"T | %d | %s\\n\","
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.isDone() ? 1 : 0,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            task.getDescription()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_FAILED_SAVE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private void loadTasks() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            File f \u003d new File(SAVE_LOCATION);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            Scanner sc \u003d new Scanner(f);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            while (sc.hasNext()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                String[] input \u003d sc.nextLine().split(\" [|] \");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                Task task;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                switch (input[0]) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    task \u003d new Todo(input[2], input[1].equals(\"1\"));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    task \u003d new Deadline(input[2], LocalDateTime.parse(input[3], DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            input[1].equals(\"1\"));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    task \u003d new Event(input[2], LocalDateTime.parse(input[3], DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                            input[1].equals(\"1\"));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                    throw new DukeException(ERROR_FAILED_TO_READ);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "                this.tasks.add(task);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            printFormatted(String.format(\"Loaded tasks from %s\", f.getAbsolutePath()));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            printFormatted(ERROR_FAILED_TO_FIND);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (DukeException ex) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            printFormatted(ex.getMessage());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | DateTimeParseException ex) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            printFormatted(ERROR_FAILED_TO_READ);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns parsed number from input."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @param input Entire line of input."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Number in rest of input."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @throws DukeException If rest of input is not a number."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    private int getId(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_MISSING_TASK_ID);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        int taskId;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            taskId \u003d Integer.parseInt(input[1]);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        if (taskId \u003c 1 || taskId \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            throw new DukeException(ERROR_INVALID_TASK_ID);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return taskId;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 324,
      "-": 5
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(String.format(\"☹ OOPS!!! %s\", message));"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 5
    }
  },
  {
    "path": "src/main/java/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    LocalDateTime at;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Event(String description, LocalDateTime at) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, at, false);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Event(String description, LocalDateTime at, boolean isDone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns time of Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Time of Event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getTime() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return DATE_TIME_FORMATTER.format(this.at);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[E]%s (at: %s)\", super.toString(), DATE_TIME_FORMATTER.format(this.at));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 27
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected boolean isDone \u003d false;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    protected static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "            DateTimeFormatter.ofPattern(\"EEE, d MMM uuuu, hh.mma\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Task(String description, boolean isDone) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Gets task status."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Task status."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns task description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Task description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Marks this task as done."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Marks this task as not done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public void markAsNotDone() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     * @return Unicode character representing status of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return this.isDone ? \"✓\" : \"✘\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 60
    }
  },
  {
    "path": "src/main/java/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        this(description, false);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public Todo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        super(description, isDone);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "        return String.format(\"[T]%s\", super.toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 14
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deadline return book /by Monday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "event project /at Tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "randomcommand"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "event /at Tuesday"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deadline /by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "deadline return /by Monday"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 9
    }
  },
  {
    "path": "text-ui-test/runtest.sh",
    "fileType": "sh",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "#!/usr/bin/env bash"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    mkdir ../bin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# delete output from previous run"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    rm ACTUAL.TXT"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# delete save data"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ -e \"./tasks.txt\" ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "  rm tasks.txt"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/*.java"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonchan51"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "# compare the output to the expected output"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "then"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "else"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "    exit 1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "fi"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 40
    }
  },
  {
    "path": "text-ui-test/tasks.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "D | 0 | return book | Monday"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "E | 1 | project | Tuesday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonchan51"
        },
        "content": "D | 0 | return | Monday"
      }
    ],
    "authorContributionMap": {
      "jonchan51": 3
    }
  }
]
