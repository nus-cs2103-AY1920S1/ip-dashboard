[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/rori issue tracker](https://github.com/se-edu/rori/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "Kyzure": 1,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "group \u0027seedu.rori\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "run {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    archiveBaseName \u003d \"rori\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    archiveVersion \u003d \"1.0.3\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "test {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kyzure": 35,
      "-": 14
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "rootProject.name \u003d \u0027rori\u0027"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 1
    }
  },
  {
    "path": "src/main/java/rori/Action.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents the different Actions a user can do. "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This enum is also the first word which the user inputs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "enum Action {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    LIST, EXIT, TUTORIAL, HELP, TODO, DEADLINE, EVENT, DONE, DELETE, FIND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 7
    }
  },
  {
    "path": "src/main/java/rori/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents an command which adds a task to the Task List."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class AddCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Add Command, which execute the addTask method from the taskList,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * adding the task that was given when instantiating the class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When there is an error serializing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.task !\u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        taskList.addTask(this.task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printAddTask(task, taskList.listSize());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        storeManager.store(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 31
    }
  },
  {
    "path": "src/main/java/rori/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command created by the Parser and executed by RoriManager."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "interface Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes a certain command or action that is read by the Parser and is called"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * in the RoriManager class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThere is 6 different classes which implements this class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * AddCommand, DoneCommand, DeleteCommand, ListCommand, FindCommand, HelpCommand, ExitCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Each of them have different execution to this method representative to their names."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and print for the User."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When a RoriException occurs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "src/main/java/rori/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a deadline, with a given date/time/both "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * which indicates when the user needs to complete it by."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Deadline, which converts the dateTime String into "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * a LocalDate, LocalTime or both."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task A String of the user\u0027s inputted task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param dateTime A String of the user\u0027s inputted date, time, or both."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the user inputs a illegitamate date, time, both or wrong format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Deadline(String task, LocalDate date, LocalTime time) throws RoriException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert date !\u003d null || time !\u003d null : \"Both date and time are null\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String of the deadline, which includes the date, time or both."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String of the deadline, which includes the date, time or both."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.date !\u003d null || this.time !\u003d null : \"Both date and time are invalid\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + this.date.format(DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[D]\" + super.toString() + \" (by: \" + this.date.format(DATE_FORMATTER) "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \" \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 44
    }
  },
  {
    "path": "src/main/java/rori/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which deletes a task from the Task List."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class DeleteCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Integer taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Delete Command, which instantiates an Integer of the task to be deleted."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskNumber Indicates the task number as in the Task List"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DeleteCommand(Integer taskNumber) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Delete Command, which deletes a task from the taskList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * The deletion by the taskList, has to be 0 base, hence our decrement in this.taskNumber"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see TaskList#deleteTask(int, Ui)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.taskNumber !\u003d null : \"taskNumber not found\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d taskList.deleteTask(this.taskNumber - 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        storeManager.store(taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printDelete(task, taskList.listSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 33
    }
  },
  {
    "path": "src/main/java/rori/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.effect.DropShadow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * face and a label containing text from the speaker."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final double X_TRANSFORM_LABEL \u003d 25;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final double X_TRANSFORM_IMAGE \u003d 18;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static double transformSize \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Circle myCircle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Font fontRegular \u003d Font.loadFont("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.getClass().getResource(\"/font/Minecraftia-Regular.ttf\").toExternalForm(), 10);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean isUser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for the dialogBox."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param text The text to be displayed - Which can be the user or Rori."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param img The image to be displayed - Which can be the user or Rori."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private DialogBox(String text, Image img, boolean isUser, Color roriShadowColor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isUser \u003d isUser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.isUser) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.dialog.setTranslateX(-X_TRANSFORM_LABEL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.myCircle.setTranslateX(-X_TRANSFORM_IMAGE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.dialog.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            myCircle.setStroke(Color.GREENYELLOW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            myCircle.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            myCircle.setEffect(new DropShadow(+14d, 0d, +2d, Color.SEAGREEN));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.dialog.setTranslateX(X_TRANSFORM_LABEL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.myCircle.setTranslateX(X_TRANSFORM_IMAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.dialog.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            myCircle.setStroke(roriShadowColor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            myCircle.setFill(new ImagePattern(img));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            myCircle.setEffect(new DropShadow(+14d, 0d, +2d, roriShadowColor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dialog.setFont(fontRegular);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dialog.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a DialogBox containing user\u0027s text and iamge."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param text User\u0027s Text"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param img User\u0027s Image"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return DialogBox containing user\u0027s text and image"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return new DialogBox(text, img, true, Color.SEAGREEN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns DialogBox containing Rori\u0027s text and image."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param text Rori\u0027s Text"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param img Rori\u0027s Image"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return DialogBox containing Rori\u0027s text and image"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static DialogBox getRoriDialog(String text, Image img, Color color) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img, false, color);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 114
    }
  },
  {
    "path": "src/main/java/rori/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which marks a task complete from the Task List."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class DoneCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Integer taskNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for the Done Command, which instantiates an Integer of the task to be completed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskNumber The specific task\u0027s index."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public DoneCommand(Integer taskNumber) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskNumber \u003d taskNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Done Command, which completes a task from the taskList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * The completion by the taskList, has to be 0 base, hence the decrement in this.taskNumber."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eIf the task is already completed, then we use uiManager to print out the given situation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see TaskList#getTask(int, Ui)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.taskNumber !\u003d null : \"taskNumber not found\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d taskList.getTask(this.taskNumber - 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (task.hasCompleted()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printAlreadyCompleted();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            task.setCompleted(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            storeManager.store(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printDone(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 39
    }
  },
  {
    "path": "src/main/java/rori/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents an Event, with a given date/time/both which indicates when the event will happen."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Event extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private LocalTime time;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Event, which converts the dateTime String into a LocalDate, LocalTime or both."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task A String of the user\u0027s inputted task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param date The date of the event - can be null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param time The time of the event - can be null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the user inputs a illegitamate date, time, both or wrong format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Event(String task, LocalDate date, LocalTime time) throws RoriException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert date !\u003d null || time !\u003d null : \"Both date and time are null\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String of the Event, which includes the date, time or both."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String of the Event, which includes the date, time or both."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.date !\u003d null || this.time !\u003d null : \"Both date and time are invalid\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.date.format(DATE_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[E]\" + super.toString() + \" (at: \" + this.date.format(DATE_FORMATTER) "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \" \" + this.time.format(TIME_FORMATTER) + \")\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 43
    }
  },
  {
    "path": "src/main/java/rori/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which exits the program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class ExitCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Exit Command, which exits the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eIt calls uiManager to print out the exit, and the instance of this class will"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * stop the recursion in RoriManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks. - Not in use."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see RoriManager#initializeRori()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.exit();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 21
    }
  },
  {
    "path": "src/main/java/rori/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command for finding a particular String regardless of Capitalization."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class FindCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private String findString;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for FindCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param findString The String the user wants to find."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public FindCommand(String findString) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.findString \u003d findString;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Find command to iterate through the task list for the tasks which "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * contain the keyword the user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When failing to get the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.findString !\u003d null : \"findString is invalid\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printFinding(this.findString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.listSize(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Task currTask \u003d taskList.getTask(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (checkContainsInsensitive(currTask, this.findString)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                uiManager.printTask(index, currTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                index++;    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Print nothing found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printNotFound();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a boolean whether the current iteration of the task contain the given String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The current iteration of a Task in the task list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param findString The given String to be found by the user"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a boolean whether the task contains the String."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean checkContainsInsensitive(Task task, String findString) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert task.getTaskString() !\u003d null : \"Task is invalid\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return task.getTaskString().toLowerCase().contains(findString.toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 55
    }
  },
  {
    "path": "src/main/java/rori/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which provides help for the user - A word user guide."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class HelpCommand implements Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Action action;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.action \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public HelpCommand(Action action) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Help Command, which provides a user help, calling uiManager to print help."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks. - Not in use."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see RoriManager#initializeRori()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.action \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printHelp();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printActionHelp(action);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 34
    }
  },
  {
    "path": "src/main/java/rori/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 10
    }
  },
  {
    "path": "src/main/java/rori/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which lists out the tasks left for the user."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class ListCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the List Command, which uses uiManager to list out"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * each line of the task from the taskList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (taskList.listSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printEmptyList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            uiManager.printListStarter();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.listSize(); i++) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                uiManager.printTask(i + 1, taskList.getTask(i));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 25
    }
  },
  {
    "path": "src/main/java/rori/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * A GUI for Rori using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Rori rori;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private RoriManager roriManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Main() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        rori \u003d new Rori();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        roriManager \u003d rori.getRoriManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setRori(rori);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            stage.setTitle(\"Rori\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            stage.getIcons().add(new Image(\"/images/RoriIcon.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            beginRoriMessages(fxmlLoader);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void beginRoriMessages(FXMLLoader fxmlLoader) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        fxmlLoader.\u003cMainWindow\u003egetController().welcomeMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.roriManager.getFirstTime()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().tutorialMessage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 45
    }
  },
  {
    "path": "src/main/java/rori/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Rori rori;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private RoriManager roriManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final Image nomralRoriImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Rori.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private final Image angryRoriImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/AngryRori.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Image roriImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Rori.png\"));;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean isInTutorial;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Color roriShadowColor \u003d Color.SKYBLUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void setRori(Rori d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        rori \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        roriManager \u003d this.rori.getRoriManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Rori\u0027s reply "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * and then appends them to the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String response \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (isInTutorial) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            response \u003d roriManager.getTutorialResponse(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            isInTutorial \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            roriImage \u003d nomralRoriImage;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                response \u003d rori.getResponse(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                roriImage \u003d nomralRoriImage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                roriShadowColor \u003d Color.DODGERBLUE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (RoriException error) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                response \u003d error.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                roriImage \u003d angryRoriImage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                roriShadowColor \u003d Color.CRIMSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                DialogBox.getRoriDialog(response, roriImage, roriShadowColor)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints the welcome message for the user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void welcomeMessage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                DialogBox.getRoriDialog(this.roriManager.welcomeMessage(), roriImage, Color.DODGERBLUE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Prints to ask if the user wants a tutorial on their initial startup of the program."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void tutorialMessage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                DialogBox.getRoriDialog(this.roriManager.getTutorial(), roriImage, Color.DODGERBLUE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        isInTutorial \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 93
    }
  },
  {
    "path": "src/main/java/rori/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.util.Pair; "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a Parse Manager, which parses the inputs given by the user, so our other classes"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * are able to read it with ease."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Parser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Command, and each command created is of a different class from the user\u0027s input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eThere are 2 types of commands, 1-word String command, and 2-or-more-word command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * E.g. of 1-word String: list, bye, help."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * E.g. of 2-or-more-word String, todo, deadline, event, done, delete."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * The user\u0027s input is split into 2 parts, and if it is only 1-word String, "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * If the user inputs something that is not of the correct Input type, a RoriException is thrown."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param input String inputted by the user to be parsed into a Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return A Command that is executed by RoriManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the user Inputs something unreadable by the program."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Command parseToCommand(String input) throws RoriException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] inputArr \u003d input.split(\" \", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Action action \u003d getAction(inputArr[0]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert inputArr.length \u003d\u003d 1 || inputArr.length \u003d\u003d 2 : \"inputArr length is wrong length\"; "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (inputArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            switch (action) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case LIST :"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new ListCommand();   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case EXIT :"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new ExitCommand();      "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case HELP :"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new HelpCommand();     "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case TUTORIAL: "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return createTutorialCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throwInputError(action);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (inputArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            switch (action) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case TODO :"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new AddCommand(new Todo(inputArr[1]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case DEADLINE :"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new AddCommand(createTimedTask(inputArr[1], action));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case EVENT :"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new AddCommand(createTimedTask(inputArr[1], action));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case DONE :"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new DoneCommand(parseToNumber(inputArr[1], \"Done\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case DELETE :"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new DeleteCommand(parseToNumber(inputArr[1], \"Delete\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case FIND :"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new FindCommand(inputArr[1]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            case HELP :"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return new HelpCommand(getAction(inputArr[1]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            default :"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new RoriException(\"Oof. I apologize, but I do not understand.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. I apologize, but I do not understand.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    } "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns an Action enum from a single word String."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The first word that is input by the user"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return An Action enum"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the single word String is not of the stipulated cases"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Action getAction(String action) throws RoriException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert !action.equals(\"\") : \"Empty String was obtained\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action.toLowerCase()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"list\" :"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.LIST;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"bye\" :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.EXIT;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"help\" :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.HELP;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"todo\" :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.TODO;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"deadline\" :"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.DEADLINE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"event\" :"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.EVENT;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"done\" :"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.DONE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"delete\" :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.DELETE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"find\" :"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.FIND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case \"tutorial\" :"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Action.TUTORIAL;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. I apologize, but no such command exists.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the parsed task number given by the user used for some commands E.g. Done and Delete."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskNumber The number given by the user that is parsed into the respective task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The first word that is input by the user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return An Integer that is, taskNumber that is pased."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When there is no number behind the action."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Integer parseToNumber(String taskNumber, String action) throws RoriException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return Integer.parseInt(taskNumber);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. \" + action + \" requires a number behind.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Task that is time-limited e.g. Deadline, Event."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eReturns by splitting the taskString by a indicator and parsing it."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskString The String given by the user without the Action/Command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The given Action by the user to decipher which task to return."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a Time-limited Task."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the format of the input is wrong."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Task createTimedTask(String taskString, Action action) throws RoriException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] taskArr \u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DEADLINE :"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskArr \u003d taskString.split(\" /by \", 2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case EVENT :"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskArr \u003d taskString.split(\" /at \", 2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Creating a time-limited task when not supposed to.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (taskArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return checkTimedTask(taskArr, action);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. There seems to be an error with your format.\\n\" "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            + \"Please type \\\u0027help\\\u0027 for more information.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Task that is time-limited e.g. Deadline, Event."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eUsed to check against the action and return the task accordingly"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskArr The task containing the task itself, and the date"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The given Action by the user to decipher which task to return."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return A time-limited Task."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When creating a time-limited task when not supposed to."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Task checkTimedTask(String[] taskArr, Action action) throws RoriException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Pair\u003cLocalDate, LocalTime\u003e pair \u003d obtainDateTime(taskArr[1]);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DEADLINE :"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return new Deadline(taskArr[0], pair.getKey(), pair.getValue());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case EVENT :"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return new Event(taskArr[0], pair.getKey(), pair.getValue());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. Creating a time-limited task when not supposed to.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Pair which contains the Date and Time, either can be null, not both."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eParses the date and time and converts them into a pair to be returned."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param dateTime The time and date to be parsed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return A Pair which contains the Date and Time, either can be null, not both."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When there is an error parsing the date, time or both."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Pair\u003cLocalDate, LocalTime\u003e obtainDateTime(String dateTime) throws RoriException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] dateTimeArr \u003d dateTime.split(\" \", 2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        LocalDate date \u003d null;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        LocalTime time \u003d null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert dateTimeArr.length \u003d\u003d 1 || dateTimeArr.length \u003d\u003d 2 : \"dateTimeArr is wrong length.\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (dateTimeArr.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // Parse both date and time"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                date \u003d LocalDate.parse(dateTimeArr[0], Task.DATE_FORMATTER);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                time \u003d LocalTime.parse(dateTimeArr[1], Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception error) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(dateTimeArr[0]);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                System.out.println(dateTimeArr[1]);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                throw new RoriException(\"Oof. Unable to parse both time and date.\\n\" "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        + \"Please use \\\u0027help\\\u0027 for the formatting of time and date\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (dateTimeArr.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // Parse date only"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                date \u003d LocalDate.parse(dateTimeArr[0], Task.DATE_FORMATTER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception error) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    // Parse time only"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    time \u003d LocalTime.parse(dateTimeArr[0], Task.TIME_FORMATTER);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                } catch (Exception errorAgain) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    throw new RoriException(\"Oof. Unable to parse both time and date.\\n\" "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                        + \"Please use \\\u0027help\\\u0027 for the formatting of time and date\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. There seems to be a formatting issue.\\n\" "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"Please use \\\u0027help\\\u0027 for the formatting of time and date\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return new Pair\u003cLocalDate,LocalTime\u003e(date, time);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a tutorial command containing templates for todo, deadline and event."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a tutorial command"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When gettign error creating the tasks."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private TutorialCommand createTutorialCommand() throws RoriException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addTodo \u003d parseToCommand(\"todo This is a Todo.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addDeadline \u003d parseToCommand(\"deadline This is a Deadline. /by 12/09/2019 10:10\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addEvent \u003d parseToCommand(\"event This is an Event. /at 12/09/2019\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return new TutorialCommand(addTodo, addDeadline, addEvent);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String containing the response of rori for whether the user wants a tutorial."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param input The user\u0027s input"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String of rori\u0027s response."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String parseTutorialResponse("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            String input, RoriManager roriManager, Ui uiManager) throws RoriException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (input.toLowerCase().equals(\"yes\")) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return roriManager.runRori(\"tutorial\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else if (input.toLowerCase().equals(\"no\")) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return uiManager.printNoTutorial();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. I do not understand. If you need help, type \\\u0027help\\\u0027.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Throws an Input Exception when a 2-or-more-Words String has only the word itself."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The input Command/Action"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException As the description of a 2-or-more-Words String is only 1-word."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void throwInputError(Action action) throws RoriException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case TODO :"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DEADLINE :"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case EVENT :"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The description of a event cannot be empty.\"); "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DONE :"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The description of a done cannot be empty.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DELETE :"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The description of a delete cannot be empty.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. I apologize but I don\u0027t understand.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 270
    }
  },
  {
    "path": "src/main/java/rori/Rori.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This program is Rori, which stores task for users."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * @author Timothy Yu Zhiwen"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class Rori {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private RoriManager roriManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Rori() throws RoriException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        roriManager \u003d new RoriManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the output which is obtained from running the user\u0027s input through Rori."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param input The users input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The String which is obtained when calling RoriException."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String getResponse(String input) throws RoriException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert !input.equals(\"\") : \"Empty input\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String output \u003d roriManager.runRori(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public RoriManager getRoriManager() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.roriManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 29
    }
  },
  {
    "path": "src/main/java/rori/RoriException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents an Exception that is solely for this program."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class RoriException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for RoriException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param message Message of the error."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public RoriException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 13
    }
  },
  {
    "path": "src/main/java/rori/RoriManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a manager to manage all of the different classes, and act\u0027s as the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * initialization stage of the program."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class RoriManager {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Ui uiManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Storage storeManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Parser parseManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean firstTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for RoriManager, which instantiates several other classes as well."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public RoriManager() throws RoriException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.storeManager \u003d new Storage(\"Tasks.sav\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskList \u003d this.storeManager.retrieve(this);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String that is going to be output to the user, and the given input results"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * in an ExitCommand, it will close the Rori program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003erunRori is for 1 iteration/command and is used only in javaFx."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * For the console version, please check initializeRori()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param rori The instance of rori program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String going to be output to the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When there is an error in one fo the commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String runRori(String input) throws RoriException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command command \u003d parseManager.parseToCommand(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert command !\u003d null : \"Command is invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        command.execute(this.uiManager, this.taskList, this.storeManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String output \u003d uiManager.getString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert output !\u003d \"\" : \"Output is invalid\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (command instanceof ExitCommand) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String welcomeMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return uiManager.printWelcome();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void setFirstTime(boolean firstTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.firstTime \u003d firstTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public boolean getFirstTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.firstTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String getTutorial() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return uiManager.printWantTutorial();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String containing whether the user want\u0027s the tutorial."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param input The user\u0027s response"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a String containing whether the user want\u0027s the tutorial."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String getTutorialResponse(String input) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return parseManager.parseTutorialResponse(input, this, this.uiManager);    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (RoriException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return e.getMessage();   "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 79
    }
  },
  {
    "path": "src/main/java/rori/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a store manager which helps to serialize and deserialize a file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * This class is used whenever we change an item in the TaskList, "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * or when the program starts up initially."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Storage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private File tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean firstTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Storage. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eIn the RoriManager, the filepath is given \"Tasks.sav\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param filePath Indicates the path of the file to be stored at."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.tasks \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Serializes the Task List so it can be used again the file is opened."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks, is being serialized"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When there is an error serializing the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void store(TaskList taskList) throws RoriException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.tasks !\u003d null : \"tasks file is invalid\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            FileOutputStream fileOut \u003d new FileOutputStream(this.tasks.getPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            ObjectOutputStream out \u003d  new ObjectOutputStream(fileOut);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            out.writeObject(taskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fileOut.close();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. Unable to serialize the list to Tasks.sav. \" "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    + \"If there is already a Tasks.sav, please delete it.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a Tasklist that is deserialized from the file."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * However, if the file is corrupted, it will throw a RoriException error."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a Tasklist that is deserialized from the  file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the file is corrupted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public TaskList retrieve(RoriManager roriManager) throws RoriException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.tasks !\u003d null : \"tasks file is invalid\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (!this.tasks.exists()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            roriManager.setFirstTime(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return createNewTaskList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            roriManager.setFirstTime(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return deserializeOldTaskList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns an empty TaskList and creates a savefile for it."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return an empty TaskList."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When failing to create a save file."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private TaskList createNewTaskList() throws RoriException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.tasks.createNewFile();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. Unable to create new sav file.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        store(taskList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a TaskList that was previously saved by deserializing the save file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a previously saved TaskList."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the save file is corrupted"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private TaskList deserializeOldTaskList() throws RoriException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // If the Tasks file exist"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            FileInputStream fileIn \u003d new FileInputStream(tasks.getPath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            ObjectInputStream in \u003d new ObjectInputStream(fileIn);     "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Object ob;  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            ob \u003d in.readObject();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fileIn.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (ob instanceof TaskList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return (TaskList) ob;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // The Tasks file has wrong type when deserializing. Hence corrupted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                corruptedSaveFile();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception error) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            corruptedSaveFile();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Creates a new save file, and throw an error to ask user to restart the game."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When failing to create a save file."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private void corruptedSaveFile() throws RoriException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // If the Tasks file is corrupted"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            tasks.createNewFile();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. Unable to create new sav file.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        store(taskList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        throw new RoriException(\"Oof. Corrupted save file. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"I have rewrote the old save file with a new one. \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"Please restart me again.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 130
    }
  },
  {
    "path": "src/main/java/rori/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a Task given by the User that is parsed by the parser to store information"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * that can be easily printed out in readable format. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CIRCLE \u003d \"O\";    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"X\";  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private String task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task A String of the user\u0027s inputted task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Task(String task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public boolean hasCompleted() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.isCompleted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void setCompleted(boolean isCompleted) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.isCompleted !\u003d isCompleted : "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                \"Trying to complete/uncomplete a completed/uncompleted task\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String getTaskString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.task !\u003d null : \"task is invalid\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.task;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        if (this.isCompleted) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[\" + CIRCLE + \"] \" + this.task;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return \"[\" + CROSS + \"] \" + this.task;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 52
    }
  },
  {
    "path": "src/main/java/rori/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a ArrayList which stores task and implemenets Serializable, allowing it to be"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * serialized by the Storage class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * @see Storage#Storage(String)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class TaskList implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for TaskList, which instantiates a new ArrayList which stores Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see ArrayList#ArrayList()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Adds task to the ArrayList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task Task to be added to the ArrayList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Task#Task(String)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert this.taskList !\u003d null : \"taskList is invalid\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.taskList.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a task that is deleted from the Tasklist/ArrayList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param index The index of the task to be deleted"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The task that is deleted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When failing to delete a task due to out-of-bound error."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Task deleteTask(int index) throws RoriException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return this.taskList.remove(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The given task number is not found.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the number of elements of the ArrayList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The size of the list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public int listSize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.taskList.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the task of the given index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param index The index of the task to be retrieve"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The task from the task list of the given index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException When the Task index is not found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Task getTask(int index) throws RoriException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            return this.taskList.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. The given task number is not found.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 73
    }
  },
  {
    "path": "src/main/java/rori/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a to-do, but unlike other Tasks, this does not have a date/time limit."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Todo extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Todo."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The given task by the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Todo(String task) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        super(task);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 18
    }
  },
  {
    "path": "src/main/java/rori/TutorialCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents a command which provides a tutorial for the user - A word user guide."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class TutorialCommand implements Command {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Command addTodo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Command addDeadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Command addEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public TutorialCommand(Command addTodo, Command addDeadLine, Command addEvent) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.addTodo \u003d addTodo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.addDeadline \u003d addDeadLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.addEvent \u003d addEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Executes the Tutorial Command, which provides an example by adding items to the save file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param uiManager Ui System which scans and prints for the User."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param taskList TaskList, an ArrayList which stores Tasks. - Not in use."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param storeManager Storage to serialize the TaskList into a Tasks.sav file. - Not in use"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see RoriManager#initializeRori()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Command#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void execute(Ui uiManager, TaskList taskList, Storage storeManager) throws RoriException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.addDeadline.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        uiManager.printTutorial();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 32
    }
  },
  {
    "path": "src/main/java/rori/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * Represents the UI system of the program, which obtains inputs from the user, and displays outputs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * \u003cp\u003eFor the JavaFx version, it stores the output value in Stringbuilder output,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " * and is cleared each time the Stringbuilder is being outputted to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "class Ui {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Scanner scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private PrintStream printer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private StringBuilder output;   // Output for the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Constructor for Ui, which creates a Scanner and Printer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Printer is used to display TICK and CROSS found in Task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Task#Task(String)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.scanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.printer \u003d new PrintStream(System.out, true, StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String inputted by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return String inputted by the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String readLine() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return scanner.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns the String of the current output of the command to the user, "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * as well as clearing the StringBuilder."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return The String of the current output of the command to the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String getString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String currentOutput \u003d this.output.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.setLength(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        printer.println(currentOutput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return currentOutput; "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Clears the output of the rori program. Used mainly in tutorial."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.setLength(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends an empty line to separate Commands."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printEmpty() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends the welcome message at the initialization of the Rori program."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see RoriManager#initializeRori()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String printWelcome() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String welcome \u003d (\"Hello, I am Rori.\\n\" "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"If you need help, type \\\u0027help\\\u0027 anytime.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return welcome;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a String of whether the user want\u0027s a tutorial or not."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return A String of whether the user want\u0027s a tutorial or not"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String printWantTutorial() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String output \u003d (\"It seems it is your first time here.\\n\" "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"Would you like a tutorial for this?\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"Type \\\u0027Yes\\\u0027 or\\\u0027No\\\u0027.\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public String printNoTutorial() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return \"Okay. If you ever need help type \\\u0027help\\\u0027.\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends the initial tutorial messages."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printTutorial() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"I\u0027ve added a temporary save file first.\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Try typing \\\u0027list\\\u0027 to get started.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"And if you ever need help, type \\\u0027help\\\u0027!\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to indicate user they have something to input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see RoriManager#initializeRori()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printWhatToDo() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"What would you like to do?\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to tells user that the list is empty."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printEmptyList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Your list is empty. How about adding something inside first?\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to inform user of the task in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printListStarter() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Here are the tasks in your list:\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to tell user of the task that is done and prints out the task itself and it\u0027s type."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task Task that is completed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see Task#toString()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printDone(Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Nice! I\u0027ve marked this task as done: \\n\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"  \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to tell user that the task is already completed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printAlreadyCompleted() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Task is already completed\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to tell user that the specified task has been deleted."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The task that is deleted."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param totalTasks The number of tasks remaining in the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see DeleteCommand#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printDelete(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Noted. I\u0027ve removed this task: \\n\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"  \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Now you have \" + totalTasks + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends that Rori is currently searching the tasks for the String."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param findString The String the user is searching for"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printFinding(String findString) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Finding for \\\u0027\" + findString + \"\\\u0027 now...\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends the specified task has been added."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The task that is added"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param totalTasks The total number of task remaining in the list"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see AddCommand#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printAddTask(Task task, int totalTasks) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Got it. I\u0027ve added this task:\\n\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"  \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Now you have \" + totalTasks +  \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends the task and it\u0027s index to the user."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param index The index of the task in the list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param task The task that is in the list of the specified index"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printTask(int index, Task task) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(index + \". \" + task.toString() + \"\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Append to user that the program is shutting down."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * \u003cp\u003eFor JavaFx, this will not be printed out, as the program will straight away close."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void exit() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Alright then. See you later.\\n\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends to tell the user that nothing is found during the command for find."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @see FindCommand#execute(Ui, TaskList, Storage)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printNotFound() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Nope, I found nothing.\\n\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends a user guide in case they do not know what to do."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assert isEmpty() : \"About to print items before help page.\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Hello this is Rori\u0027s help page.\\n\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"There are 8 main commands excluding help and tutorial\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"1. list\\n2. todo\\n3. deadline\\n4. event\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                + \"5. done\\n6. delete\\n7. find\\n8. bye\\n\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"Type \\\u0027help myCommand\\\u0027 to see the different features for each command!\\n\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        this.output.append(\"And if you ever need an example, type \\\u0027tutorial\\\u0027 for one!\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Appends the given help to the user of the user\u0027s choice."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @param action The action which the user used"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @throws RoriException If the given method is not available."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void printActionHelp(Action action) throws RoriException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case LIST :"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027list\\\u0027: Prints your current tasks.\\n\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case TODO :"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027todo myTask\\\u0027 Keeps track of a to-do\\n\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DEADLINE :"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027deadline myTask /by myDate\\\u0027 Records a deadline\\n\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"Format of myDate can be in date, time or both: \\n\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"DD/MM/YYYY HH:mm\\n\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"DD/MM/YYYY\\n\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"hh:mm\\n\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case EVENT :"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027event myTask /at myDate\\\u0027 to Records an event.\\n\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"Format of myDate can be in date, time or both: \\n\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"DD/MM/YYYY HH:mm\\n\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"DD/MM/YYYY\\n\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"hh:mm\\n\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DONE :"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027done number\\\u0027 Complete a task of the respective number.\\n\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case DELETE :"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027delete number\\\u0027 Removes a task of the respective number.\\n\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case FIND :"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027find myWord\\\u0027 Finds myWord in all of the Tasks\\n\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case EXIT :"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027bye\\\u0027 to exit. What else?\\n\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        case TUTORIAL :"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            this.output.append(\"\\\u0027tutorial\\\u0027 to give you 3 examples into your save file.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            throw new RoriException(\"Oof. For the list of commands, type \\\u0027help\\\u0027.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * Returns a boolean to check if it is empty - Mainly for assertion."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     * @return a boolean to check if it is empty."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private boolean isEmpty() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        return this.output.toString().equals(\"\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 275
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"300.0\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cCircle fx:id\u003d\"myCircle\" fill\u003d\"DODGERBLUE\" layoutX\u003d\"93.0\" layoutY\u003d\"86.0\" radius\u003d\"31.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"750.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"450.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"439.0\" layoutY\u003d\"697.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"64.0\" prefWidth\u003d\"64.0\" scaleX\u003d\"0.5\" scaleY\u003d\"0.5\" scaleZ\u003d\"0.5\" style\u003d\"-fx-background-image: url(/images/Arrow.png);\" translateX\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"707.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" opacity\u003d\"0.85\" prefHeight\u003d\"708.0\" prefWidth\u003d\"499.0\" style\u003d\"-fx-background-image: url(/images/Background.png);\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "src/test/java/duketest/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addTodo \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addDeadline \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addEvent \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d parseManager.parseToCommand(\"todo This is a Todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d parseManager.parseToCommand(\"deadline This is a deadline /by 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d parseManager.parseToCommand(\"event This is an event /at 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 37
    }
  },
  {
    "path": "src/test/java/duketest/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CIRCLE \u003d \"O\";    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"X\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void instanceTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for Date, Time and Both"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"22:22\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"22:22\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for wrong time, date or both"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"99/99/9999\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"99:99\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"99/99/9999\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"99:99\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"11/11/2018\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"66:66\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Deadline deadline;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deadline \u003d new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            LocalDate.parse(\"14/05/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deadline \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[D][\" + CROSS + \"] This is a Deadline. (by: 14/05/2020)\", "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                deadline.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        deadline.setCompleted(true);    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[D][\" + CIRCLE + \"] This is a Deadline. (by: 14/05/2020)\", "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                deadline.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 99
    }
  },
  {
    "path": "src/test/java/duketest/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addTodo \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addDeadline \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addEvent \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d parseManager.parseToCommand(\"todo This is a Todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d parseManager.parseToCommand(\"deadline This is a deadline /by 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d parseManager.parseToCommand(\"event This is an event /at 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Actual Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DeleteCommand deleteThird \u003d new DeleteCommand(3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DeleteCommand deleteFirst \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteThird.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Execute again to delete Todo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            deleteFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 57
    }
  },
  {
    "path": "src/test/java/duketest/DoneCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addTodo \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addDeadline \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addEvent \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d parseManager.parseToCommand(\"todo This is a Todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d parseManager.parseToCommand(\"deadline This is a deadline /by 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d parseManager.parseToCommand(\"event This is an event /at 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DoneCommand doneThird \u003d new DoneCommand(3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DoneCommand doneSecond \u003d new DoneCommand(2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        DoneCommand doneFirst \u003d new DoneCommand(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            doneThird.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            doneSecond.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            doneFirst.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 48
    }
  },
  {
    "path": "src/test/java/duketest/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CIRCLE \u003d \"O\";   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"X\";    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void instanceTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for Date, Time and Both"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {   "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"22:22\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"22:22\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        // Test for wrong time, date or both"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"99/99/9999\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"99:99\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"99/99/9999\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"99:99\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"99:99\", Task.TIME_FORMATTER));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            event \u003d new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            LocalDate.parse(\"14/05/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                            null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            event \u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[E][\" + CROSS + \"] This is an Event. (at: 14/05/2020)\", "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                event.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        event.setCompleted(true);    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[E][\" + CIRCLE + \"] This is an Event. (at: 14/05/2020)\", "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                event.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 99
    }
  },
  {
    "path": "src/test/java/duketest/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addTodo \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addDeadline \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addEvent \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d parseManager.parseToCommand(\"todo This is a Todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d parseManager.parseToCommand(\"deadline This is a deadline /by 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d parseManager.parseToCommand(\"event This is an event /at 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findThis \u003d new FindCommand(\"This\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findTodo \u003d new FindCommand(\"Todo\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findEvent \u003d new FindCommand(\"Event\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        FindCommand findThat \u003d new FindCommand(\"That\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findThis.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            findThat.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 49
    }
  },
  {
    "path": "src/test/java/duketest/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void executeTest() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Ui uiManager \u003d new Ui();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storeManager \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addTodo \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addDeadline \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Command addEvent \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo \u003d parseManager.parseToCommand(\"todo This is a Todo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline \u003d parseManager.parseToCommand(\"deadline This is a deadline /by 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent \u003d parseManager.parseToCommand(\"event This is an event /at 02/03/2004 22:22\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Not suppose to happen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addTodo.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addDeadline.execute(uiManager, taskList, storeManager);   "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            addEvent.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) { "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // But fail for addCommand failure"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        ListCommand listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            listCommand.execute(uiManager, taskList, storeManager);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 43
    }
  },
  {
    "path": "src/test/java/duketest/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void parseToCommand() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command list \u003d parseManager.parseToCommand(\"list\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command bye \u003d parseManager.parseToCommand(\"bye\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command done \u003d parseManager.parseToCommand(\"done 1\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command delete \u003d parseManager.parseToCommand(\"delete 1\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command todo \u003d parseManager.parseToCommand(\"todo This is a todo.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command deadline \u003d parseManager.parseToCommand(\"deadline This is a Deadline. /by 19:19\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command event \u003d parseManager.parseToCommand(\"event This is an Event. /at 19/01/2021\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            Command find \u003d parseManager.parseToCommand(\"find A TaSk\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Check if the command is of the correct type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            if (!(list instanceof ListCommand) "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(bye instanceof ExitCommand) "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(done instanceof DoneCommand) "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(delete instanceof DeleteCommand) "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(todo instanceof AddCommand) "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(deadline instanceof AddCommand) "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(event instanceof AddCommand) "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    || !(find instanceof FindCommand)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                fail();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void parseFailToCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Parser parseManager \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String[] failTestCases \u003d {\"Fail\", \"todo\", \"deadline\", \"event\", \"done\", \"delete\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \"Fail Again\", \"list list\", \"exti\", \"help me\", \"exit again\", \"Fail Fail Fail\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        for (String tests : failTestCases) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                parseManager.parseToCommand(tests);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                fail(tests);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                // Pass"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            } "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 50
    }
  },
  {
    "path": "src/test/java/duketest/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class StorageTest { "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void storeTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Storage storage \u003d new Storage(\"StoreTest.sav\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            storage.store(taskList);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "src/test/java/duketest/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void addDeleteTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.addTask(new Todo(\"This is a Todo.\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.addTask(new Deadline(\"This is a Deadline.\", "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"22:22\", Task.TIME_FORMATTER)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.addTask(new Event(\"This is an Event.\", "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalDate.parse(\"22/02/2020\", Task.DATE_FORMATTER),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                    LocalTime.parse(\"22:22\", Task.TIME_FORMATTER)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Fail but for other reasons"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            taskList.deleteTask(3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            // Pass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 44
    }
  },
  {
    "path": "src/test/java/duketest/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CIRCLE \u003d \"O\";   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"X\";    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void fieldVariableTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d new Task(\"This is a Task.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertFalse(task.hasCompleted());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        task.setCompleted(true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertTrue(task.hasCompleted());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Task task \u003d new Task(\"This is a Task.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[\" + CROSS + \"] This is a Task.\", task.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        task.setCompleted(true);    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[\" + CIRCLE + \"] This is a Task.\", task.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 29
    }
  },
  {
    "path": "src/test/java/duketest/TodoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CIRCLE \u003d \"O\";     "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private static final String CROSS \u003d \"X\";    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        Todo todo \u003d new Todo(\"This is a Todo.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[T][\" + CROSS + \"] This is a Todo.\", todo.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        todo.setCompleted(true);    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        assertEquals(\"[T][\" + CIRCLE + \"] This is a Todo.\", todo.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "target/classes/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"300.0\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/padding\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cCircle fx:id\u003d\"myCircle\" fill\u003d\"DODGERBLUE\" layoutX\u003d\"93.0\" layoutY\u003d\"86.0\" radius\u003d\"31.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "target/classes/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kyzure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"750.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"450.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"439.0\" layoutY\u003d\"697.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"64.0\" prefWidth\u003d\"64.0\" scaleX\u003d\"0.5\" scaleY\u003d\"0.5\" scaleZ\u003d\"0.5\" style\u003d\"-fx-background-image: url(/images/Arrow.png);\" translateX\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"707.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" opacity\u003d\"0.85\" prefHeight\u003d\"708.0\" prefWidth\u003d\"499.0\" style\u003d\"-fx-background-image: url(/images/Background.png);\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 19
    }
  },
  {
    "path": "target/surefire-reports/AddCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: AddCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.04 s - in AddCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DeadlineTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DeadlineTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in DeadlineTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DeleteCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DeleteCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 s - in DeleteCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DoneCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DoneCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in DoneCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/DukeManagerTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: DukeManagerTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in DukeManagerTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/EventTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: EventTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in EventTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/FindCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: FindCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in FindCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/ListCommandTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: ListCommandTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in ListCommandTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/ParserTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: ParserTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 s - in ParserTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/StorageTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: StorageTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 s - in StorageTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/TaskListTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: TaskListTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in TaskListTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/TaskTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: TaskTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 s - in TaskTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "target/surefire-reports/TodoTest.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Test set: TodoTest"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "-------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 s - in TodoTest"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 4
    }
  },
  {
    "path": "tutorials/gradleTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle is a _build automation tool_ used to automate build processes. There are many ways of integrating Gradle into a project. In this guide, we will be using the _Gradle wrapper_."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Gradle Support to Your Project](#adding-gradle-support-to-your-project)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Plugins](#adding-plugins)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  * [CheckStyle](#checkstyle)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Shadow](#shadow)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* [Adding Dependencies](#adding-dependencies)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [JUnit](#junit)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "As a developer, you write a _build file_ that describes the project. A build file mainly consists of _plugins_, _tasks_ and _properties_. "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **Plugins** extend the functionality of Gradle. For example, the `java` plugin adds support for `Java` projects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tasks** are reusable blocks of logic.  For example, the task `clean` simply deletes the project build directory. Tasks can be composed of other tasks or be dependent on another task. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Properties** change the behavior of tasks. For instance, `mainClassName` of the `application` plugin is a compulsory property which tells Gradle which class is the entrypoint to your application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  As Gradle favors [_convention over configuration_](https://en.wikipedia.org/wiki/Convention_over_configuration), there is not much to you need to configure if you follow the recommended directory structure."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Gradle Support to Your Project "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "1. Pull the branch named `gradle`. Merge it to the `master` branch. This will add the Gradle wrapper to your project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout --track origin/gradle"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   git checkout master"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   git merge gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "1. Open the `build.gradle` file in an editor. Update the following code block to point to the main class (i.e., the one containing the `main` method) of your application. The code below assumes your main class is `seedu.rori.Duke`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   ```groovy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "       mainClassName \u003d \"seedu.rori.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. To check if Gradle has been added to the project correctly, open a terminal window, navigate to the root directory of your project and run the command `gradlew run`. This should result in Gradle running the main method of your project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Simply run the command `gradlew {taskName}` in the terminal and Gradle will run the task! Here are some example commands:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew tasks` (or `gradlew tasks --all`): shows a list of tasks available"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* `gradlew run`: runs the main class of your project"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Some plugins may add more helpful tasks so be sure to check their documentation!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#### Using Gradle from within Intellij"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. After adding support for Gradle, Intellij might automatically ask you (via a pop-up at the bottom right corner of the Window) whether to import the project as a Gradle project. In that case, go ahead and say yes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t happen, import the Gradle project by `Help \u003e Find Action \u003e Import Gradle Project`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Import Gradle](assets/ImportGradle.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. If the above didn\u0027t work either, close Intellij, delete the Intellij project files (i.e., `.idea` folder and `*.iml` files), and set up the project again, but instead of choosing `Create project from existing sources`, choose `Import project from external model` -\u003e `Gradle`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "After this, IntelliJ IDEA will identify your project as a Gradle project and you will gain access to the `Gradle Toolbar`. Through the toolbar, you run Gradle tasks and view your project\u0027s dependencies."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "You can click on the Gradle icon in the Gradle toolbar and create a new run configuration for running Gradle tasks without needing to type a `gradlew` command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![Gradle icon](assets/GradleIcon.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Plugins"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle plugins are reusable units of build logic. Most common build tasks are provided as core plugins by Gradle. Given below are instructions on how to use some useful plugins:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "### CheckStyle"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "To add support for _Checkstyle_ (a tool to check if your code complies with a set of style rules), which comes as a core plugin, simply add the line `id \u0027checkstyle\u0027` into the `plugins` block."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Your build file should look something like this now:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "// ..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Checkstyle expects configuration files for checkstyle to be in `./config/checkstyle/` by convention."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "A sample checkstyle rule configuration is provided in the branch."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin adds a few _tasks_ to your project. Run `gradlew checkstyleMain checkstyleTest` to verify that you have set up Checkstyle properly (the command will check your main code and test code against the style rules)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for CheckStyle plugin](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Shadow"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Shadow is a plugin that packages an application into an executable jar file. To use it, first add the following line to your Gradle build file:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The plugin can be configured by setting some properties. Let\u0027s try to produce a jar file with the name in format of `{baseName}-{version}.jar`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Add the following block to your build file:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    archiveBaseName \u003d \"rori\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Now you can run the command `gradlew shadowJar`.It publishes an executable jar to `./build/libs/`. You should be able to able to execute the created jar file by double-clicking it or using the command `java -jar {jarName}`?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for Shadow plugin](https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [More about the Shadow plugin](https://imperceptiblethoughts.com/shadow/introduction/)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Adding Dependencies"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gradle can automate the management of dependencies to third-party libraries. Given below are some examples."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "### JUnit"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "JUnit is a testing framework for Java. It allows developers to write tests and run them. To manage JUnit dependency via Gradle, add the following to your build file:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Then, configure Gradle to use JUnit by adding the following block to your build file:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "```groovy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "By convention, java tests belong in `src/test/java` folder. Create a new `test/java` folder in under `src`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "src"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "├─main"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "│  └─java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "│     └─seedu/rori/Duke.java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "└─test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    └─java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        └─seedu/rori/DukeTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "If you have imported your Gradle project into IntelliJ IDEA, you will notice that IDEA is able to mark the test directory as the _Test root_ (colored in green by default) automatically."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "You can now write a test (e.g., `test/java/seedu/rori/DukeTest.java`) and run it with `gradlew test`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "**Resources**:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* [Gradle documentation for JUnit](https://docs.gradle.org/current/userguide/java_testing.html#using_junit5)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Now that you have a general idea of how to accomplish basic tasks with Gradle, here\u0027s a list of material you can read to further your understanding."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* [Official Gradle Documentation](https://docs.gradle.org/current/userguide/userguide.html)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "----------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 6,
      "-": 164
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart3.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 3 – Interacting with the user"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "Picking up from where we left off last tutorial, we have successfully achieved the desired layout. Now let’s make the application respond to user input. "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Rather than to do everything in one try, let’s iterate and build up towards our final goal. "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 1 – Echoing the User"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "JavaFX has an _event-driven architecture style_. As such, we programmatically define _handler_ methods to execute as a response to certain _events_. When an event is detected, JavaFX will call the respective handlers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "For Duke, there are two events that we want to respond to, namely the user pressing `Enter` in the `TextField` and left-clicking the `Button`. These are the `onAction` event for the `TextField` and the `onMouseClicked` event for the `Button`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s have the application add a new `Label` with the text from the `TextField`. Update the `Main` class as follows. You\u0027ll need to add an `import javafx.scene.control.Label;` too."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Step 1 code here"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 2 code here"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Step 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 1:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates a label with the specified text and adds it to the dialog container."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * @param text String containing text to add"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * @return a label with the specified text that has word wrap enabled."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // You will need to import `javafx.scene.control.Label`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Label textToAdd \u003d new Label(text);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    textToAdd.setWrapText(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    return textToAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and give it a whirl!"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Echo not scrolling as intended](assets/EchoNotScrolling.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "At first glance everything appears to work perfectly. However, when the `VBox` stretches beyond the confines of the `ScrollPane`, the `ScrollPane` does not scroll down automatically as expected. We can remedy this by attaching a handler on the `VBox` to react to its own size changing and scrolling the `ScrollPane` down."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Update the `start` method as shown below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // current code ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //Scroll down to the end every time dialogContainer\u0027s height changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Verify that the `ScrollPane` scrolls as intended."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 2 – Adding Dialog Boxes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "In the mockup of the UI, notice that the dialog boxes are composed of two different controls (`ImageView` and `Label`) and reused multiple times. In situations like this, it is often beneficial to create our own custom control."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create our custom control `DialogBox`:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "We use the code in our main class just like any other control. Here are the steps to update the code to use the custom control in `Main.java`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "First, add these imports:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Next, add two images to the `main/resources/images` folder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "For this tutorial, we have two images `DaUser.png` and `DaDuke.png` to represent the user avatar and Duke\u0027s avatar respectively but you can use any image you want."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Image|Filename"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "---|---"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "![DaDuke](assets/DaUser.png) | `DaUser.png`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![DaUser](assets/DaDuke.png) | `DaDuke.png`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Image rori \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Add a new method to handle user input:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": " * Iteration 2:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": " * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": " * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    Label roriText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            new DialogBox(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            new DialogBox(roriText, new ImageView(rori))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": " * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": " * Replace this stub with your completed method."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "private String getResponse(String input) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    return \"Duke heard: \" + input;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Update the event handler code in the `start` method to use the new `handleUserInput` method:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "public void start(Stage stage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    //Part 3. Add functionality to handle user input."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        handleUserInput();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Run the program and see how it works."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 2](assets/DialogBoxesIteration2.png) "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "## Iteration 3 – Adding custom behavior to DialogBox"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "One additional benefit of defining a custom control is that we can add behavior specific to our `DialogBox`. Let’s add a method to flip a dialog box such that the image on the left to differentiate between user input and Duke’s output."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "private void flip() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    db.flip();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    return db;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "You\u0027ll need to update the imports as follows:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Now, we can go back to the `Main` class and change the event handler to use our new `DialogBox`. "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "private void handleUserInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    Label roriText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            DialogBox.getUserDialog(userText, new ImageView(user)),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            DialogBox.getDukeDialog(roriText, new ImageView(rori))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    userInput.clear();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Run the application and play around with it. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "![DialogBoxes Iteration 3](assets/DialogBoxesIteration3.png)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Congratulations! "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "You have successfully implemented a fully functional GUI for Duke!  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "1. While the GUI looks similar to the mockup, there are still parts that need to be refined. Try your hand at some of these tasks:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each DialogBox"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add padding between each ImageView and its Label"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "   * Clip the ImageView into a circle"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "   * Add background color to each dialog box"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "1. After attempting the changes, reflect critically on the following:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "   * What was the development workflow like?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "   * Is the code base well-organized?"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 5,
      "-": 238
    }
  },
  {
    "path": "tutorials/javaFxTutorialPart4.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# JavaFX Tutorial 4 – FXML "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "While we have produced a fully functional prototype, there are a few major problems with our application."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "1. The process of visually enhancing the GUI is long and painful:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   * Does the `TextField` need to be 330px or 325px wide? "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   * How much padding is enough padding to look good?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   Every small change requires us to rebuild and run the application.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Components are heavily dependent on each other:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   Why does `Main` need to know that `DialogBox` needs a `Label`? "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   What happens if we change the `Label` to a custom `ColoredLabel` in the future?  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    We need to minimize the amount of information each control needs to know about another."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Otherwise, making changes in the future will break existing features."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code is untidy and long:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "   Why is all the code in one place?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   The `Main` class attempts to do it all. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   Code for visual tweaks, listeners and even utility methods are all in one file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   This makes it difficult to find and make changes to existing code."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "FXML is a XML-based language that allows us to define our user interface. Properties of JavaFX objects can be defined in the FXML file. For example:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The FXML snippet define a TextField similar to the one that we programmatically defined previous in Tutorial 2. Notice how concise FXML is compared to the plain Java version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s return to Duke and convert it to use FXML instead."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Rebuilding the Scene using FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Scene Builder is a tool developed by Oracle and currently maintained by Gluon. It is a What-You-See-Is-What-You-Get GUI creation tool. [Download](https://gluonhq.com/products/scene-builder/#download) the appropriate version for your OS and install it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Create the following files in `src/main/resources/view`:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.fxml**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.fxml**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```xml"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s explore the provided FXML files in Scene Builder. "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Running the tool brings up the main screen."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    Select `Open Project` \u003e `src/main/resources/view/MainWindow.fxml`. Inspect each control and its properties."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "   ![SceneBuilder opening MainWindow.fxml](assets/SceneBuilder.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the right accordion pane, you can modify the properties of the control that you have selected. Try changing the various settings and see what they do!"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. On the left accordion, you can see that we have set the controller class to `MainWindow`. "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "We will get to that later."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Controller for MainWindow](assets/MainWindowController.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s repeat the process for `DialogBox`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "   The main difference here is that DialogBox checks `Use fx:root construct` and _does not define a controller class_. "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Settings for DialogBox](assets/DialogBoxController.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Controllers"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "As part of the effort to separate the code handling Duke\u0027s logic and UI, let\u0027s _refactor_ the UI-related code to its own class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "We call these UI classes _controllers_. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s implement the `MainWindow` controller class that we specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "**MainWindow.java**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Duke rori;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Image roriImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        rori \u003d d;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "        String response \u003d rori.getResponse(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "                DialogBox.getDukeDialog(response, roriImage)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "The `@FXML` annotation marks a `private` or `protected` member and makes it accessible to FXML despite its modifier."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Without the annotation, we will have to make everything `public` and expose our UI to unwanted changes."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `FXMLLoader` will map the a control with a `fx:id` defined in FXML to a variable with the same name in its controller."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how in `MainWindow`, we can invoke `TextField#clear()` on `userInput` and access its content just as we did in the previous example."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, methods like private methods like `handleUserInput` can be used in FXML when annotated by `@FXML`. "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "## Using FXML in our application"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a new `Main` class as the bridge between the existing logic in `Duke` and the UI in `MainWindow`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "**Main.java**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "    private Duke rori \u003d new Duke();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kyzure"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(rori);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Again, we can interact with the `AnchorPane` defined in the FXML as we would have if we created the `AnchorPane` ourselves."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "For our custom `DialogBox`, we did not define a controller so let\u0027s create a controller for it."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "**DialogBox.java**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "When we create a new instance of `DialogBox`, we set both the controller and root Node to `DialogBox`. "
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "From this point onwards we can interact with `DialogBox` as we have in the previous tutorials."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "The last change that we have to make is to point our `Launcher` class in the right direction:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "In `Launcher.java`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "//...    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[todo]: # (Discussion on the fx:root pattern.)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "## Exercises"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "1. Convert `MainWindow` to use the `fx:root` construct."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend `MainWindow` to have a `Stage` as a root Node."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "1. Customize the appearance of the application further with CSS."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "Kyzure": 7,
      "-": 287
    }
  }
]
