[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "application {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    mainClassName \u003d \"Launcher\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveVersion \u003d \"v0.1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 32,
      "-": 16
    }
  },
  {
    "path": "src/main/java/DeadlineTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing a Deadline Task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class DeadlineTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public DeadlineTask(String details, Calendar deadline) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details, deadline);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String toFileString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"D\" + \" | \" + done + \" | \" + details + \" | \" + fileDateFormat.format(date.getTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + dateFormat.format(date.getTime()) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 22
    }
  },
  {
    "path": "src/main/java/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * The element that displays tbe user\u0027s input and Duke\u0027s response in the window."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor for the DialogBox object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param l The label containing text to be displayed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param iv The profile picture of the user or Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public DialogBox(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        text \u003d l;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        displayPicture \u003d iv;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        displayPicture.setFitWidth(100.0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        displayPicture.setFitHeight(100.0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.setAlignment(Pos.TOP_RIGHT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.getChildren().addAll(text, displayPicture);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        FXCollections.reverse(tmp);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static DialogBox getUserDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return new DialogBox(l, iv);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Performs the same action as getUserDialog(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * but flips it so that the DialogBox is on the left side of the window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param l The Label containing Duke\u0027s response."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param iv The profile picture of Duke."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return a Dialog Box that is on the left side of the window."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static DialogBox getDukeDialog(Label l, ImageView iv) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        var db \u003d new DialogBox(l, iv);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 62
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Creates a Duke window that displays the conversation between the user and Duke."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Scene scene;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            .getResourceAsStream(\"/images/DaUser.jpg\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            .getResourceAsStream(\"/images/DaDuke.png\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String filepath \u003d \"D:/Marcus Folder/SCHOOL STUFF/YEAR 2/CS2103T/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Storage storage \u003d new Storage(filepath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            taskList \u003d new TaskList(storage, ui);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            parser \u003d new Parser(taskList, ui);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        //The container for the content of the chat to scroll."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer \u003d new VBox();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.setContent(dialogContainer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        userInput \u003d new TextField();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        sendButton \u003d new Button(\"Send\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        AnchorPane mainLayout \u003d new AnchorPane();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.setTitle(\"Duke\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.setMinHeight(600.0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        stage.setMinWidth(400.0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        mainLayout.setPrefSize(400.0, 600.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.setPrefSize(385, 535);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.setVvalue(1.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        scrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        userInput.setPrefWidth(325.0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        sendButton.setPrefWidth(55.0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        AnchorPane.setTopAnchor(scrollPane, 1.0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        AnchorPane.setBottomAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        AnchorPane.setRightAnchor(sendButton, 1.0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        AnchorPane.setLeftAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        AnchorPane.setBottomAnchor(userInput, 1.0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        //Display welcome message."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Label dukeText \u003d new Label(ui.welcomeMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(dukeImage))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        //Part 3. Add functionality to handle userImage input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        sendButton.setOnMouseClicked((event) -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        userInput.setOnAction((event) -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            handleUserInput();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates two dialog boxes, one echoing userImage input"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * the dialog container. Clears the userImage input after processing."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Label userText \u003d new Label(userInput.getText());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Label dukeText \u003d new Label(getResponse(userInput.getText()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                DialogBox.getUserDialog(userText, new ImageView(userImage)),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                DialogBox.getDukeDialog(dukeText, new ImageView(dukeImage))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * You should have your own function to generate a response to userImage input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String getResponse(String input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        parser.parse(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return ui.getResponse();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 126,
      "-": 3
    }
  },
  {
    "path": "src/main/java/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Exception handled by the program that provides a custom error message."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 8
    }
  },
  {
    "path": "src/main/java/EventTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing an Event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class EventTask extends TimedTask {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public EventTask(String details, Calendar date) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details, date);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String toFileString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"E\" + \" | \" + done + \" | \" + details + \" | \" + fileDateFormat.format(date.getTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + dateFormat.format(date.getTime()) + \")\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 22
    }
  },
  {
    "path": "src/main/java/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Application.launch(Duke.class, args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 10
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Takes in user input and processes it to check whether it is valid."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * If valid, it will perform the specified command."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String[] validTaskTypes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The constructor of the Parser object. This mainly processes the input of the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskList The task list of the program."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public Parser(TaskList taskList, Ui ui) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.validTaskTypes \u003d new String[] {\"deadline\", \"event\", \"todo\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Processes the user input and performs an action based on it, if valid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The user\u0027s input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void parse(String command) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (command.equals(\"bye\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseByeCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (command.equals(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseListCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (command.equals(\"undo\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseUndoCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (commandArray[0].equals(\"find\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseFindCommand(command);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (commandArray[0].equals(\"done\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseDoneCommand(command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (commandArray[0].equals(\"delete\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseDeleteCommand(command);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else if (isValidTaskType(commandArray[0])) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                parseToDoCommand(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            ui.printException(e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the bye command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseByeCommand() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.byeMessage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the list command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseListCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.printList(taskList.getListItems());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the undo command."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if there is nothing left to undo."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseUndoCommand() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.undo();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the find command."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if no keywords were specified by the user."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseFindCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Please provide a keyword \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"for us to filter the list of tasks with!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.find(command.replaceFirst(\"find \", \"\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the done command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the id was not specified or is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseDoneCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Please specify a task ID to set as done!\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (!commandArray[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The ID of the task must be an integer!\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int id \u003d Integer.parseInt(commandArray[1]);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.markAsDone(id);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the delete command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the id was not specified or is invalid."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseDeleteCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Please specify a task ID to delete!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (!commandArray[1].matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The ID of the task must be an integer!\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int id \u003d Integer.parseInt(commandArray[1]);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.delete(id);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to parse the to do command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The original command input by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if there was no description provided."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void parseToDoCommand(String command) throws DukeException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (command.equals(\"todo\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        taskList.addTask(command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Check against the list of valid Task types to see if the command is valid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskType the first argument of the command input."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return True if the first argument of the command input is valid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public boolean isValidTaskType(String taskType) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (String s : validTaskTypes) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (taskType.equals(s)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 152
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private LinkedList\u003cString\u003e previousSaves;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor of the Storage object. This object mainly reads and write information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * to the save file in the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param filepath The file path of the save file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public Storage(String filepath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.file \u003d new File(filepath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.previousSaves \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Reads the save file and produces the saved list of tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return An ArrayList of the saved list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Error occurs if the file path is invalid or the file is corrupted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ArrayList\u003cTask\u003e listItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(file));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            while (br.ready()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                String item \u003d br.readLine();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                Task newTask \u003d Task.createFromFile(item);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                sb.append(item).append(\"\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                listItems.add(newTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            previousSaves.add(sb.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return listItems;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) { // this should not occur as the file is hard-coded."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Error occurred while loading file, \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"the file path is invalid:\" + \"\\n\" + e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Error occurred while loading file, \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"the file seems to be corrupted.\" + \"\\n\" + e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Stores a new task in the save file in a specified format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param item The String representation of the task specifically to be stored in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Occurs if the file cannot be found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void addNew(String item) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            FileWriter fw \u003d new FileWriter(new File(filepath), true); // append mode: true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.write(item + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            String s \u003d previousSaves.getLast();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            this.previousSaves.add(s + item + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Error occurred while adding new task! + \\n\" + e);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Updates the description of a task in the save file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param list The entire list of tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Occurs if the file cannot be found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void updateSaveFile(ArrayList\u003cTask\u003e list) throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        StringBuilder newFileContent \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newFileContent.append(task.toFileString()).append(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String save \u003d newFileContent.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        update(save);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.previousSaves.add(save);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Stores the file content without saving."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param newFileContent the new file content."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Occurs if the file cannot be found."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void update(String newFileContent) throws DukeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            FileWriter fw \u003d new FileWriter(file);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.write(newFileContent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Error while updating task in save file: \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"File not found!\\n\" + e);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Undoes the previous action of the user by loading the previous state of the task list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return The last known state of the task list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown when there is nothing to undo."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public ArrayList\u003cTask\u003e undo() throws DukeException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (this.previousSaves.size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"There is nothing to undo!\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.previousSaves.removeLast();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String save \u003d this.previousSaves.getLast();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ArrayList\u003cTask\u003e listItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (String item : save.split(\"\\n\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (item.equals(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task newTask \u003d Task.createFromFile(item);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            listItems.add(newTask);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        update(save);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return listItems;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 130
    }
  },
  {
    "path": "src/main/java/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing a Task in the TaskList."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected Task(String details) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.details \u003d details;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Indicate that the task is done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void setDone() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates the type of task to be added to the list based on user\u0027s command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The entire line of command input by the user into the program."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Task object that follows the specifications of the input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected static Task create(String command) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String taskType \u003d commandArray[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        command \u003d command.replaceFirst(taskType + \" \", \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (taskType.equals(\"event\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return createEventTask(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (taskType.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return createDeadlineTask(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return createToDoTask(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to create an Event task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command the original command by the user without the first parameter."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return An event task, if the command is valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static EventTask createEventTask(String command) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" /at \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String details \u003d commandArray[0];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Invalid command format! Proper usage: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"\u0027event \u003cdetails\u003e /at \u003ctiming\u003e\u0027\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The description of an event cannot be empty.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return new EventTask(commandArray[0], TimedTask.parseDateTime(commandArray[1]));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to create a Deadline task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command the original command by the user without the first parameter."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A deadline task, if the command is valid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static DeadlineTask createDeadlineTask(String command) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] commandArray \u003d command.split(\" /by \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String details \u003d commandArray[0];"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (commandArray.length !\u003d 2) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Invalid command format! Proper usage: \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"\u0027deadline \u003cdetails\u003e /by \u003ctiming\u003e\u0027\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (details.equals(\"\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The description of a deadline cannot be empty.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return new DeadlineTask(commandArray[0], TimedTask.parseDateTime(commandArray[1]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to create a to do task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command the original command by the user without the first parameter."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A to do task, if the command is valid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the format is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static ToDoTask createToDoTask(String command) throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (command.equals(\"\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The description of a todo cannot be empty.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return new ToDoTask(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Creates the type of task to be added to the list based on the line in the save file."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param item The entire line of command input by the user into the program."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Task object according to the line in the save file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the line does not follow the format for some reason."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected static Task createFromFile(String item) throws DukeException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] args \u003d item.split(\" \\\\| \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        assert args.length \u003e 1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String taskType \u003d args[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        boolean isAlreadyDone \u003d Integer.parseInt(args[1]) \u003d\u003d 1;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (taskType.equals(\"D\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assert args.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask \u003d new DeadlineTask(args[2], TimedTask.parseDateTime(args[3]));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (taskType.equals(\"E\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assert args.length \u003d\u003d 4;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask \u003d new EventTask(args[2], TimedTask.parseDateTime(args[3]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assert args.length \u003d\u003d 3;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask \u003d new ToDoTask(args[2]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (isAlreadyDone) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            newTask.setDone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return newTask;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * String representation of the Task object that can be processed by the program."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A String that can be written to the save file."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected abstract String toFileString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * String representing the Task object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return String representation of the Task object."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        char statusIcon \u003d isDone ? (char) 0x2713 : (char) 0x2718;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[\" + statusIcon + \"] \" + details;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 141
    }
  },
  {
    "path": "src/main/java/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * An object representing the list of tasks,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * that reads, writes, and updates task information to the hard disk."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private ArrayList\u003cTask\u003e listItems;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    TaskList(Storage storage, Ui ui) throws DukeException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.listItems \u003d storage.load();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected ArrayList\u003cTask\u003e getListItems() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return listItems;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Adds a task to the list based on the given command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param command The command given by the user to be processed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown during the creation of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *     the Task object if the command is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void addTask(String command) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task newTask \u003d Task.create(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        storage.addNew(newTask.toFileString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        listItems.add(newTask);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListAdd(newTask.toString(), listItems.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Mark a task in the list as done based on its ID."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param id the ID of the task that is done."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the ID input is invalid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void markAsDone(int id) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (id \u003e listItems.size() || id \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The ID that you have entered is not a valid task ID.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task task \u003d listItems.get(id - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        task.setDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        storage.updateSaveFile(listItems);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListDone(task.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Delete a task in the list based on its ID."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param id the ID of the task that is to be deleted."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown if the ID input is invalid."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void delete(int id) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (id \u003e listItems.size() || id \u003c\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"The ID that you have entered is not a valid task ID.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        Task task \u003d listItems.remove(id - 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        storage.updateSaveFile(listItems);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListDelete(task.toString(), listItems.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Searches the list for tasks that match the user specified keyword."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param keyword The keyword specified by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void find(String keyword) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ArrayList\u003cTask\u003e matchList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        for (Task task : listItems) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (task.details.contains(keyword)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                matchList.add(task);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.printMatchList(matchList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Undoes the last action made by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Exception thrown when there is nothing to undo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void undo() throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.listItems \u003d storage.undo();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        ui.taskListUndo();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 91
    }
  },
  {
    "path": "src/main/java/TimedTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.text.DateFormatSymbols;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Represents a task with a date/time attached to it."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public abstract class TimedTask extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    Calendar date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    SimpleDateFormat dateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    SimpleDateFormat fileDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor for the TimedTask object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param details The description of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param date The Calendar object representing the date attached to the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected TimedTask(String details, Calendar date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String suffix \u003d getDaySuffix(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.dateFormat \u003d new SimpleDateFormat(\"d\u0027\" + suffix + \" of\u0027 MMMM yyyy, h:mma\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        DateFormatSymbols symbols \u003d new DateFormatSymbols(Locale.getDefault());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        symbols.setAmPmStrings(new String[] { \"am\", \"pm\" });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.dateFormat.setDateFormatSymbols(symbols);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.fileDateFormat \u003d new SimpleDateFormat(\"d/M/yyyy kkmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Takes the Calendar object and gets the suffix for the day of the month."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * A day ending with the number 2 should have the suffix \"nd\" to make the word \"2nd\"."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param date The Calendar object of the TimedTask."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return The suffix of the day in the Calendar."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String getDaySuffix(Calendar date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int suffixConstant \u003d date.get(Calendar.DAY_OF_MONTH) % 10;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return suffixConstant \u003d\u003d 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                ? \"st\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                : suffixConstant \u003d\u003d 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                ? \"nd\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                : suffixConstant \u003d\u003d 3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                ? \"rd\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                : \"th\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Converts the user inputted date/time to a Calendar object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param input the user\u0027s input of the date and time, specified by DD/MM/YYYY HHMM."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return A Calendar object representing the date and time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @throws DukeException Thrown when the date or its format is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static Calendar parseDateTime(String input) throws DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        // Input Validation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] inputArr \u003d input.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (inputArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Invalid date/time format!\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"Please follow the format: \u003cDD/MM/YYYY\u003e\u003cSpace\u003e\u003c24hr Time Format\u003e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        // Date Input Validation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String date \u003d inputArr[0];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String dateRegex \u003d \"^(\\\\d{1,2})/(\\\\d{1,2})/(\\\\d{4})\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!date.matches(dateRegex)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Invalid date format!\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"Please follow the appropriate Date format: DD/MM/YYYY\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String[] dateArr \u003d date.split(\"/\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int day \u003d Integer.parseInt(dateArr[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int month \u003d Integer.parseInt(dateArr[1]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int year \u003d Integer.parseInt(dateArr[2]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!isValidDate(day, month, year)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Please input a valid Date!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        // Time Input Validation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!inputArr[1].matches(\"\\\\d{4}\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Please follow the 24h Time format: HHMM\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int hour \u003d Integer.parseInt(inputArr[1].substring(0, 2));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int minute \u003d Integer.parseInt(inputArr[1].substring(2, 4));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (!isValidTime(hour, minute)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            throw new DukeException(\"Please input a valid Time!\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return new Calendar"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .Builder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .setDate(year, month - 1, day)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .setTimeOfDay(hour, minute, 0)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function to check if the date provided is valid."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param day The number representing the day of the month."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param month The number representing the month."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param year The number representing the year."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return True if the date provided is an actual date in the calendar."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static boolean isValidDate(int day, int month, int year) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (month \u003c 1 || month \u003e 12 || day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (month \u003d\u003d 4 || month \u003d\u003d 6 || month \u003d\u003d 9 || month \u003d\u003d 11) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (day \u003d\u003d 31) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else if (month \u003d\u003d 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (day \u003e 29) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            if (!((year % 4 \u003d\u003d 0 \u0026\u0026 year % 100 !\u003d 0) || year % 400 \u003d\u003d 0)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                // year is not a leap year"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                if (day \u003d\u003d 29) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Helper function that checks if the time provided is valid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param hour The hour given in the 24h format."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param minute The minute as given in the 24h format."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @return True if the time provided is valid."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private static boolean isValidTime(int hour, int minute) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return hour \u003e\u003d 0 \u0026\u0026 hour \u003c\u003d 23 \u0026\u0026 minute \u003e\u003d 0 \u0026\u0026 minute \u003c 60;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 136
    }
  },
  {
    "path": "src/main/java/ToDoTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * Object representing an To Do Task."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class ToDoTask extends Task {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public ToDoTask(String details) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        super(details);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected String toFileString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        int done \u003d isDone ? 1 : 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"T\" + \" | \" + done + \" | \" + details;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 19
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " * This object\u0027s role is to produce messages to be displayed by the GUI."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private String response;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private boolean isEmptyResponse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    private void setResponse(String response) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        isEmptyResponse \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.response \u003d response;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String getResponse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        assert !isEmptyResponse : \"Cannot return empty response.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Constructor for the Ui object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        this.isEmptyResponse \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays the welcome message when the user starts the program."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public String welcomeMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        return \"Hello from\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            + \" ____        _        \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Generic response template for displaying an error."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param e The error message to be displayed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void printException(DukeException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\" \" + ((char) 0x2639) + \" OOPS!!! \" + e.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Prints the whole list of items in the order as stored by the program."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listItems The list of all the items in the task list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void printList(ArrayList\u003cTask\u003e listItems) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (listItems.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(\"You currently have no tasks!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d listItems.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                sb.append(\"\\n  \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(i)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(listItems.get(i - 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(sb.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Prints the list of items stored by the program that matched the keyword given by the user."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listItems The list of matched items in the task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void printMatchList(ArrayList\u003cTask\u003e listItems) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        if (listItems.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(\"Sorry, there are no matching tasks!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d listItems.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                sb.append(\"\\n  \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(i)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(\". \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                        .append(listItems.get(i - 1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            setResponse(sb.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message to say goodbye to the user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void byeMessage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Hope to see you again soon!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message when a task has been added to the task list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskString The String representation of the added task."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listSize The new size of the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListAdd(String taskString, int listSize) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        String taskSingular \u003d listSize \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"  \" + taskString + \"\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"Now you have \" + listSize + \" \" + taskSingular + \" in the list.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message when a task in the task list has been set as Done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskString The String representation of the modified task."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListDone(String taskString) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"  \" + taskString);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message when a task in the task list has been deleted."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param taskString The String representation of the deleted task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * @param listSize The new size of the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListDelete(String taskString, int listSize) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"  \" + taskString + \"\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                + \"Now you have \" + listSize + \" tasks in the list.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * Displays a message stating that Duke has successfully undone the previous action of the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    protected void taskListUndo() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        setResponse(\"I\u0027ve successfully undone the previous action.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 138
    }
  },
  {
    "path": "src/test/java/StorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    Storage storage \u003d new Storage("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            \"D:/Marcus Folder/SCHOOL STUFF/YEAR 2/CS2103T/duke/data/duke.txt\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The Duke save file has to be cleared before starting any test,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * to ensure that the assertions are accurate."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void clearDukeSaveFileBeforeTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     * The duke save file has to be cleared after all the tests to clean up the save file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public static void clearDukeSaveFileAfterTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Storage storage \u003d new Storage("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    \"D:/Marcus Folder/SCHOOL STUFF/YEAR 2/CS2103T/duke/data/duke.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(new ArrayList\u003cTask\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void updateSaveFile() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.add(Task.create(\"todo abc\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.add(Task.create(\"event abc /at 1/1/1997 2335\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.get(0).setDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            tasks.remove(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.updateSaveFile(tasks);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(tasks.get(0).toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void addToSaveFile() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"event abc /at 1/1/1997 2335\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.addNew(t.toFileString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t.toString(), storage.load().get(0).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"event abcd /at 1/2/1997 2335\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            storage.addNew(t2.toFileString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t2.toString(), storage.load().get(1).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 82
    }
  },
  {
    "path": "src/test/java/TaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingGoodTodoTask() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            // test case 1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"todo abc\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t.toString(), \"[T]\" + \"[\" + (char) 0x2718 + \"] \" + \"abc\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            // test case 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(t.toString(), \"[T]\" + \"[\" + (char) 0x2713 + \"] \" + \"abc\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"Exception Occurred.\\n\" + e.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingGoodEventTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"event hello /at 01/01/2011 1500\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[E]\" + \"[\" + (char) 0x2718 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (at: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[E]\" + \"[\" + (char) 0x2713 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (at: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"Exception Occurred.\\n\" + e.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingFailEventTask() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.create(\"event hello /at 01/012011 1500\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"1st Exception was not thrown\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"event /at 01/01/2011 1500\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"2nd Exception was not thrown\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.create(\"event hello /at 01/13/2011 1500\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"3rd Exception was not thrown\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t4 \u003d Task.create(\"event hello /at 32/01/2011 1500\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"4th Exception was not thrown\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t5 \u003d Task.create(\"event hello /at 31/02/2011 1500\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"5th Exception was not thrown\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t6 \u003d Task.create(\"event hello /at 01/13/2011 1500\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"6th Exception was not thrown\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t7 \u003d Task.create(\"event hello /at 01/12/211 1500\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"7th Exception was not thrown\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingGoodDeadlineTask() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t \u003d Task.create(\"deadline hello /by 01/01/2011 1500\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[D]\" + \"[\" + (char) 0x2718 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (by: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            t.setDone();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[D]\" + \"[\" + (char) 0x2713 + \"] \" + \"hello\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \" (by: 1st of January 2011, 3:00pm)\", t.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"Exception Occurred.\\n\" + e.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void creatingFailDeadlineTask() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.create(\"deadline hello /by 01/012011 1500\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"1st Exception was not thrown\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"deadline /by 01/01/2011 1500\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"2nd Exception was not thrown\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.create(\"deadline hello /by 01/13/2011 1500\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"3rd Exception was not thrown\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t4 \u003d Task.create(\"deadline hello /by 32/01/2011 1500\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"4th Exception was not thrown\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t5 \u003d Task.create(\"deadline hello /by 31/02/2011 1500\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"5th Exception was not thrown\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t6 \u003d Task.create(\"deadline hello /by 01/13/2011 1500\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"6th Exception was not thrown\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t7 \u003d Task.create(\"deadline hello /by 01/12/211 1500\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(\"7th Exception was not thrown\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertNotNull(e);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void readingFromFile() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.createFromFile(\"T | 0 | join sports club\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[T][\" + (char) 0x2718 + \"] join sports club\", t1.toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.createFromFile(\"T | 1 | join sports club\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[T][\" + (char) 0x2713 + \"] join sports club\", t2.toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.createFromFile(\"D | 0 | don\u0027t die | 22/01/2019 2234\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[D][\" + (char) 0x2718"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"] don\u0027t die (by: 22nd of January 2019, 10:34pm)\", t3.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t4 \u003d Task.createFromFile(\"E | 1 | don\u0027t die | 22/11/2019 2234\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"[E][\" + (char) 0x2713"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "                    + \"] don\u0027t die (at: 22nd of November 2019, 10:34pm)\", t4.toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    public void writingToFile() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t1 \u003d Task.create(\"event hello /at 01/01/2011 1500\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"E | 0 | hello | 1/1/2011 1500\", t1.toFileString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t2 \u003d Task.create(\"deadline hello /by 01/01/2011 1500\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"D | 0 | hello | 1/1/2011 1500\", t2.toFileString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            Task t3 \u003d Task.create(\"todo hello\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            assertEquals(\"T | 0 | hello\", t3.toFileString());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "            fail(e.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 180
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcusteh1238"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "marcusteh1238": 21
    }
  }
]
