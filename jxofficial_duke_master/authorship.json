[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "test {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    mainClassName \u003d \"duke.Launcher\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 32,
      "-": 15
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Driver class for Duke operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * @author JXKENG"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String filePath \u003d \"C:/Users/jxken/Desktop/Github/duke/data/duke.txt\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private MessageHandler messageHandler \u003d new MessageHandler(tasks, storage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private boolean isExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getResponse(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            response \u003d c.execute(tasks, messageHandler, storage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            response \u003d \"\\u2639 OOPS!!! \" + e.getMessage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean applicationShouldExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String hiMessage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return messageHandler.hiMessage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jxofficial": 43,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 9
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static void exit() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 35
    }
  },
  {
    "path": "src/main/java/duke/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * An abstract class meant to be inherited by commands in Duke."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g., \u003ccode\u003elist\u003c/code\u003e, \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edone\u003c/code\u003e commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    String commandInformation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructor for Command class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param commandInformation Information related to command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                           e.g., \u003ccode\u003etaskName\u003c/code\u003e,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                           \u003ccode\u003etaskNumber\u003c/code\u003e,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                           \u003ccode\u003edeadLineDate\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Command(String commandInformation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.commandInformation \u003d commandInformation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes the command tied to each respective sub-class"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and reads result of executed command into preset task.txt file as required"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e referencing task execution status"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *         (success or error)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public abstract String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Informs the caller if the command should result in program termination."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return A boolean specifying if program should terminate after command execution"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 52
    }
  },
  {
    "path": "src/main/java/duke/command/CreateDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003edeadline taskName /by DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CreateDeadlineCommand(String commandInformation) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands with this format: \u003ccode\u003edeadline taskName /by DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e referencing task execution status"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *         (success or error)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String deadline \u003d this.commandInformation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] deadlineParts \u003d deadline.split(\" /by \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String deadLineText \u003d deadlineParts[0];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String by \u003d deadlineParts[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Task task \u003d new Deadline(deadLineText, by);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            response \u003d messageHandler.addTaskConfirmationMessage(task);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            response \u003d error.getMessage() + \". Please enter date in this format DD/MM/YYYY HHMM\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 56
    }
  },
  {
    "path": "src/main/java/duke/command/CreateEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003eevent taskName /at DD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CreateEventCommand(String commandInformation) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands with this format:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003eevent taskName /at DD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e referencing task execution status"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *         (success or error)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String event \u003d this.commandInformation;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] eventParts \u003d event.split(\" /at \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String eventText \u003d eventParts[0];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String at \u003d eventParts[1];"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Task t \u003d new Event(eventText, at);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Event(eventText, at));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            response \u003d messageHandler.addTaskConfirmationMessage(t);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (DateTimeParseException error) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            response \u003d error.getMessage() + \". Please enter date in this format DD/MM/YYYY HHMM - DD/MM/YYYY HHMM\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 57
    }
  },
  {
    "path": "src/main/java/duke/command/CreateTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003etodo taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateTodoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CreateTodoCommand(String commandInformation) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands with this format:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003etodo taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e referencing task execution status"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *         (success or error)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws DukeException if error related to Duke commands occurs"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String todoText \u003d commandInformation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task t \u003d new Todo(todoText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks.addTask(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String response \u003d messageHandler.addTaskConfirmationMessage(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 46
    }
  },
  {
    "path": "src/main/java/duke/command/DeleteTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003edelete taskNumberToDelete\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public DeleteTaskCommand(String commandInformation) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003edelete taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return a \u003ccode\u003eString\u003c/code\u003e referencing task execution status"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *         (successful or failed)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not exist in taskList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(commandInformation);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task t \u003d tasks.deleteTask(taskNumber);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String response \u003d messageHandler.taskDeletedConfirmationMessage(t);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 44
    }
  },
  {
    "path": "src/main/java/duke/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003ebye\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public ExitCommand(String taskInformation) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskInformation);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003ebye\u003c/code\u003e and returns a goodbye message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e goodbye message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return messageHandler.byeMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 38
    }
  },
  {
    "path": "src/main/java/duke/command/FindTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003efind\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class FindTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public FindTaskCommand(String commandInformation) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(commandInformation);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003efind\u003c/code\u003e and searches the list for tasks matching the search term."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e of all search results"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String searchTerm \u003d this.commandInformation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e searchResultsList \u003d tasks.findMatchingTasks(searchTerm);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return messageHandler.searchResults(searchResultsList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 38
    }
  },
  {
    "path": "src/main/java/duke/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003elist\u003c/code\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public ListCommand(String taskInformation) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskInformation);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format: \u003ccode\u003edone taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and prints the entire task list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return All tasks in the list in \u003ccode\u003eString\u003c/code\u003e format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return messageHandler.getAllTasksAsString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 37
    }
  },
  {
    "path": "src/main/java/duke/command/MarkAsDoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Command class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles execution of commands in this format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * \u003ccode\u003edone taskNumberToMarkAsDone\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MarkAsDoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public MarkAsDoneCommand(String taskInformation) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskInformation);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Executes commands in this format:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003edone taskName\u003c/code\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Reads result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks          \u003ccode\u003eTaskList\u003c/code\u003e object which holds the taskList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       and various methods to operate on the taskList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param messageHandler \u003ccode\u003eUI\u003c/code\u003e object which handles console output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage        \u003ccode\u003eStorage\u003c/code\u003e object which allows for reading"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                       result of executed command into preset task.txt file"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e representing the task that was successfully marked as completed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not exist in taskList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String execute(TaskList tasks, MessageHandler messageHandler, Storage storage)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(commandInformation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task t \u003d tasks.markTaskAsCompleted(taskNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        storage.writeToTasksFile(tasks);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return messageHandler.printMarkTaskAsCompletedMessage(t);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 46
    }
  },
  {
    "path": "src/main/java/duke/exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * An abstract class meant to be inherited by the various exceptions related to Duke operations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g., InvalidCommandException, EmptyTodoTextException."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructor for DukeExceptionClass."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param message A String containing information about the error"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jxofficial": 21
    }
  },
  {
    "path": "src/main/java/duke/exception/EmptyTaskTextException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract DukeException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles errors related to \u003ccode\u003etodo\u003c/code\u003e command with no follow up todoInformation"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class EmptyTaskTextException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public EmptyTaskTextException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 12
    }
  },
  {
    "path": "src/main/java/duke/exception/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract DukeException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles errors related to invalid commands"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 11
    }
  },
  {
    "path": "src/main/java/duke/exception/TaskDoesNotExistException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract DukeException class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Handles error when user tries to perform an operation on a task that does not exist in taskList"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TaskDoesNotExistException extends DukeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TaskDoesNotExistException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 12
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a Duke \u003ccode\u003edeadline\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private LocalDateTime byDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Deadline class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003edeadline borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param by       A String for date-time in the format \u003ccode\u003eDD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Deadline(String taskName, String by) throws DateTimeParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.DEADLINE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.byDate \u003d LocalDateTime.parse(by, formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Deadline class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    A String which represents the taskName"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003edeadline borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param by          A String for date-time in the format \u003ccode\u003eDD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Deadline(String taskName, String by, boolean isCompleted) throws DateTimeParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.DEADLINE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.byDate \u003d LocalDateTime.parse(by, formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(by: \" + by + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 50
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Task class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a Duke \u003ccode\u003eevent\u003c/code\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private LocalDateTime date1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private LocalDateTime date2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Event class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003eevent borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param at       A String represents two date-times"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 in the format \u003ccode\u003eDD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Event(String taskName, String at) throws DateTimeParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.EVENT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d at.split(\" - \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date1 \u003d LocalDateTime.parse(parts[0], formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date2 \u003d LocalDateTime.parse(parts[1], formatter);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(at: \" + at + \")\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Event class."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    A String which represents the taskName"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003eevent borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param at          A String represents two date-times"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    in the format \u003ccode\u003eDD/MM/YYYY HHmm - DD/MM/YYYY HHmm\u003c/code\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Event(String taskName, String at, boolean isCompleted) throws DateTimeParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.EVENT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d at.split(\" - \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date1 \u003d LocalDateTime.parse(parts[0], formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.date2 \u003d LocalDateTime.parse(parts[1], formatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"(at: \" + at + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 56
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * An abstract class meant to be inherited by the types of Tasks that Duke accepts"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g., \u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003eevent\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e tasks."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected String taskName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected boolean isCompleted;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected String details;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected TypeOfTask taskType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Task(String taskName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.isCompleted \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Task class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    Information about the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskInformation is \"borrow books\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Task(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskName \u003d taskName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Converts task to \u003ccode\u003eString\u003c/code\u003e that will be scanned into preset task.txt file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return A String representing the task in the specified format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String convertTaskToFileString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        char isCompleted \u003d this.isCompleted ? \u0027Y\u0027 : \u0027N\u0027;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskType \u003d this.taskType.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String result \u003d taskType + \" | \" + isCompleted + \" | \" + this.taskName + \" \" + this.details;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return result.stripTrailing();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Mark task as completed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void markAsCompleted() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.isCompleted \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Get name of task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return taskName in \u003ccode\u003eString\u003c/code\u003e format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert !taskName.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Get details of task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return String representing extra details of task"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getDetails() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean getCompletionStatus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Get entire task represented in a String."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return String representing a task instance"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        char symbol \u003d this.isCompleted ? \u0027Y\u0027 : \u0027N\u0027;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String result \u003d \"[\" + taskType + \"][\" + symbol + \"] \" + taskName + \" \" + details;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return result.stripTrailing();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 92
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.EmptyTaskTextException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * This class encapsulates methods and fields related to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * direct operations on the list of \u003ccode\u003eTask\u003c/code\u003e objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for \u003ccode\u003eTaskList\u003c/code\u003e class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskList A \u003ccode\u003eList\u003c/code\u003e object containing objects of type \u003ccode\u003eTask\u003c/code\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for \u003ccode\u003eTaskList\u003c/code\u003e class"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Creates a new \u003ccode\u003eTaskList\u003c/code\u003e instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Adds task to \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task A \u003ccode\u003eTask\u003c/code\u003e instance to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws EmptyTaskTextException if taskName is blank"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void addTask(Task task) throws EmptyTaskTextException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (task.getTaskName().isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new EmptyTaskTextException(\"Task name cannot be empty\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        taskList.add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert taskList.size() \u003e 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Marks a task as completed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskNumber integer representing the number of the task to be marked as completed"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e that was marked as completed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not correspond to task in list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Task markTaskAsCompleted(int taskNumber) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskNumber \u003c 1 || taskNumber \u003e taskList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new TaskDoesNotExistException(\"Task not found\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        task.markAsCompleted();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert task.isCompleted \u003d\u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Deletes a task given its taskNumber."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskNumber integer representing the number of the task to be marked as completed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e that was deleted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws TaskDoesNotExistException if taskNumber does not correspond to task in list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Task deleteTask(int taskNumber) throws TaskDoesNotExistException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskNumber \u003e taskList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new TaskDoesNotExistException(\"Task not found\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Task task \u003d taskList.get(taskNumber - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        taskList.remove(task);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert !taskList.contains(task);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Gets list from \u003ccode\u003eTaskList\u003c/code\u003e object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eList\u003c/code\u003e object which contains list matching search results"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public List\u003cTask\u003e findMatchingTasks(String searchTerm) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e searchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (task.getTaskName().toLowerCase().contains(searchTerm.toLowerCase())) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                searchResults.add(task);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public List\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert taskList !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 113
    }
  },
  {
    "path": "src/main/java/duke/task/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Inherits from abstract Task class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Represents a Duke \u003ccode\u003etodo\u003c/code\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Todo class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName A String which represents the taskName"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                 where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Todo(String taskName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.TODO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Alternative constructor for Todo class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskName    A String which represents the taskName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    e.g., \u003ccode\u003etodo borrow books\u003c/code\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *                    where the taskName is \"borrow books\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param isCompleted A boolean indicating if the task is completed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Todo(String taskName, boolean isCompleted) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(taskName, isCompleted);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskType \u003d TypeOfTask.TODO;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.details \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 39
    }
  },
  {
    "path": "src/main/java/duke/task/TypeOfTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Enum that contains the various types of tasks accepted by Duke"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * e.g.,\u003ccode\u003etodo\u003c/code\u003e, \u003ccode\u003edeadline\u003c/code\u003e, \u003ccode\u003eevent\u003c/code\u003e."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public enum TypeOfTask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    TODO, DEADLINE, EVENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Enum represented in \u003ccode\u003eString\u003c/code\u003e."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return String representing the enum"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskType \u003d super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskType.substring(0, 1) + taskType.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 20
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a Label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructor for DialogBox class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param text A \u003ccode\u003eString\u003c/code\u003e representing the dialog text"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param img  An \u003ccode\u003eImage\u003c/code\u003e object representing the avatar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ObservableList\u003cNode\u003e temp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Collections.reverse(temp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        getChildren().setAll(temp);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Creates a user dialog box."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param text A \u003ccode\u003eString\u003c/code\u003e representing the dialog text"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param img  An \u003ccode\u003eImage\u003c/code\u003e object representing the avatar"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return A \u003ccode\u003eDialogBox\u003c/code\u003e object with the user text and avatar"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Creates a duke response dialog box."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param text A \u003ccode\u003eString\u003c/code\u003e representing the dialog text"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param img  An \u003ccode\u003eImage\u003c/code\u003e object representing the avatar"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return A \u003ccode\u003eDialogBox\u003c/code\u003e object with the duke\u0027s response and avatar"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 84
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Custom container for the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jx.jpg\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/keanu.png\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Set up when MainWindow is initialized."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String hiMessage \u003d duke.hiMessage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(hiMessage, dukeImage));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String fullCommand \u003d userInput.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String response \u003d duke.getResponse(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                DialogBox.getUserDialog(fullCommand, userImage),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (duke.applicationShouldExit()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Main.exit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 60
    }
  },
  {
    "path": "src/main/java/duke/ui/MessageHandler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Helper class for displaying user interface messages."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class MessageHandler {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for UI class."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks   A \u003ccode\u003eTaskList\u003c/code\u003e object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param storage A \u003ccode\u003eStorage\u003c/code\u003e object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public MessageHandler(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Goodbye message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e goodbye message"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String byeMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Hello message and retrieves previously saved state from local file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e hello message"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String hiMessage() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String message \u003d \"Hello! I\u0027m Duke.\\n\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            storage.readFromTasksFileToList(tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            message +\u003d \"This is where you left off previously:\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            message +\u003d \"Fetching failed. \" + e.getMessage() + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            message +\u003d \"Creating file now...\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            File dukeTxt \u003d new File(Duke.filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                dukeTxt.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                message +\u003d \"File created! \" + dukeTxt.getAbsolutePath() + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                message +\u003d \"Reading file...\\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                message +\u003d \"\\t File creation was not successful. \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                message +\u003d \"\\t Exiting system.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.exit(-1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        message +\u003d getAllTasksAsString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert !message.isEmpty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Add task success message."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task Task that was successfully added"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e task added confirmation message"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String addTaskConfirmationMessage(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String pluralOrNot \u003d taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e list \u003d tasks.getList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String message \u003d \"Got it. I\u0027ve added this task: \\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                + \"\\t  \" + task.toString() + \"\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                + \"Now you have \" + list.size() + \" \" + pluralOrNot + \" in the list\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * \u003ccode\u003eString\u003c/code\u003e of all tasks in list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return All tasks in \u003ccode\u003eString\u003c/code\u003e format"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getAllTasksAsString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskListString;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            taskListString \u003d \"No pending tasks\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String pluralOrNot \u003d taskList.size() \u003d\u003d 1 ? \"Task\" : \"Tasks\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            taskListString \u003d pluralOrNot + \"\\n\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                taskListString +\u003d \"\\t \" + (i + 1) + \".\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                taskListString +\u003d taskList.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert !taskListString.isEmpty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return taskListString;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Mark task as completed success message."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task Task that was successfully marked as completed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e task marked as completed success message"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String printMarkTaskAsCompletedMessage(Task task) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return \"Nice! I\u0027ve marked this task as done: \\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                + \"\\t  [T] \" + task.getTaskName() + \" \" + task.getDetails();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * DeleteTask success message."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param task Task that was successfully deleted"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e task successfully deleted message"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String taskDeletedConfirmationMessage(Task task) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String pluralOrNot \u003d taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // getting \u0027T\u0027 or \u0027F\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        char isCompleted \u003d ((Boolean) task.getCompletionStatus()).toString().toUpperCase().charAt(0);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert isCompleted \u003d\u003d \u0027T\u0027 || isCompleted \u003d\u003d \u0027F\u0027;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return \"I\u0027ve removed this task: \\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                + \"\\t  [\" + isCompleted + \"]\" + task.getTaskName() + \" \" + task.getDetails() + \"\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                + \"Now you have \" + taskList.size() + \" \" + pluralOrNot + \" in the list\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * List of search results."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param taskList list of search results"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return \u003ccode\u003eString\u003c/code\u003e list of search results"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String searchResults(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String results;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            results \u003d \"You have no tasks that match the search query\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            results \u003d \"Here are your search results: \\n\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                results +\u003d \"\\t \" + (i + 1) + \".\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                results +\u003d (taskList.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert !results.isEmpty();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 168
    }
  },
  {
    "path": "src/main/java/duke/utilities/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.MarkAsDoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.CreateTodoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.CreateDeadlineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.CreateEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.FindTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Helper class for parsing Duke commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses and executes Duke commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param fullCommand A \u003ccode\u003eString\u003c/code\u003e representing the full input command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static Command parse(String fullCommand) throws InvalidCommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d fullCommand.split(\" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String command \u003d parts[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String commandInformation \u003d fullCommand.substring(command.length()).stripLeading();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new ExitCommand(commandInformation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new ListCommand(commandInformation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new MarkAsDoneCommand(commandInformation);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new DeleteTaskCommand(commandInformation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CreateTodoCommand(commandInformation);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CreateDeadlineCommand(commandInformation);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CreateEventCommand(commandInformation);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new FindTaskCommand(commandInformation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new InvalidCommandException(\"I\u0027m sorry, but I don\u0027t know what that means\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 52
    }
  },
  {
    "path": "src/main/java/duke/utilities/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package duke.utilities;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * This class deals with reading-write processes of disk files."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private File tasksFile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Default constructor for Storage class, which creates a file given a filepath."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param filePath A filepath in \u003ccode\u003eString\u003c/code\u003e format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tasksFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Write tasks from list into file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e object that will be the source to write into the file"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void writeToTasksFile(TaskList tasks) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            FileWriter taskFile \u003d new FileWriter(tasksFile);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            for (Task task : taskList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String fileString \u003d task.convertTaskToFileString() + \"\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                taskFile.write(fileString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            taskFile.close();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (IOException error) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(error.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Read tasks from file into list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param tasks A \u003ccode\u003eTaskList\u003c/code\u003e object which will be the destination"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *              for each \u003ccode\u003eTask\u003c/code\u003e read from file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws FileNotFoundException if file is not found"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void readFromTasksFileToList(TaskList tasks) throws FileNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Scanner sc \u003d new Scanner(tasksFile);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        while (sc.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String fileLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                Task t \u003d convertFileLineToTask(fileLine);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                tasks.addTask(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } catch (DukeException dukeError) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(\"\\u2639 OOPS!!! \" + dukeError.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } catch (DateTimeParseException parseError) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                System.out.println(parseError.getMessage()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                        + \". Please make sure dates from file are in this format DD/MM/YYYY HHMM\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Convert one line from file into a \u003ccode\u003eTask\u003c/code\u003e object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param fileLine A \u003ccode\u003eString\u003c/code\u003e representing a line from the file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return converted \u003ccode\u003eTask\u003c/code\u003e object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Task convertFileLineToTask(String fileLine)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throws InvalidCommandException, DateTimeParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] parts \u003d fileLine.split(\" \\\\| \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskType \u003d parts[0].toUpperCase();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        boolean isCompleted \u003d parts[1].equals(\"T\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String taskString \u003d parts[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"TODO\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new Todo(taskString, isCompleted);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"DEADLINE\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String[] deadlineParts \u003d taskString.split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String deadlineText \u003d deadlineParts[0];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String by \u003d deadlineParts[1].replace(\")\", \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assert !by.contains(\")\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new Deadline(deadlineText, by, isCompleted);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"EVENT\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String[] eventParts \u003d taskString.split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String eventText \u003d eventParts[0];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            String at \u003d eventParts[1].replace(\")\", \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assert !at.contains(\")\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new Event(eventText, at, isCompleted);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new InvalidCommandException("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    \"There were some commands that I didn\u0027t recognize in your tasks file\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 113
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 16
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fx:controller\u003d\"duke.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jxofficial": 25
    }
  },
  {
    "path": "src/test/java/CreateEventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.ui.MessageHandler;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.command.CreateEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CreateEventCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static String filePath \u003d \"C:\\\\Users\\\\jxken\\\\Desktop\\\\Github\\\\duke\\\\src\\\\test\\\\java\\\\dukeTest.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static Storage storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static TaskList tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static MessageHandler messageHandler \u003d new MessageHandler(tasks, storage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void emptyFile() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void executeCreateEventCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedSubString1 \u003d \"Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedSubString2 \u003d \"[Event][N] Project Meeting (at: 28/08/2019 16:00 - 28/08/2019 18:00)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String expectedSubString3 \u003d \"Now you have 1 task in the list\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String actual \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CreateEventCommand command \u003d new CreateEventCommand(\"Project Meeting /at 28/08/2019 16:00 - 28/08/2019 18:00\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            actual \u003d command.execute(tasks, messageHandler, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"execute create event command test should pass, but it didn\u0027t because \" + e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(actual.contains(expectedSubString1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(actual.contains(expectedSubString2));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(actual.contains(expectedSubString3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 56
    }
  },
  {
    "path": "src/test/java/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.utilities.Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.exception.TaskDoesNotExistException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import duke.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String FILE_PATH \u003d \"C:\\\\Users\\\\jxken\\\\Desktop\\\\Github\\\\duke\\\\src\\\\test\\\\java\\\\dukeTest.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Storage storage \u003d new Storage(FILE_PATH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void setUpTaskListObject() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Todo(\"borrow books\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.addTask(new Event(\"project meeting\", \"28/08/2019 18:00 - 28/08/2019 20:30\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"Adding tasks, setup step should be successful. \" + e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void deleteTask_taskExists_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.deleteTask(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (TaskDoesNotExistException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            System.out.println(\"Task exists, this exception should not be thrown \" + e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(1, taskList.size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(taskList.get(0).getTaskName(), \"project meeting\" );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void deleteTask_taskDoesNotExist_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cTask\u003e taskList \u003d tasks.getList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(2, taskList.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            tasks.deleteTask(10);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (TaskDoesNotExistException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertEquals(\"Task not found\", e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 60
    }
  },
  {
    "path": "tutorials/textUiTestingTutorial.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Text UI Testing Tutorial"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "1. Create a folder `[project root]\\text-messageHandler-test`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add a `runtest.bat` (if you are on Windows) or `runtest.sh` (if you are on a *nix OS) into the folder, containing the script below.\u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  `runtest.bat`:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "   @ECHO OFF"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "   if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   REM delete output from previous run"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   del ACTUAL.TXT"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compile the code into the bin folder"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "       echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "       exit /b 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   )"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "   REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   `runtest.sh`:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   ```shell"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   #!/usr/bin/env bash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   # create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ ! -d \"../bin\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "       mkdir ../bin"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   # delete output from previous run"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ -e \"./ACTUAL.TXT\" ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "       rm ACTUAL.TXT"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   # compile the code into the bin folder, terminates if error occurred"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/Duke.java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"********** BUILD FAILURE **********\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   # run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "   # compare the output to the expected output"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   diff ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "   if [ $? -eq 0 ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "   then"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: PASSED\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 0"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   else"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "       echo \"Test result: FAILED\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "       exit 1"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   fi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the `javac` and `java` commands in the script to match the name/location of your main class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `EXPECTED.txt` to the same folder, containing the expected output."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. Add an `input.txt` containing the input commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the `.bat`/`.sh` file to execute the test."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**Authors:**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Initial Version: based on se-edu/addressbook-level2, adapted by Jeffry Lum"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 1,
      "-": 73
    }
  }
]
