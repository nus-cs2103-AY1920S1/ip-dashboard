[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    archivesBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    mainClassName \u003d \"duke.application.Launcher\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 36,
      "-": 12
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Duke Skywalker is an experienced task manager (not the Windows one) who uses the force to create, modify, delete, and search through different kinds of Tasks. Duke Skywalker emulates a CLI, though it has a GUI."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### Create Tasks "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "User can create 3 different kinds of Tasks: `ToDo`, `Deadline`, and `Event`."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`ToDo`: only has description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Deadline`: has description, date and time"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Event`: has description, date, startTime and endTime"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### Mark Task As Done"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "User can mark a task as done using its 1-index number."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### Delete a Task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "User can delete a single task using its 1-index number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### Delete All Done Tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "User can delete all the tasks marked as done in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### List All Tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "User can list all tasks currently available in the list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `todo` - to add a ToDo to TaskList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows user to create a new `Todo` Task with only a description (no date and time)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `todo \u003cdescription\u003e`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`todo eat lunch`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " [T][-] eat lunch"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Now you have 1 tasks in this list.`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `deadline` - to add a Deadline to TaskList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows user to create a new `Deadline` Task with a description, date, and time."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `deadline \u003cdescription\u003e /by DD/MM/YYYY \u003ctime in 24-hour clock format\u003e`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`deadline sleep /by 18/09/2019 2355`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " [D][-] sleep (by: 18th September, 2019. 11:55pm)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Now you have 2 tasks in the list.`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `event` - to add an Event to TaskList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows user to create a new `Event` Task with a description, date, and startTime and endTime to specify a duration."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `event \u003cdescription\u003e /at DD/MM/YYYY \u003cstartTime in 24-hour clock format\u003e-\u003cendTime in 24-hour clock format\u003e`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`event eat lunch /at 19/09/2019 1300-1400`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " [E][-] eat lunch (at: 19th September, 2019. 1:00pm - 19th September, 2019. 2:00pm)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Now you have 3 tasks in the list.`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `done` - to mark a Task as done"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows user to mark a particular task as done and displays the Task that is done."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `done \u003c1-index of Task to be marked as done\u003e`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`done 1`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " [T][+] eat lunch`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `list` - to list out all the Tasks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows user to list out all the Tasks in the TaskList."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `list`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Here are the task(s) in your list:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "1. [T][+] eat lunch"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "2. [D][-] sleep (by: 18th Spetember, 2019. 11:55pm)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "3. [E][-] eat lunch (at: 19th September, 2019. 1:00pm - 19th September, 2019. 2:00pm)`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `delete` - to delete a task from TaskList"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows user to delete a particular Task from TaskList and displays the Task that is deleted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `delete \u003c1-index of the Task to be deleted\u003e`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`delete 2`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " [D][-] sleep (by: 18th September, 2019. 11:55pm)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Now you have 2 tasks in this list.`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `deletedone` - to delete all the Tasks that are done"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows users to delete all tasks marked as done in a single command and prints the Tasks deleted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `deletedone`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`deletedone`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`I have removed all the tasks that were done. Here are the removed tasks:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "1. [T][+] eat lunch"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Now you have 1 tasks left in the list.`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `find` - to filter the list of Tasks using a String"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Allows users to filter out tasks; it only prints out the tasks that have the given String in their description."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "The format of the command is: `find \u003cfiltering String\u003e`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`find lunch`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Here are the tasks with \u0027lunch\u0027 in their description:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "1. [E][-] eat lunch (at: 19th September, 2019. 1:00pm - 19th September, 2019. 2:00pm)`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "### `bye` - bids adieu to the user"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "Displays a goodbye message and closes the program."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "`Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "May The Force Be With You!`"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 139,
      "-": 18
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/application/DialogBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Rectangle clip \u003d new Rectangle(displayPicture.getFitWidth(), displayPicture.getFitHeight());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        clip.setArcWidth(99);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        clip.setArcHeight(99);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        displayPicture.setClip(clip);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new DialogBox(text, img);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Gets DialogBox for Duke."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param text text that will be displayed in Duke\u0027s dialog box"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param img image that will be displayed in Duke\u0027s dialog box"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return DialogBox for Duke with text and an image"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static DialogBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        var db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        db.setBackground(new Background(new BackgroundFill(new Color(0.96, 0.79, 0.64, 0.7),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Insets.EMPTY)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 80
    }
  },
  {
    "path": "src/main/java/duke/application/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Executor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents an application that manages \u003ccode\u003eToDo\u003c/code\u003es, \u003ccode\u003eduke.task.Event\u003c/code\u003es, and \u003ccode\u003eDeadline\u003c/code\u003es."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A Duke object can add \u003ccode\u003eTask\u003c/code\u003es, delete them, mark them as Done, and maintain a history of Tasks entered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * during earlier execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a Duke object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates a new \u0027data\u0027 directory and \u0027history.txt\u0027 file, if none exist to maintain TaskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //the following solution has been adapted from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        // https://github.com/nus-cs2103-AY1920S1/duke/pull/37/commits/060a6e36a706715f663c335ddb0b7d615fd4af81"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String rootPath \u003d System.getProperty(\"user.dir\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String dataDirectoryPath \u003d rootPath + File.separator + \"data\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String dataFilePath \u003d rootPath + File.separator + \"data\" + File.separator + \"history.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            File dataDirectory \u003d new File(dataDirectoryPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            File dataFile \u003d new File(dataFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (dataDirectory.mkdir()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                dataFile.createNewFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                System.out.println(\"New directory and history file created.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                if (dataFile.mkdir()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    System.out.println(\"New file created.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            storage \u003d new Storage(dataFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                tasks \u003d new TaskList(storage.load());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } catch (IOException de) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                ui.showLoadingError();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                ui.showException(de);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            System.err.println(ie);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Integrates \u003ccode\u003eParser\u003c/code\u003e, \u003ccode\u003eTaskList\u003c/code\u003e, \u003ccode\u003eStorage\u003c/code\u003e, and \u003ccode\u003eUi\u003c/code\u003e to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * deal with User\u0027s commands and accordingly manage database."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Scanner sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String command \u003d sc.nextLine();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Parser commandAnalyzer \u003d new Parser(command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                if (commandAnalyzer.getType().equals(\"bye\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                System.out.print(Executor.execute(commandAnalyzer, ui, tasks, storage));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                System.err.println(de.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * You should have your own function to generate a response to user input."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Replace this stub with your completed method."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    String getResponse(String input) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Parser commandAnalyzer \u003d new Parser(input);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return Executor.execute(commandAnalyzer, ui, tasks, storage); //returns Duke\u0027s response to command"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException de) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return ui.showException(de);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    String getWelcome() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return ui.showWelcome();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 99,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/application/Launcher.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 12
    }
  },
  {
    "path": "src/main/java/duke/application/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * A GUI for Duke using FXML."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Duke duke \u003d new Duke();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            stage.setTitle(\"Duke Skywalker\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 32
    }
  },
  {
    "path": "src/main/java/duke/application/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.application;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaRey.jpg\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaLuke.png\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Sets the Duke object that will interact with the MainWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param d Duke object that interacts with user"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void setDuke(Duke d) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                DialogBox.getDukeDialog(duke.getWelcome(), dukeImage)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * the dialog container. Clears the user input after processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        //ignore if no input provided."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (input.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String response \u003d duke.getResponse(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                DialogBox.getUserDialog(input, userImage),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                DialogBox.getDukeDialog(response, dukeImage)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (response.equals(\"Bye. Hope to see you again soon!\\nMay The Force Be With You!\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 67
    }
  },
  {
    "path": "src/main/java/duke/command/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents an Exception that is encountered when dealing with Duke objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 10
    }
  },
  {
    "path": "src/main/java/duke/command/Executor.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Executor {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Analyzes a Parser\u0027s data and returns a string that responds to the command in the parser using Ui\u0027s methods."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * While executing a command, method also updates TaskList and the database file accordingly."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param commandAnalyzer parser object containing command information"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param ui interface that can provide responses to the command"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param tasks TaskList to be updated according to the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param storage Storage object that updates database file \u0027history\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return string that represents Duke\u0027s response to the User\u0027s command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static String execute(Parser commandAnalyzer, Ui ui, TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boolean addedTask \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (commandAnalyzer.isValid()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String type \u003d commandAnalyzer.getType();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (type.equals(\"done\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int index \u003d Integer.parseInt(commandAnalyzer.getList().get(0)) - 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    if (index \u003e\u003d tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        throw new DukeException(\" :( OOPS!!! Requested task number is not available\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    Task temp \u003d tasks.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    temp.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    result \u003d ui.showTaskDone(temp);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    storage.update(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                } catch (DukeException | IOException de) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    result \u003d ui.showException(de);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    result \u003d ui.showNumberFormatError(\"done\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (type.equals(\"deletedone\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    ArrayList\u003cTask\u003e deletedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Task task \u003d tasks.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        if (task.isDone()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            deletedTasks.add(tasks.remove(i));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            i--;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    if (deletedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result \u003d \"No tasks are currently done!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result \u003d ui.showDeletedTasks(deletedTasks, tasks.size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    storage.update(tasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                } catch (IOException ie) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    result \u003d ui.showException(ie);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (type.equals(\"bye\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                result \u003d ui.showGoodBye();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (type.equals(\"list\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                result \u003d ui.showTasks(tasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (type.equals(\"find\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                String filter \u003d commandAnalyzer.getList().get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                result \u003d ui.showFound(tasks.find(filter), filter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                if (type.equals(\"todo\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Task temp \u003d new ToDo(commandAnalyzer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        addedTask \u003d tasks.add(temp);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        if (addedTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result \u003d ui.showTaskCreated(temp, tasks.size()); //change arr to TaskList"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            storage.update(tasks);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result \u003d ui.showDuplicateTaskMessage(temp);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    } catch (IOException de) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result \u003d ui.showException(de);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                } else if (type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Task temp \u003d new Deadline(commandAnalyzer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        addedTask \u003d tasks.add(temp);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        if (addedTask) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result +\u003d ui.showTaskCreated(temp, tasks.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            storage.update(tasks);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result +\u003d ui.showDuplicateTaskMessage(temp);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    } catch (IOException de) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result +\u003d ui.showException(de);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                } else if (type.equals(\"event\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Task temp \u003d new Event(commandAnalyzer);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        addedTask \u003d tasks.add(temp);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        if (addedTask) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result +\u003d ui.showTaskCreated(temp, tasks.size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            storage.update(tasks);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result +\u003d ui.showDuplicateTaskMessage(temp);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    } catch (IOException de) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result +\u003d ui.showException(de);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                } else if (type.equals(\"delete\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        int index \u003d Integer.parseInt(commandAnalyzer.getList().get(0)) - 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        if (index \u003e\u003d tasks.size() || index \u003c 0) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            throw new DukeException(\" :( OOPS!!! Task to be deleted is not available\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            Task temp \u003d tasks.remove(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                            result +\u003d ui.showTaskDeleted(temp, tasks.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        storage.update(tasks);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    } catch (DukeException | IOException de) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result +\u003d ui.showException(de);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        result +\u003d ui.showNumberFormatError(\"delete\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! I\u0027m sorry but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } catch (DukeException de) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                result +\u003d ui.showException(de);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 133
    }
  },
  {
    "path": "src/main/java/duke/command/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Makes sense of user commands and holds and ArrayList containing information of how to process commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private boolean valid \u003d true;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates a Parser object that takes a command and processes an ArrayList containing information to be used to"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * declare and initialize Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param command command provided by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws DukeException exception returned when format of command not right."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Parser(String command) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        command \u003d command.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String[] commandWords \u003d command.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String caseSensitiveOrder \u003d commandWords[0];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String order \u003d caseSensitiveOrder.toLowerCase();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        boolean addedTask \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (command.split(caseSensitiveOrder  + \" \").length \u003d\u003d 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 (order.equals(\"event\") || order.equals(\"todo\") || order.equals(\"deadline\"))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            throw new DukeException(\" :( OOPS!!! The description of \" + order + \"s cannot be empty.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (order.equals(\"todo\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            type \u003d \"todo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (command.split(caseSensitiveOrder + \" \").length \u003e 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                list.add(command.split(caseSensitiveOrder + \" \")[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Please provide description.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else if (order.equals(\"event\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (command.split(\"/at\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! An event must have a start and end time. Use \u0027/at\u0027.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            type \u003d \"event\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String instruction \u003d command.split(caseSensitiveOrder + \" \")[1];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] details \u003d instruction.split(\" /at \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (details.length !\u003d 2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid Format. Either Description or Date\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        + \" and/or start and end time not provided.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] dateAndTime \u003d details[1].split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (dateAndTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid format. Please enter \u0027DD/MM/YYYY HHMM-HHMM\u0027\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (dateAndTime[1].split(\"-\").length !\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid format. Must enter start and end time.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int startTime \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int endTime \u003d 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                startTime \u003d Integer.parseInt(dateAndTime[1].split(\"-\")[0]);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                endTime \u003d Integer.parseInt(dateAndTime[1].split(\"-\")[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid Format. Please enter numbers for date and time in \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        + \"\u0027DD/MM/YYYY HHMM-HHMM\u0027 format\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int startHours \u003d startTime / 100;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert startHours \u003e\u003d 0 \u0026\u0026 startHours \u003c\u003d 24 : \"Hours should be in 0-24 range!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int endHours \u003d endTime / 100;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert endHours \u003e\u003d 0 \u0026\u0026 endHours \u003c\u003d 24 : \"Hours should be in 0-24 range!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int startMinutes \u003d startTime % 100;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert startMinutes \u003e\u003d 0 \u0026\u0026 startMinutes \u003c\u003d 60 : \"Minutes should be in 0-60 range!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int endMinutes \u003d endTime % 100;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert endMinutes \u003e\u003d 0 \u0026\u0026 endMinutes \u003c\u003d 60 : \"Minutes should be in 0-60 range!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] dateArray \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String day \u003d dateArray[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String month \u003d dateArray[1];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String year \u003d dateArray[2];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert Integer.parseInt(month) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(month) \u003c\u003d 12 : \"Month should be in 1-12 range!\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert Integer.parseInt(year) \u003e 0 : \"Year should be positive (restricted to A.D.)\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert Integer.parseInt(day) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(day) \u003c\u003d 31 : \"Day should be restricted in 1-31 range\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert startHours \u003c\u003d endHours : \"startTime cannot be greater than endTime.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (startHours \u003d\u003d endHours) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                assert startMinutes \u003c endMinutes : \"startTime cannot be greater than or equal to endTime.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(details[0]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(day);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(month);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(year);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(\"\" + startHours);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(\"\" + startMinutes);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(\"\" + endHours);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(\"\" + endMinutes);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else if (order.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            type \u003d \"deadline\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (command.split(\"/by\").length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! An deadline must have date and time. Use \u0027/by\u0027.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String instruction \u003d command.split(caseSensitiveOrder + \" \")[1];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] details \u003d instruction.split(\" /by \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (details.length !\u003d 2) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid Format. Either Description or DateAndTime not provided.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] dateAndTime \u003d details[1].split(\" \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (dateAndTime.length !\u003d 2) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid format for date and time. Please enter \u0027DD/MM/YYYY HHMM\u0027\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int time \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                time \u003d Integer.parseInt(dateAndTime[1]);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Invalid Format. Please enter numbers for date and time in \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        + \"\u0027DD/MM/YYYY HHMM\u0027 format\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int hours \u003d time / 100;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            int minutes \u003d time % 100;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] dateArray \u003d dateAndTime[0].split(\"/\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert hours \u003e\u003d 0 \u0026\u0026 hours \u003c\u003d 24 : \"Hour should be within 0-24 range!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert minutes \u003e\u003d 0 \u0026\u0026 minutes \u003c\u003d 60 : \"Minutes should be within 0-60 range!\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String day \u003d dateArray[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String month \u003d dateArray[1];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String year \u003d dateArray[2];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert Integer.parseInt(month) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(month) \u003c\u003d 12 : \"Month should be in 1-12 range!\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert Integer.parseInt(year) \u003e 0 : \"Year should be positive (restricted to A.D.)\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assert Integer.parseInt(day) \u003e\u003d 1 \u0026\u0026 Integer.parseInt(day) \u003c\u003d 31 : \"Day should be restricted in 1-31 range\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(details[0]);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(dateArray[0]);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(dateArray[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(dateArray[2]);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(\"\" + hours);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(\"\" + minutes);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else if (order.equals(\"done\") || order.equals(\"delete\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            type \u003d order;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(command.split(caseSensitiveOrder + \" \")[1]);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else if (order.equals(\"list\") || order.equals(\"bye\") || order.equals(\"deletedone\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            type \u003d order;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else if (order.equals(\"find\")) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            type \u003d \"find\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            list.add(command.split(caseSensitiveOrder + \" \")[1]);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            valid \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the type of command to execute."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return type of command according to which Duke\u0027s run can perform certain roles."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns information about the command to be executed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return ArrayList that contains particular command information at each index."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ArrayList\u003cString\u003e getList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Determines whether the command is Valid or not."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return boolean to determine if illegal command provided by user."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 164
    }
  },
  {
    "path": "src/main/java/duke/command/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.ToDo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Manages the file that acts as a database for the tasks provided by User."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    String filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Processes data in the history file and creates an ArrayList holding the User\u0027s tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return ArrayList holding the Tasks retrieved from history file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws DukeException thrown if a task is of invalid format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IOException thrown id filePath is non-Existent."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ArrayList\u003cTask\u003e load() throws DukeException, IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Scanner reader \u003d new Scanner(f);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        while (reader.hasNext()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String s \u003d reader.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String[] tempArray \u003d s.split(\" -- \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Task t;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (tempArray[0].equals(\"[D]\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                String dateTime \u003d tempArray[3];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Calendar dateAndTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                String[] date \u003d dateTime.split(\" \")[0].split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int time \u003d Integer.parseInt(dateTime.split(\" \")[1]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int hours \u003d time / 100;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int minutes \u003d time % 100;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                dateAndTime.set(Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Integer.parseInt(date[1]) - 1,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Integer.parseInt(date[0]),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        hours,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        minutes);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                t \u003d new Deadline(tempArray[2], dateAndTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (tempArray[0].equals(\"[E]\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                String dateTime \u003d tempArray[3];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Calendar startDateAndTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Calendar endDateAndTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                String[] date \u003d dateTime.split(\" \")[0].split(\"/\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int startTime \u003d Integer.parseInt(dateTime.split(\" \")[1].split(\"-\")[0]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int endTime \u003d Integer.parseInt(dateTime.split(\" \")[1].split(\"-\")[1]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int startHours \u003d startTime / 100;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int startMinutes \u003d startTime % 100;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int endHours \u003d endTime / 100;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                int endMinutes \u003d endTime % 100;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                startDateAndTime.set(Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Integer.parseInt(date[1]) - 1,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Integer.parseInt(date[0]),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        startHours,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        startMinutes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                endDateAndTime.set(Integer.parseInt(date[2]),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Integer.parseInt(date[1]) - 1,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        Integer.parseInt(date[0]),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        endHours,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                        endMinutes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                t \u003d new Event(tempArray[2], startDateAndTime, endDateAndTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (tempArray[0].equals(\"[T]\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                t \u003d new ToDo(tempArray[2]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                throw new DukeException(\" :( OOPS!!! Not a valid Task type.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (tempArray[1].equals(\"[+]\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                t.markAsDone();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            result.add(t);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Uses TaskList holding all current Tasks to update history file to hold their information."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param tasks the TaskList that the history file must reflect."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @throws IOException thrown if filePath of history file is non-Existent."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void update(TaskList tasks) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String textToAdd \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (Task t : tasks.getArr()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            String type \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (t instanceof Event) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                type \u003d \"E\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (t instanceof ToDo) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                type \u003d \"T\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            } else if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                type \u003d \"D\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            textToAdd +\u003d \"[\" + type + \"] -- \" + \"[\" + t.getStatusIcon() + \"] -- \" + t.getDescription();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (t instanceof Event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Calendar startTime \u003d ((Event) t).getStartTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Calendar endTime \u003d ((Event) t).getEndTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                SimpleDateFormat startDateFormat \u003d new SimpleDateFormat(\" -- dd/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                textToAdd +\u003d startDateFormat.format(startTime.getTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                SimpleDateFormat endDateFormat \u003d new SimpleDateFormat(\"-HHmm\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                textToAdd +\u003d endDateFormat.format(endTime.getTime());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (t instanceof Deadline) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Calendar time \u003d ((Deadline) t).getTime();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\" -- dd/MM/YYYY HHmm\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                textToAdd +\u003d dateFormat.format(time.getTime());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            textToAdd +\u003d \"\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        fw.write(textToAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 124
    }
  },
  {
    "path": "src/main/java/duke/command/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Maintains an ArrayList of \u003ccode\u003eTask\u003c/code\u003es that keeps track of all Tasks available at a given time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private ArrayList\u003cTask\u003e arr;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a taskList object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param arrayList ArrayList that the represents the TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e arrayList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        arr \u003d arrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Constructs a taskList with an empty ArrayList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        arr \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the Tasks that are in Database."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return ArrayList of Tasks"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ArrayList\u003cTask\u003e getArr() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns number of Tasks in Database."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return number of tasks to manage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return arr.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns the Task at particular index of the TaskList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param index index of element to be returned."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return element at \u0027index\u0027 of TaskList."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return arr.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Removes the Task at particular index of TaskList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param index index of element to be deleted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return Task that is removed from the TaskList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Task remove(int index) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return arr.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Appends a task to the TaskList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param task task to be appended to the TaskList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return boolean indicating if the given task in argument is unique to the TaskList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean add(Task task) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (arr.contains(task)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            arr.add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Finds Tasks that have the input string in their descriptions."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param filter the String that determines whether or not Task will be included in the output."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return TaskList containing subset of Tasks that contain filter in their description."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public TaskList find(String filter) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArrayList\u003cTask\u003e tempArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (Task tempTask : arr) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            if (tempTask.getDescription().contains(filter)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                tempArray.add(tempTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return new TaskList(tempArray);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Determines if there are no tasks in the TaskList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return boolean representing if there are any tasks in the TaskList."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return arr.isEmpty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 97
    }
  },
  {
    "path": "src/main/java/duke/command/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Interacts with user by providing messages when required."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Each method returns a string that dukeDialogBox will display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static String hr \u003d \"______________________________________________________________________\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints welcome when Duke is run."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing welcome message"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showWelcome() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Hello there! I\u0027m Duke Skywalker.\\nWhat can I do for you?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints goodbye when \u0027bye\u0027 command executed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing GoodBye message"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showGoodBye() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return \"Bye. Hope to see you again soon!\\nMay The Force Be With You!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints exception\u0027s message."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param e exception that needs to be printed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing the Exception message"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showException(Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return e.getMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints particular type of error message when non-number input is provided where number is required."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param type type of command for which the error message needs to be generated"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing the numberFormatError message"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showNumberFormatError(String type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case \"done\" : result +\u003d \" :( OOPS!!! Invalid format.\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + \" Please enter the number of the task to be marked as done.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case \"delete\" : result +\u003d \" :( OOPS!!! Invalid format.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + \" Please enter the number of the task to be deleted.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        default : result +\u003d \" :( OOPS!!! Invalid format.\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            + \" Please enter a number.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints a message providing details about task just created."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param task the task that is created"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param noOfTasks number of tasks at the time, usually from TaskList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing the Task that is created and the number of Tasks in the TaskList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showTaskCreated(Task task, int noOfTasks) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Got it. I\u0027ve added this task:\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \" \" + task + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Now you have \" + noOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints a message providing details about the task just marked as done."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param task task that is marked as done"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing the Task that is marked as done"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showTaskDone(Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"  \" + task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints a message providing details about the task just deleted and remaining tasks in TaskList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param task task that is just deleted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param noOfTasks number of tasks in TaskList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing the Task that is deleted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showTaskDeleted(Task task, int noOfTasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Noted. I\u0027ve removed this task:\\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \" \" + task + \"\\n\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Now you have \" + noOfTasks + \" tasks in the list.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints output for the \u0027list\u0027 command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param taskList the taskList that needs its Tasks\u0027 details printed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing a list of Tasks in TaskList"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showTasks(TaskList taskList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"Here are the task(s) in your list:\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d taskList.getArr();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Task temp \u003d arr.get(i);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            result +\u003d (i + 1) + \". \" + temp + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            result +\u003d \"There are no Tasks to show.\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints out a list of deleted Tasks."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param deletedTasks ArrayList of Tasks deleted by executor"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param noOfTasks number of Tasks remaining in the TaskList"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing a list of deleted Tasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showDeletedTasks(ArrayList\u003cTask\u003e deletedTasks, int noOfTasks) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"I have removed all the tasks that were done. Here are the removed tasks:\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (Task deletedTask : deletedTasks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            result +\u003d i + \". \" + deletedTask.toString() + \"\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        result +\u003d \"Now you have \" + noOfTasks + \" task(s) left in the list.\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints error message if loading history file encounters problem."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        System.out.println(\" :( OOPS!!! Error occurred while loading the history file.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints all the tasks with a given String in their description."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param taskList TaskList created by find operation of TaskList"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param filter String that is used to filter tasks"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing list of tasks with given filter in their descriptions"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showFound(TaskList taskList, String filter) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (taskList.isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return \"There are no Tasks in your list with \u0027\" + filter + \"\u0027 in their description.\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String result \u003d \"Here are the task(s) in your list with \u0027\" + filter + \"\u0027 in their description:\\n\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArrayList\u003cTask\u003e arr \u003d taskList.getArr();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Task temp \u003d arr.get(i);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            result +\u003d (i + 1) + \". \" + temp + \"\\n\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints a duplicate message error message."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param task Task that is duplicate"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return message to user to indicate an attempt to add duplicate Task"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String showDuplicateTaskMessage(Task task) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return \" :( OOPS!!! \" + task.toString() + \" already exists! Please enter a different Task.\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 169
    }
  },
  {
    "path": "src/main/java/duke/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents a Deadline object that contains a description and time by which it must be completed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Calendar time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates a Deadline object using information from the arrayList of the Parser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param parser parser which is used to get information to make the obejct."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Deadline(Parser parser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(parser.getList().get(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        time \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArrayList\u003cString\u003e inputArray \u003d parser.getList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        time.set(Integer.parseInt(inputArray.get(3)),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                (Integer.parseInt(inputArray.get(2)) - 1),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(1)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(4)),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(5)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates a deadline object using description and time at which Deadline to be done by."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param des string to represent description of the Task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param time time that deadline must be completed by."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Deadline(String des, Calendar time) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(des);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Return time by which deadline to be completed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return time by which deadline should be completed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Calendar getTime() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints time of the deadline in a user-friendly readable format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return string representing time of the deadline in a particular format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String printTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return printDateAndTime(time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + this.printTime() +  \")\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!(o instanceof Deadline)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return this.getDescription().equals(((Deadline) o).getDescription())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    \u0026\u0026 equal(this.time, ((Deadline) o).time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 71
    }
  },
  {
    "path": "src/main/java/duke/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents an duke.task.Event object that has a description, start-time and end-time to depict a duration."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Calendar startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private Calendar endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates duke.task.Event object taking info from Parser\u0027s ArrayList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param parser Parser containing the information to create the new Event object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Event(Parser parser) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(parser.getList().get(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        startTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        endTime \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        ArrayList\u003cString\u003e inputArray \u003d parser.getList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        startTime.set(Integer.parseInt(inputArray.get(3)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                (Integer.parseInt(inputArray.get(2)) - 1),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(1)),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(4)),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(5)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        endTime.set(Integer.parseInt(inputArray.get(3)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                (Integer.parseInt(inputArray.get(2)) - 1),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(1)),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(6)),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                Integer.parseInt(inputArray.get(7)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates duke.task.Event object using description, start, and end-time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param des description of Task."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param startTime startTime of duke.task.Event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param endTime endTime of duke.task.Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Event(String des, Calendar startTime, Calendar endTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(des);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Return startTime of event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return startTime."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Calendar getStartTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Return endTime of event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return endTime."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Calendar getEndTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns a string representing startTime in a particular user-friendly format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return string representing the startTime in a printing friendly format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String printStartTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return printDateAndTime(startTime);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns a string representing endTime in a particular user-friendly format."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return string representing the endTime in a printing friendly format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String printEndTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return printDateAndTime(endTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + this.printStartTime() + \" - \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + this.printEndTime()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!(o instanceof Event)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return this.getDescription().equals(((Event) o).getDescription())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    \u0026\u0026 equal(this.startTime, ((Event) o).startTime)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    \u0026\u0026 equal(this.endTime, ((Event) o).endTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 99
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents a Task object."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Super class of ToDos, Events, and Deadlines."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Prints any Calendar object in a specific user-friendly date and time format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Used by Event and Deadline classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param time Calendar object that needs to be printed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return String representing the date and time of Calendar object in specific format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static String printDateAndTime(Calendar time) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String jargon \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        switch (time.get(Calendar.DAY_OF_MONTH) % 10) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case 1 : jargon \u003d \"st \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case 2 : jargon \u003d \"nd \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        case 3 : jargon \u003d \"rd \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        default : jargon \u003d \"th \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (time.get(Calendar.DAY_OF_MONTH) / 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            jargon \u003d \"th \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        SimpleDateFormat dateFormatter \u003d new SimpleDateFormat(\"MMMM, YYYY. h:mma\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        String dateWithoutDay \u003d dateFormatter.format(time.getTime()).replace(\"AM\",\"am\").replace(\"PM\",\"pm\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return time.get(Calendar.DAY_OF_MONTH) + jargon"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                + dateWithoutDay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Checks if two Calendar times are equal in value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param time1 Calendar time 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param time2 Calendar time 2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return true if the times are equal, false otherwise"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public static boolean equal(Calendar time1, Calendar time2) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return time1.get(Calendar.DAY_OF_MONTH) \u003d\u003d time2.get(Calendar.DAY_OF_MONTH)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 time1.get(Calendar.MONTH) \u003d\u003d time2.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 time1.get(Calendar.YEAR) \u003d\u003d time2.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 time1.get(Calendar.HOUR_OF_DAY) \u003d\u003d time2.get(Calendar.HOUR_OF_DAY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                \u0026\u0026 time1.get(Calendar.MINUTE) \u003d\u003d time2.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates a task object with description as input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param des description of task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public Task(String des) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        description \u003d des;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns an icon according to whether the task is done or not."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return \u0027+\u0027 if task is done and \u0027-\u0027 if task is not done."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return isDone ? \"+\" : \"-\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Marks the task as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Returns description of Task."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @return description of Task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public abstract boolean equals(Object o);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 97
    }
  },
  {
    "path": "src/main/java/duke/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " * Represents ToDo object with a description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates an object using information from the ArrayList of the Parser."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param parser parser that contains information about the ToDo object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ToDo(Parser parser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(parser.getList().get(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * Creates a Todo object with description as input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     * @param des description of the ToDo object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public ToDo(String des) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        super(des);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        if (!(o instanceof ToDo)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            return this.getDescription().equals(((ToDo) o).getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 38
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"display-pane\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" styleClass\u003d\"content-section\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cURL value\u003d\"@label.css\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 20
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"700.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.application.MainWindow\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"658.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"657.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 19
    }
  },
  {
    "path": "src/test/java/duke/command/ParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void getType() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"event\", new Parser(\"evENT apply for job /at 12/06/2000 1900-2100\").getType());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"deadline\", new Parser(\"DEAdline do something /by 23/05/2000 1900\").getType());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"todo\", new Parser(\"TodO something\").getType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void isValid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertTrue(new Parser(\"TOdo well lol\").isValid());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertTrue(new Parser(\"event concentrate /at 05/09/2019 0001-2359\").isValid());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertTrue(new Parser(\"deadline sleep /by 04/09/2019 2355\").isValid());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertFalse(new Parser(\"todos something\").isValid());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertFalse(new Parser(\"deadsd svsr   /by 27/07/2080 1900\").isValid());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertFalse(new Parser(\"feeling good /at 29/08/2019 1000-1200\").isValid());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 35
    }
  },
  {
    "path": "src/test/java/duke/task/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void printTime() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"11th January, 2000. 3:43pm\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    new Deadline(new Parser(\"deaDLine finish job /by 11/1/2000 1543\")).printTime());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Deadline deadline \u003d new Deadline(new Parser(\"deadline finish job 11/1/2000 /by 1543\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\" :( OOPS!!! Invalid format for date and time. Please enter \u0027DD/MM/YYYY HHMM\u0027\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    e.getMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void testToString() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(\"[D][-] sleep (by: 29th July, 2018. 11:00pm)\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                new Deadline(new Parser(\"deadline sleep /by 29/07/2018 2300\")).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        Deadline deadline \u003d new Deadline(new Parser(\"DEadline sleep right now /by 21/12/2015 0846\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        assertEquals(\"[D][+] sleep right now (by: 21st December, 2015. 8:46am)\", deadline.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 31
    }
  },
  {
    "path": "src/test/java/duke/task/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void printStartTime() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Event event \u003d new Event(new Parser(\"eVEnt lol /at 31/05/1969 1800-2359\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"31st May, 1969. 6:00pm\", event.printStartTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void printEndTime() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Event event \u003d new Event(new Parser(\"event lol /at 31/05/1969 1800-2359\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"31st May, 1969. 11:59pm\", event.printEndTime());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"[E][-] go to lecture (at: 13th February, 2019. 4:00am - 13th February, 2019. 8:00pm)\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    new Event(new Parser(\"eveNT go to lecture /at 13/02/2019 0400-2000\")).toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            Event event \u003d new Event(new Parser(\"event /at 27/07/2000 1400\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\" :( OOPS!!! Invalid Format. Either Description or \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    + \"Date and/or start and end time not provided.\", e.getMessage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 41
    }
  },
  {
    "path": "src/test/java/duke/task/ToDoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import duke.command.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "class ToDoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(\"[T][-] 2103 project work\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "                    new ToDo(new Parser(\"TODO 2103 project work\")).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            ToDo toDo \u003d new ToDo(new Parser(\"todo\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "            assertEquals(e.getMessage(), \" :( OOPS!!! The description of todos cannot be empty.\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ManasVegi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ManasVegi": 21
    }
  }
]
